// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
// Copyright (c) Adithya Kumar, The Pennsylvania State University. All rights reserved.
// Licensed under the MIT License.

#include <stdexcept>
#include <cublas_v2.h>
#include <cudnn.h>
#include <sstream>
#include <cuda.h>
#include <cuda_runtime.h>
#include <stdio.h>
#include <assert.h>
#include <fstream>
#include "nnfusion_rt.h"
#define CUDA_SAFE_CALL(x)                                                                          \
    do                                                                                             \
    {                                                                                              \
        cudaError_t result = (x);                                                                  \
        if (result != cudaSuccess)                                                                 \
        {                                                                                          \
            const char* msg = cudaGetErrorString(result);                                          \
            std::stringstream safe_call_ss;                                                        \
            safe_call_ss << "\nerror: " #x " failed with error"                                    \
                         << "\nfile: " << __FILE__ << "\nline: " << __LINE__ << "\nmsg: " << msg;  \
            throw std::runtime_error(safe_call_ss.str());                                          \
        }                                                                                          \
    } while (0)
#define CUBLAS_SAFE_CALL(func)                                                                     \
    do                                                                                             \
    {                                                                                              \
        cublasStatus_t e = (func);                                                                 \
        if (e != CUBLAS_STATUS_SUCCESS)                                                            \
        {                                                                                          \
            std::stringstream safe_call_ss;                                                        \
            safe_call_ss << "\nerror: " #func " failed with error"                                 \
                         << "\nfile: " << __FILE__ << "\nline: " << __LINE__ << "\nmsg: " << e;    \
            throw std::runtime_error(safe_call_ss.str());                                          \
        }                                                                                          \
    } while (0)
   #define CUDNN_SAFE_CALL(func)                                                                      \
    do                                                                                             \
    {                                                                                              \
        cudnnStatus_t e = (func);                                                                  \
        if (e != CUDNN_STATUS_SUCCESS)                                                             \
        {                                                                                          \
            const char* msg = cudnnGetErrorString(e);                                              \
            std::stringstream safe_call_ss;                                                        \
            safe_call_ss << "\nerror: " #func " failed with error"                                 \
                         << "\nfile: " << __FILE__ << "\nline: " << __LINE__ << "\nmsg: " << msg;  \
            throw std::runtime_error(safe_call_ss.str());                                          \
        }                                                                                          \
    } while (0)
char* group_0_CUDA_GPU0_allocator_memory_pool;
float* Broadcast_212_0;
int32_t* Concat_194_0;
int32_t* Concat_193_0;
float* Slice_205_0;
float* Slice_207_0;
float* Slice_203_0;
float* Slice_209_0;
float* Slice_201_0;
float* Slice_197_0;
float* Slice_199_0;
float* Slice_195_0;
float* Reshape_210_0;
float* Reshape_208_0;
float* Reshape_206_0;
float* Reshape_204_0;
float* Reshape_202_0;
float* Reshape_200_0;
float* Reshape_198_0;
float* Reshape_196_0;
float* Dot_239_0;
float* Dot_234_0;
float* Dot_231_0;
float* Dot_219_0;
float* Dot_230_0;
float* Dot_240_0;
float* Dot_229_0;
float* Dot_232_0;
float* Dot_244_0;
float* Dot_220_0;
float* Dot_243_0;
float* Dot_242_0;
float* Dot_228_0;
float* Dot_226_0;
float* Dot_224_0;
float* Dot_214_0;
float* Dot_213_0;
float* Dot_233_0;
float* Dot_218_0;
float* Dot_236_0;
float* Dot_222_0;
float* Dot_215_0;
float* Dot_235_0;
float* Dot_225_0;
float* Dot_237_0;
float* Dot_221_0;
float* Dot_223_0;
float* Dot_217_0;
float* Dot_216_0;
float* Dot_227_0;
float* Dot_238_0;
float* Dot_241_0;
float* Dot_263_0;
float* Dot_267_0;
float* Dot_261_0;
float* Dot_260_0;
float* Dot_259_0;
float* Dot_254_0;
float* Dot_255_0;
float* Dot_262_0;
float* Dot_258_0;
float* Dot_272_0;
float* Dot_249_0;
float* Dot_256_0;
float* Dot_273_0;
float* Dot_250_0;
float* Dot_276_0;
float* Dot_253_0;
float* Dot_275_0;
float* Dot_252_0;
float* Dot_257_0;
float* Dot_246_0;
float* Dot_269_0;
float* Dot_274_0;
float* Dot_251_0;
float* Dot_245_0;
float* Dot_268_0;
float* Dot_271_0;
float* Dot_248_0;
float* Dot_270_0;
float* Dot_247_0;
float* Dot_264_0;
float* Dot_265_0;
float* Dot_266_0;
float* Add_298_0;
float* Multiply_300_0;
float* Dot_302_0;
float* Dot_301_0;
float* Dot_303_0;
float* Dot_304_0;
float* Dot_306_0;
float* Dot_305_0;
float* Dot_307_0;
float* Dot_308_0;
float* Multiply_355_0;
float* Add_351_0;
float* Multiply_356_0;
float* Add_352_0;
float* Dot_372_0;
float* Dot_357_0;
float* Dot_370_0;
float* Dot_365_0;
float* Dot_358_0;
float* Dot_371_0;
float* Dot_367_0;
float* Dot_366_0;
float* Dot_368_0;
float* Dot_369_0;
float* Dot_363_0;
float* Dot_362_0;
float* Dot_360_0;
float* Dot_359_0;
float* Dot_361_0;
float* Dot_364_0;
float* Multiply_442_0;
float* Add_436_0;
float* Multiply_443_0;
float* Add_437_0;
float* Multiply_444_0;
float* Add_438_0;
float* Dot_454_0;
float* Dot_453_0;
float* Dot_457_0;
float* Dot_465_0;
float* Dot_452_0;
float* Dot_450_0;
float* Dot_464_0;
float* Dot_451_0;
float* Dot_445_0;
float* Dot_446_0;
float* Dot_449_0;
float* Dot_448_0;
float* Dot_447_0;
float* Dot_462_0;
float* Dot_463_0;
float* Dot_461_0;
float* Dot_467_0;
float* Dot_466_0;
float* Dot_468_0;
float* Dot_455_0;
float* Dot_459_0;
float* Dot_460_0;
float* Dot_458_0;
float* Dot_456_0;
float* Multiply_561_0;
float* Add_553_0;
float* Multiply_562_0;
float* Add_554_0;
float* Multiply_563_0;
float* Add_555_0;
float* Multiply_564_0;
float* Add_556_0;
float* Dot_580_0;
float* Dot_573_0;
float* Dot_575_0;
float* Dot_574_0;
float* Dot_577_0;
float* Dot_576_0;
float* Dot_578_0;
float* Dot_579_0;
float* Dot_582_0;
float* Dot_581_0;
float* Dot_587_0;
float* Dot_592_0;
float* Dot_591_0;
float* Dot_567_0;
float* Dot_596_0;
float* Dot_583_0;
float* Dot_568_0;
float* Dot_565_0;
float* Dot_594_0;
float* Dot_569_0;
float* Dot_584_0;
float* Dot_588_0;
float* Dot_586_0;
float* Dot_585_0;
float* Dot_589_0;
float* Dot_590_0;
float* Dot_593_0;
float* Dot_595_0;
float* Dot_566_0;
float* Dot_572_0;
float* Dot_571_0;
float* Dot_570_0;
float* Multiply_712_0;
float* Add_702_0;
float* Multiply_713_0;
float* Add_703_0;
float* Multiply_714_0;
float* Add_704_0;
float* Multiply_715_0;
float* Add_705_0;
float* Multiply_716_0;
float* Add_706_0;
float* Dot_737_0;
float* Dot_741_0;
float* Dot_742_0;
float* Dot_743_0;
float* Dot_725_0;
float* Dot_754_0;
float* Dot_746_0;
float* Dot_717_0;
float* Dot_730_0;
float* Dot_748_0;
float* Dot_719_0;
float* Dot_745_0;
float* Dot_750_0;
float* Dot_721_0;
float* Dot_749_0;
float* Dot_720_0;
float* Dot_747_0;
float* Dot_718_0;
float* Dot_744_0;
float* Dot_752_0;
float* Dot_723_0;
float* Dot_751_0;
float* Dot_722_0;
float* Dot_753_0;
float* Dot_724_0;
float* Dot_755_0;
float* Dot_726_0;
float* Dot_756_0;
float* Dot_727_0;
float* Dot_736_0;
float* Dot_735_0;
float* Dot_734_0;
float* Dot_733_0;
float* Dot_740_0;
float* Dot_739_0;
float* Dot_738_0;
float* Dot_729_0;
float* Dot_728_0;
float* Dot_732_0;
float* Dot_731_0;
float* Multiply_895_0;
float* Add_883_0;
float* Multiply_896_0;
float* Add_884_0;
float* Multiply_897_0;
float* Add_885_0;
float* Multiply_898_0;
float* Add_886_0;
float* Multiply_899_0;
float* Add_887_0;
float* Multiply_900_0;
float* Add_888_0;
float* Dot_917_0;
float* Dot_946_0;
float* Dot_920_0;
float* Dot_919_0;
float* Dot_924_0;
float* Dot_945_0;
float* Dot_916_0;
float* Dot_944_0;
float* Dot_915_0;
float* Dot_943_0;
float* Dot_914_0;
float* Dot_934_0;
float* Dot_905_0;
float* Dot_906_0;
float* Dot_901_0;
float* Dot_903_0;
float* Dot_902_0;
float* Dot_937_0;
float* Dot_908_0;
float* Dot_904_0;
float* Dot_907_0;
float* Dot_938_0;
float* Dot_909_0;
float* Dot_910_0;
float* Dot_940_0;
float* Dot_911_0;
float* Dot_912_0;
float* Dot_942_0;
float* Dot_913_0;
float* Dot_947_0;
float* Dot_918_0;
float* Dot_941_0;
float* Dot_935_0;
float* Dot_948_0;
float* Dot_939_0;
float* Dot_936_0;
float* Dot_933_0;
float* Dot_932_0;
float* Dot_931_0;
float* Dot_930_0;
float* Dot_929_0;
float* Dot_928_0;
float* Dot_927_0;
float* Dot_926_0;
float* Dot_925_0;
float* Dot_923_0;
float* Dot_922_0;
float* Dot_921_0;
float* Multiply_1113_0;
float* Add_1097_0;
float* Add_1096_0;
float* Add_1098_0;
float* Multiply_1114_0;
float* Add_1099_0;
float* Multiply_1115_0;
float* Multiply_1116_0;
float* Add_1100_0;
float* Multiply_1110_0;
float* Multiply_1112_0;
float* Add_1102_0;
float* Add_1101_0;
float* Multiply_1111_0;
float* Dot_1144_0;
float* Dot_1142_0;
float* Dot_1141_0;
float* Dot_1164_0;
float* Dot_1135_0;
float* Dot_1137_0;
float* Dot_1139_0;
float* Dot_1140_0;
float* Dot_1138_0;
float* Dot_1136_0;
float* Dot_1134_0;
float* Dot_1133_0;
float* Dot_1124_0;
float* Dot_1123_0;
float* Dot_1121_0;
float* Dot_1132_0;
float* Dot_1119_0;
float* Dot_1125_0;
float* Dot_1127_0;
float* Dot_1126_0;
float* Dot_1129_0;
float* Dot_1128_0;
float* Dot_1130_0;
float* Dot_1117_0;
float* Dot_1160_0;
float* Dot_1131_0;
float* Dot_1118_0;
float* Dot_1120_0;
float* Dot_1122_0;
float* Dot_1161_0;
float* Dot_1163_0;
float* Dot_1169_0;
float* Dot_1166_0;
float* Dot_1168_0;
float* Dot_1171_0;
float* Dot_1170_0;
float* Dot_1167_0;
float* Dot_1159_0;
float* Dot_1172_0;
float* Dot_1143_0;
float* Dot_1165_0;
float* Dot_1162_0;
float* Dot_1158_0;
float* Dot_1157_0;
float* Dot_1149_0;
float* Dot_1154_0;
float* Dot_1153_0;
float* Dot_1151_0;
float* Dot_1152_0;
float* Dot_1150_0;
float* Dot_1156_0;
float* Dot_1155_0;
float* Dot_1148_0;
float* Dot_1147_0;
float* Dot_1146_0;
float* Dot_1145_0;
float* Multiply_1360_0;
float* Add_1344_0;
float* Multiply_1361_0;
float* Add_1345_0;
float* Multiply_1362_0;
float* Multiply_1357_0;
float* Add_1347_0;
float* Add_1346_0;
float* Multiply_1363_0;
float* Multiply_1358_0;
float* Multiply_1364_0;
float* Add_1343_0;
float* Multiply_1359_0;
float* Add_1341_0;
float* Add_1342_0;
float* Dot_1385_0;
float* Dot_1392_0;
float* Dot_1391_0;
float* Dot_1390_0;
float* Dot_1389_0;
float* Dot_1388_0;
float* Dot_1387_0;
float* Dot_1366_0;
float* Dot_1365_0;
float* Dot_1368_0;
float* Dot_1367_0;
float* Dot_1369_0;
float* Dot_1376_0;
float* Dot_1375_0;
float* Dot_1384_0;
float* Dot_1371_0;
float* Dot_1410_0;
float* Dot_1381_0;
float* Dot_1382_0;
float* Dot_1383_0;
float* Dot_1370_0;
float* Dot_1409_0;
float* Dot_1380_0;
float* Dot_1377_0;
float* Dot_1378_0;
float* Dot_1379_0;
float* Dot_1372_0;
float* Dot_1373_0;
float* Dot_1374_0;
float* Dot_1411_0;
float* Dot_1412_0;
float* Dot_1413_0;
float* Dot_1414_0;
float* Dot_1415_0;
float* Dot_1386_0;
float* Dot_1416_0;
float* Dot_1417_0;
float* Dot_1405_0;
float* Dot_1418_0;
float* Dot_1419_0;
float* Dot_1420_0;
float* Dot_1404_0;
float* Dot_1403_0;
float* Dot_1402_0;
float* Dot_1401_0;
float* Dot_1407_0;
float* Dot_1406_0;
float* Dot_1408_0;
float* Dot_1395_0;
float* Dot_1394_0;
float* Dot_1398_0;
float* Dot_1397_0;
float* Dot_1396_0;
float* Dot_1393_0;
float* Dot_1400_0;
float* Dot_1399_0;
float* Multiply_1584_0;
float* Add_1570_0;
float* Add_1569_0;
float* Add_1568_0;
float* Multiply_1585_0;
float* Add_1571_0;
float* Multiply_1586_0;
float* Multiply_1582_0;
float* Add_1572_0;
float* Multiply_1587_0;
float* Multiply_1583_0;
float* Add_1573_0;
float* Multiply_1588_0;
float* Dot_1592_0;
float* Dot_1591_0;
float* Dot_1589_0;
float* Dot_1625_0;
float* Dot_1596_0;
float* Dot_1595_0;
float* Dot_1628_0;
float* Dot_1599_0;
float* Dot_1634_0;
float* Dot_1605_0;
float* Dot_1606_0;
float* Dot_1593_0;
float* Dot_1636_0;
float* Dot_1607_0;
float* Dot_1594_0;
float* Dot_1631_0;
float* Dot_1602_0;
float* Dot_1632_0;
float* Dot_1603_0;
float* Dot_1604_0;
float* Dot_1630_0;
float* Dot_1601_0;
float* Dot_1608_0;
float* Dot_1629_0;
float* Dot_1600_0;
float* Dot_1626_0;
float* Dot_1597_0;
float* Dot_1627_0;
float* Dot_1598_0;
float* Dot_1635_0;
float* Dot_1620_0;
float* Dot_1633_0;
float* Dot_1619_0;
float* Dot_1590_0;
float* Dot_1623_0;
float* Dot_1618_0;
float* Dot_1622_0;
float* Dot_1621_0;
float* Dot_1617_0;
float* Dot_1624_0;
float* Dot_1615_0;
float* Dot_1614_0;
float* Dot_1613_0;
float* Dot_1609_0;
float* Dot_1612_0;
float* Dot_1611_0;
float* Dot_1616_0;
float* Dot_1610_0;
float* Multiply_1777_0;
float* Add_1765_0;
float* Multiply_1776_0;
float* Add_1764_0;
float* Multiply_1775_0;
float* Add_1763_0;
float* Multiply_1778_0;
float* Add_1766_0;
float* Multiply_1779_0;
float* Add_1767_0;
float* Multiply_1780_0;
float* Dot_1787_0;
float* Dot_1816_0;
float* Dot_1786_0;
float* Dot_1815_0;
float* Dot_1785_0;
float* Dot_1814_0;
float* Dot_1784_0;
float* Dot_1813_0;
float* Dot_1783_0;
float* Dot_1812_0;
float* Dot_1782_0;
float* Dot_1811_0;
float* Dot_1781_0;
float* Dot_1810_0;
float* Dot_1794_0;
float* Dot_1793_0;
float* Dot_1795_0;
float* Dot_1808_0;
float* Dot_1796_0;
float* Dot_1809_0;
float* Dot_1799_0;
float* Dot_1797_0;
float* Dot_1798_0;
float* Dot_1800_0;
float* Dot_1817_0;
float* Dot_1788_0;
float* Dot_1791_0;
float* Dot_1818_0;
float* Dot_1789_0;
float* Dot_1819_0;
float* Dot_1790_0;
float* Dot_1820_0;
float* Dot_1804_0;
float* Dot_1803_0;
float* Dot_1806_0;
float* Dot_1807_0;
float* Dot_1802_0;
float* Dot_1805_0;
float* Dot_1801_0;
float* Dot_1792_0;
float* Multiply_1937_0;
float* Add_1927_0;
float* Multiply_1938_0;
float* Add_1928_0;
float* Multiply_1936_0;
float* Add_1926_0;
float* Multiply_1939_0;
float* Add_1929_0;
float* Multiply_1940_0;
float* Dot_1949_0;
float* Dot_1946_0;
float* Dot_1953_0;
float* Dot_1954_0;
float* Dot_1955_0;
float* Dot_1956_0;
float* Dot_1957_0;
float* Dot_1958_0;
float* Dot_1959_0;
float* Dot_1960_0;
float* Dot_1944_0;
float* Dot_1943_0;
float* Dot_1972_0;
float* Dot_1941_0;
float* Dot_1970_0;
float* Dot_1969_0;
float* Dot_1950_0;
float* Dot_1963_0;
float* Dot_1951_0;
float* Dot_1964_0;
float* Dot_1952_0;
float* Dot_1965_0;
float* Dot_1967_0;
float* Dot_1968_0;
float* Dot_1942_0;
float* Dot_1971_0;
float* Dot_1962_0;
float* Dot_1961_0;
float* Dot_1966_0;
float* Dot_1948_0;
float* Dot_1945_0;
float* Dot_1947_0;
float* Multiply_2066_0;
float* Add_2058_0;
float* Multiply_2065_0;
float* Add_2057_0;
float* Multiply_2067_0;
float* Add_2059_0;
float* Multiply_2068_0;
float* Dot_2072_0;
float* Dot_2071_0;
float* Dot_2070_0;
float* Dot_2080_0;
float* Dot_2073_0;
float* Dot_2089_0;
float* Dot_2076_0;
float* Dot_2075_0;
float* Dot_2079_0;
float* Dot_2074_0;
float* Dot_2091_0;
float* Dot_2078_0;
float* Dot_2077_0;
float* Dot_2090_0;
float* Dot_2092_0;
float* Dot_2081_0;
float* Dot_2088_0;
float* Dot_2086_0;
float* Dot_2087_0;
float* Dot_2084_0;
float* Dot_2085_0;
float* Dot_2083_0;
float* Dot_2082_0;
float* Dot_2069_0;
float* Multiply_2163_0;
float* Add_2157_0;
float* Multiply_2162_0;
float* Add_2156_0;
float* Multiply_2164_0;
float* Dot_2175_0;
float* Dot_2176_0;
float* Dot_2168_0;
float* Dot_2177_0;
float* Dot_2165_0;
float* Dot_2178_0;
float* Dot_2166_0;
float* Dot_2179_0;
float* Dot_2167_0;
float* Dot_2180_0;
float* Dot_2169_0;
float* Dot_2172_0;
float* Dot_2171_0;
float* Dot_2170_0;
float* Dot_2174_0;
float* Dot_2173_0;
float* Multiply_2227_0;
float* Add_2223_0;
float* Multiply_2228_0;
float* Dot_2231_0;
float* Dot_2229_0;
float* Dot_2232_0;
float* Dot_2230_0;
float* Dot_2236_0;
float* Dot_2234_0;
float* Dot_2235_0;
float* Dot_2233_0;
float* Multiply_2260_0;
__device__ __forceinline__ float sigmoid(float x0)
{
    return 1 / (1 + expf(-x0));
}
__device__ __forceinline__ float add(float x0, float x1)
{
    return x0 + x1;
}
__device__ __forceinline__ float mul(float x0, float x1)
{
    return x0 * x1;
}
__device__ __forceinline__ char  load(const char*  __restrict__ in, int i=0, bool b=true)
{
    char v = 0;
    if (b)
    {
        v = __ldg(in + i);
    }
    return v;
} 
__device__ __forceinline__ float  load(const float*  __restrict__ in, int i=0, bool b=true)
{
    float v = 0.0f;
    if (b)
    {
        v = __ldg(in + i);
    }
    return v;
}
__device__ __forceinline__ int32_t  load(const int32_t*  __restrict__ in, int i=0, bool b=true)
{
    int32_t v = 0;
    if (b)
    {
        v = __ldg(in + i);
    }
    return v;
}
__device__ __forceinline__ int64_t  load(const int64_t*  __restrict__ in, int i=0, bool b=true)
{
    int64_t v = 0;
    if (b)
    {
        v = __ldg(in + i);
    }
    return v;
}
__device__ __forceinline__ int division_by_invariant_multiplication(int value, int magic, int shift)
{
    int result;
    asm("{\n\t"
        ".reg .pred p;\n\t"
        ".reg .u64 res64;\n\t"
        ".reg .u32 lo32, hi32;\n\t"
        "setp.ne.s32 p, %2, 1;\n\t"
        "mul.wide.u32 res64, %1, %2;\n\t"
        "mov.b64 {lo32, hi32}, res64;\n\t"
        "selp.u32 hi32, hi32, %1, p;\n\t"
        "shr.u32 %0, hi32, %3;\n\t"
        "}" : "=r"(result) : "r"(value), "r"(magic), "r"(shift));
    return result;
}
char* group_persist_CUDA_GPU0_allocator_memory_pool;
float* Constant_104_0;
int32_t* Constant_102_0;
int32_t* Constant_101_0;
int32_t* Constant_98_0;
int32_t* Constant_97_0;
float* Constant_9_0;
float* Constant_6_0;
float* Constant_3_0;
float* Constant_0_0;
float* Constant_94_0;
float* Constant_91_0;
float* Constant_88_0;
float* Constant_85_0;
float* Constant_82_0;
float* Constant_79_0;
float* Constant_76_0;
float* Constant_73_0;
float* Constant_70_0;
float* Constant_67_0;
float* Constant_64_0;
float* Constant_61_0;
float* Constant_58_0;
float* Constant_55_0;
float* Constant_52_0;
float* Constant_49_0;
float* Constant_46_0;
float* Constant_43_0;
float* Constant_40_0;
float* Constant_37_0;
float* Constant_34_0;
float* Constant_31_0;
float* Constant_28_0;
float* Constant_25_0;
float* Constant_22_0;
float* Constant_19_0;
float* Constant_16_0;
float* Constant_13_0;
float* Constant_10_0;
float* Constant_7_0;
float* Constant_4_0;
float* Constant_1_0;
float* Constant_108_0;
float* Reshape_291_0;
float* Constant_11_0;
float* Reshape_287_0;
float* Constant_8_0;
float* Reshape_285_0;
float* Constant_5_0;
float* Reshape_283_0;
float* Constant_2_0;
float* Reshape_281_0;
float* Constant_100_0;
float* Constant_21_0;
float* Constant_18_0;
float* Constant_15_0;
float* Constant_12_0;
float* Constant_119_0;
float* Reshape_341_0;
float* Constant_109_0;
float* Reshape_335_0;
float* Constant_23_0;
float* Reshape_323_0;
float* Constant_20_0;
float* Reshape_321_0;
float* Constant_17_0;
float* Reshape_319_0;
float* Constant_14_0;
float* Reshape_317_0;
float* Constant_33_0;
float* Constant_30_0;
float* Constant_27_0;
float* Constant_24_0;
float* Constant_130_0;
float* Reshape_423_0;
float* Constant_120_0;
float* Reshape_417_0;
float* Constant_110_0;
float* Reshape_411_0;
float* Constant_35_0;
float* Reshape_391_0;
float* Constant_32_0;
float* Reshape_389_0;
float* Constant_29_0;
float* Reshape_387_0;
float* Constant_26_0;
float* Reshape_385_0;
float* Constant_45_0;
float* Constant_42_0;
float* Constant_39_0;
float* Constant_36_0;
float* Constant_141_0;
float* Reshape_537_0;
float* Constant_131_0;
float* Reshape_531_0;
float* Constant_121_0;
float* Reshape_525_0;
float* Constant_111_0;
float* Reshape_519_0;
float* Constant_47_0;
float* Reshape_491_0;
float* Constant_44_0;
float* Reshape_489_0;
float* Constant_41_0;
float* Reshape_487_0;
float* Constant_38_0;
float* Reshape_485_0;
float* Constant_57_0;
float* Constant_54_0;
float* Constant_51_0;
float* Constant_48_0;
float* Constant_152_0;
float* Reshape_683_0;
float* Constant_142_0;
float* Reshape_677_0;
float* Constant_132_0;
float* Reshape_671_0;
float* Constant_122_0;
float* Reshape_665_0;
float* Constant_112_0;
float* Reshape_659_0;
float* Constant_59_0;
float* Reshape_623_0;
float* Constant_56_0;
float* Reshape_621_0;
float* Constant_53_0;
float* Reshape_619_0;
float* Constant_50_0;
float* Reshape_617_0;
float* Constant_69_0;
float* Constant_66_0;
float* Constant_63_0;
float* Constant_60_0;
float* Constant_163_0;
float* Reshape_861_0;
float* Constant_153_0;
float* Reshape_855_0;
float* Constant_143_0;
float* Reshape_849_0;
float* Constant_133_0;
float* Reshape_843_0;
float* Constant_123_0;
float* Reshape_837_0;
float* Constant_113_0;
float* Reshape_831_0;
float* Constant_71_0;
float* Reshape_787_0;
float* Constant_68_0;
float* Reshape_785_0;
float* Constant_65_0;
float* Reshape_783_0;
float* Constant_62_0;
float* Reshape_781_0;
float* Constant_81_0;
float* Constant_78_0;
float* Constant_75_0;
float* Constant_72_0;
float* Constant_83_0;
float* Reshape_983_0;
float* Constant_80_0;
float* Reshape_981_0;
float* Constant_77_0;
float* Reshape_979_0;
float* Constant_74_0;
float* Reshape_977_0;
float* Constant_174_0;
float* Reshape_1071_0;
float* Constant_164_0;
float* Reshape_1065_0;
float* Constant_154_0;
float* Reshape_1059_0;
float* Constant_144_0;
float* Reshape_1053_0;
float* Constant_134_0;
float* Reshape_1047_0;
float* Constant_124_0;
float* Reshape_1041_0;
float* Constant_114_0;
float* Reshape_1035_0;
float* Constant_93_0;
float* Constant_90_0;
float* Constant_87_0;
float* Constant_84_0;
float* Constant_185_0;
float* Reshape_1313_0;
float* Constant_175_0;
float* Reshape_1307_0;
float* Constant_165_0;
float* Reshape_1301_0;
float* Constant_155_0;
float* Reshape_1295_0;
float* Constant_145_0;
float* Reshape_1289_0;
float* Constant_135_0;
float* Reshape_1283_0;
float* Constant_125_0;
float* Reshape_1277_0;
float* Constant_115_0;
float* Reshape_1271_0;
float* Constant_95_0;
float* Reshape_1211_0;
float* Constant_92_0;
float* Reshape_1209_0;
float* Constant_89_0;
float* Reshape_1207_0;
float* Constant_86_0;
float* Reshape_1205_0;
float* Constant_186_0;
float* Reshape_1543_0;
float* Constant_176_0;
float* Reshape_1537_0;
float* Constant_166_0;
float* Reshape_1531_0;
float* Constant_156_0;
float* Reshape_1525_0;
float* Constant_146_0;
float* Reshape_1519_0;
float* Constant_136_0;
float* Reshape_1513_0;
float* Constant_126_0;
float* Reshape_1507_0;
float* Constant_187_0;
float* Reshape_1741_0;
float* Constant_177_0;
float* Reshape_1735_0;
float* Constant_167_0;
float* Reshape_1729_0;
float* Constant_157_0;
float* Reshape_1723_0;
float* Constant_147_0;
float* Reshape_1717_0;
float* Constant_137_0;
float* Reshape_1711_0;
float* Constant_188_0;
float* Reshape_1907_0;
float* Constant_178_0;
float* Reshape_1901_0;
float* Constant_168_0;
float* Reshape_1895_0;
float* Constant_158_0;
float* Reshape_1889_0;
float* Constant_148_0;
float* Reshape_1883_0;
float* Constant_189_0;
float* Reshape_2041_0;
float* Constant_179_0;
float* Reshape_2035_0;
float* Constant_169_0;
float* Reshape_2029_0;
float* Constant_159_0;
float* Reshape_2023_0;
float* Constant_190_0;
float* Reshape_2143_0;
float* Constant_180_0;
float* Reshape_2137_0;
float* Constant_170_0;
float* Reshape_2131_0;
float* Constant_191_0;
float* Reshape_2213_0;
float* Constant_181_0;
float* Reshape_2207_0;
float* Constant_192_0;
float* Reshape_2251_0;

typedef signed char int8_t;
typedef signed short int16_t;
typedef signed int int32_t;
typedef signed long int int64_t;
typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;
typedef unsigned long int uint64_t;
// Node name:	Constant_185
// Description:	Constant
// Input:
// Output:
//	- name: Constant_185_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_185(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_185_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_185_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_83
// Description:	Constant
// Input:
// Output:
//	- name: Constant_83_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_83(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_83_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_83_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_163
// Description:	Constant
// Input:
// Output:
//	- name: Constant_163_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_163(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_163_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_163_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_97
// Description:	Constant
// Input:
// Output:
//	- name: Constant_97_0	type: int32_t	shape: Shape{1}
void Constant_int32_t_cuda_Constant_97(cudaStream_t stream, int32_t* output0)
{
    std::ifstream bin_file("./Constant/Constant_97_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_97_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_46
// Description:	Constant
// Input:
// Output:
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_46(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_46_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_46_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_2179_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2175_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2213_0	type: float	shape: Shape{1}
//	- name: Add_2157_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2177_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2173_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2178_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2174_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2180_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2176_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2171_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2167_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2207_0	type: float	shape: Shape{1}
//	- name: Add_2156_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2169_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2165_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2170_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2166_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2172_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2168_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2228_0	type: float	shape: Shape{1, 256}
//	- name: Add_2223_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2227_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_62<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2179_0, Dot_2175_0, Reshape_981_0, Reshape_2213_0, Add_2157_0, Dot_2177_0, Dot_2173_0, Reshape_977_0, Dot_2178_0, Dot_2174_0, Reshape_979_0, Dot_2180_0, Dot_2176_0, Reshape_983_0, Multiply_2228_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_61<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2171_0, Dot_2167_0, Reshape_1209_0, Reshape_2207_0, Add_2156_0, Dot_2169_0, Dot_2165_0, Reshape_1205_0, Dot_2170_0, Dot_2166_0, Reshape_1207_0, Dot_2172_0, Dot_2168_0, Reshape_1211_0, Multiply_2227_0, Add_2223_0);
// Deduped function map: <src_function_name : deduped_function_name>

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_2179_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2175_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2213_0	type: float	shape: Shape{1}
//	- name: Add_2157_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2177_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2173_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2178_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2174_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2180_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2176_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2228_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_2187<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2179_0, Dot_2175_0, Add_2187_0);
// Add_float_float_float_cuda_Add_2202<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2187_0, Reshape_981_0, Add_2202_0);
// Broadcast_float_float_cuda_Broadcast_2214<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2213_0, Broadcast_2214_0);
// Add_float_float_float_cuda_Add_2215<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2202_0, Broadcast_2214_0, Add_2215_0);
// Sigmoid_float_float_cuda_Sigmoid_2220<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2215_0, Sigmoid_2220_0);
// Multiply_float_float_float_cuda_Multiply_2222<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2157_0, Sigmoid_2220_0, Multiply_2222_0);
// Add_float_float_float_cuda_Add_2185<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2177_0, Dot_2173_0, Add_2185_0);
// Add_float_float_float_cuda_Add_2198<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2185_0, Reshape_977_0, Add_2198_0);
// Sigmoid_float_float_cuda_Sigmoid_2211<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2198_0, Sigmoid_2211_0);
// Add_float_float_float_cuda_Add_2186<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2178_0, Dot_2174_0, Add_2186_0);
// Add_float_float_float_cuda_Add_2200<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2186_0, Reshape_979_0, Add_2200_0);
// Tanh_float_float_cuda_Tanh_2212<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2200_0, Tanh_2212_0);
// Multiply_float_float_float_cuda_Multiply_2219<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2211_0, Tanh_2212_0, Multiply_2219_0);
// Add_float_float_float_cuda_Add_2224<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2222_0, Multiply_2219_0, Add_2224_0);
// Tanh_float_float_cuda_Tanh_2226<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2224_0, Tanh_2226_0);
// Add_float_float_float_cuda_Add_2188<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2180_0, Dot_2176_0, Add_2188_0);
// Add_float_float_float_cuda_Add_2204<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2188_0, Reshape_983_0, Add_2204_0);
// Sigmoid_float_float_cuda_Sigmoid_2216<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2204_0, Sigmoid_2216_0);
// Multiply_float_float_float_cuda_Multiply_2228<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2226_0, Sigmoid_2216_0, Multiply_2228_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_62_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_2171_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2167_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2207_0	type: float	shape: Shape{1}
//	- name: Add_2156_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2169_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2165_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2170_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2166_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2172_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2168_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2227_0	type: float	shape: Shape{1, 256}
//	- name: Add_2223_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_2183<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2171_0, Dot_2167_0, Add_2183_0);
// Add_float_float_float_cuda_Add_2194<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2183_0, Reshape_1209_0, Add_2194_0);
// Broadcast_float_float_cuda_Broadcast_2208<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2207_0, Broadcast_2208_0);
// Add_float_float_float_cuda_Add_2209<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2194_0, Broadcast_2208_0, Add_2209_0);
// Sigmoid_float_float_cuda_Sigmoid_2218<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2209_0, Sigmoid_2218_0);
// Multiply_float_float_float_cuda_Multiply_2221<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2156_0, Sigmoid_2218_0, Multiply_2221_0);
// Add_float_float_float_cuda_Add_2181<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2169_0, Dot_2165_0, Add_2181_0);
// Add_float_float_float_cuda_Add_2190<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2181_0, Reshape_1205_0, Add_2190_0);
// Sigmoid_float_float_cuda_Sigmoid_2205<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2190_0, Sigmoid_2205_0);
// Add_float_float_float_cuda_Add_2182<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2170_0, Dot_2166_0, Add_2182_0);
// Add_float_float_float_cuda_Add_2192<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2182_0, Reshape_1207_0, Add_2192_0);
// Tanh_float_float_cuda_Tanh_2206<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2192_0, Tanh_2206_0);
// Multiply_float_float_float_cuda_Multiply_2217<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2205_0, Tanh_2206_0, Multiply_2217_0);
// Add_float_float_float_cuda_Add_2223<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2221_0, Multiply_2217_0, Add_2223_0);
// Tanh_float_float_cuda_Tanh_2225<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2223_0, Tanh_2225_0);
// Add_float_float_float_cuda_Add_2184<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2172_0, Dot_2168_0, Add_2184_0);
// Add_float_float_float_cuda_Add_2196<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2184_0, Reshape_1211_0, Add_2196_0);
// Sigmoid_float_float_cuda_Sigmoid_2210<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2196_0, Sigmoid_2210_0);
// Multiply_float_float_float_cuda_Multiply_2227<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2225_0, Sigmoid_2210_0, Multiply_2227_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_61_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_28(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* output0, float* output1, float* output2)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_62_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_61_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output1, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_28_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* output0, float* output1, float* output2) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_28<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output0, output1, output2);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_2091_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2087_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2143_0	type: float	shape: Shape{1}
//	- name: Add_2059_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2089_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2085_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2090_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2086_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2092_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2088_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2075_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2071_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2131_0	type: float	shape: Shape{1}
//	- name: Add_2057_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2073_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2069_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2074_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2070_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2076_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2072_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2083_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2079_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2137_0	type: float	shape: Shape{1}
//	- name: Add_2058_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2081_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2077_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2082_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2078_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2084_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2080_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2164_0	type: float	shape: Shape{1, 256}
//	- name: Add_2156_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2162_0	type: float	shape: Shape{1, 256}
//	- name: Add_2157_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2163_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_58<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2091_0, Dot_2087_0, Reshape_785_0, Reshape_2143_0, Add_2059_0, Dot_2089_0, Dot_2085_0, Reshape_781_0, Dot_2090_0, Dot_2086_0, Reshape_783_0, Dot_2092_0, Dot_2088_0, Reshape_787_0, Multiply_2164_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_60<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2075_0, Dot_2071_0, Reshape_1209_0, Reshape_2131_0, Add_2057_0, Dot_2073_0, Dot_2069_0, Reshape_1205_0, Dot_2074_0, Dot_2070_0, Reshape_1207_0, Dot_2076_0, Dot_2072_0, Reshape_1211_0, Multiply_2162_0, Add_2156_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_59<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2083_0, Dot_2079_0, Reshape_981_0, Reshape_2137_0, Add_2058_0, Dot_2081_0, Dot_2077_0, Reshape_977_0, Dot_2082_0, Dot_2078_0, Reshape_979_0, Dot_2084_0, Dot_2080_0, Reshape_983_0, Add_2157_0, Multiply_2163_0);
// Deduped function map: <src_function_name : deduped_function_name>

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_2091_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2087_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2143_0	type: float	shape: Shape{1}
//	- name: Add_2059_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2089_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2085_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2090_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2086_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2092_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2088_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2164_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_2103<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2091_0, Dot_2087_0, Add_2103_0);
// Add_float_float_float_cuda_Add_2126<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2103_0, Reshape_785_0, Add_2126_0);
// Broadcast_float_float_cuda_Broadcast_2144<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2143_0, Broadcast_2144_0);
// Add_float_float_float_cuda_Add_2145<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2126_0, Broadcast_2144_0, Add_2145_0);
// Sigmoid_float_float_cuda_Sigmoid_2152<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2145_0, Sigmoid_2152_0);
// Multiply_float_float_float_cuda_Multiply_2155<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2059_0, Sigmoid_2152_0, Multiply_2155_0);
// Add_float_float_float_cuda_Add_2101<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2089_0, Dot_2085_0, Add_2101_0);
// Add_float_float_float_cuda_Add_2122<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2101_0, Reshape_781_0, Add_2122_0);
// Sigmoid_float_float_cuda_Sigmoid_2141<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2122_0, Sigmoid_2141_0);
// Add_float_float_float_cuda_Add_2102<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2090_0, Dot_2086_0, Add_2102_0);
// Add_float_float_float_cuda_Add_2124<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2102_0, Reshape_783_0, Add_2124_0);
// Tanh_float_float_cuda_Tanh_2142<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2124_0, Tanh_2142_0);
// Multiply_float_float_float_cuda_Multiply_2151<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2141_0, Tanh_2142_0, Multiply_2151_0);
// Add_float_float_float_cuda_Add_2158<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2155_0, Multiply_2151_0, Add_2158_0);
// Tanh_float_float_cuda_Tanh_2161<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2158_0, Tanh_2161_0);
// Add_float_float_float_cuda_Add_2104<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2092_0, Dot_2088_0, Add_2104_0);
// Add_float_float_float_cuda_Add_2128<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2104_0, Reshape_787_0, Add_2128_0);
// Sigmoid_float_float_cuda_Sigmoid_2146<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2128_0, Sigmoid_2146_0);
// Multiply_float_float_float_cuda_Multiply_2164<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2161_0, Sigmoid_2146_0, Multiply_2164_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_58_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_2075_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2071_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2131_0	type: float	shape: Shape{1}
//	- name: Add_2057_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2073_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2069_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2074_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2070_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2076_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2072_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2162_0	type: float	shape: Shape{1, 256}
//	- name: Add_2156_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_2095<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2075_0, Dot_2071_0, Add_2095_0);
// Add_float_float_float_cuda_Add_2110<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2095_0, Reshape_1209_0, Add_2110_0);
// Broadcast_float_float_cuda_Broadcast_2132<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2131_0, Broadcast_2132_0);
// Add_float_float_float_cuda_Add_2133<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2110_0, Broadcast_2132_0, Add_2133_0);
// Sigmoid_float_float_cuda_Sigmoid_2148<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2133_0, Sigmoid_2148_0);
// Multiply_float_float_float_cuda_Multiply_2153<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2057_0, Sigmoid_2148_0, Multiply_2153_0);
// Add_float_float_float_cuda_Add_2093<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2073_0, Dot_2069_0, Add_2093_0);
// Add_float_float_float_cuda_Add_2106<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2093_0, Reshape_1205_0, Add_2106_0);
// Sigmoid_float_float_cuda_Sigmoid_2129<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2106_0, Sigmoid_2129_0);
// Add_float_float_float_cuda_Add_2094<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2074_0, Dot_2070_0, Add_2094_0);
// Add_float_float_float_cuda_Add_2108<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2094_0, Reshape_1207_0, Add_2108_0);
// Tanh_float_float_cuda_Tanh_2130<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2108_0, Tanh_2130_0);
// Multiply_float_float_float_cuda_Multiply_2147<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2129_0, Tanh_2130_0, Multiply_2147_0);
// Add_float_float_float_cuda_Add_2156<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2153_0, Multiply_2147_0, Add_2156_0);
// Tanh_float_float_cuda_Tanh_2159<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2156_0, Tanh_2159_0);
// Add_float_float_float_cuda_Add_2096<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2076_0, Dot_2072_0, Add_2096_0);
// Add_float_float_float_cuda_Add_2112<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2096_0, Reshape_1211_0, Add_2112_0);
// Sigmoid_float_float_cuda_Sigmoid_2134<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2112_0, Sigmoid_2134_0);
// Multiply_float_float_float_cuda_Multiply_2162<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2159_0, Sigmoid_2134_0, Multiply_2162_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_60_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_2083_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2079_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2137_0	type: float	shape: Shape{1}
//	- name: Add_2058_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2081_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2077_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2082_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2078_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2084_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2080_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_2157_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2163_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_2099<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2083_0, Dot_2079_0, Add_2099_0);
// Add_float_float_float_cuda_Add_2118<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2099_0, Reshape_981_0, Add_2118_0);
// Broadcast_float_float_cuda_Broadcast_2138<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2137_0, Broadcast_2138_0);
// Add_float_float_float_cuda_Add_2139<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2118_0, Broadcast_2138_0, Add_2139_0);
// Sigmoid_float_float_cuda_Sigmoid_2150<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2139_0, Sigmoid_2150_0);
// Multiply_float_float_float_cuda_Multiply_2154<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2058_0, Sigmoid_2150_0, Multiply_2154_0);
// Add_float_float_float_cuda_Add_2097<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2081_0, Dot_2077_0, Add_2097_0);
// Add_float_float_float_cuda_Add_2114<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2097_0, Reshape_977_0, Add_2114_0);
// Sigmoid_float_float_cuda_Sigmoid_2135<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2114_0, Sigmoid_2135_0);
// Add_float_float_float_cuda_Add_2098<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2082_0, Dot_2078_0, Add_2098_0);
// Add_float_float_float_cuda_Add_2116<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2098_0, Reshape_979_0, Add_2116_0);
// Tanh_float_float_cuda_Tanh_2136<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2116_0, Tanh_2136_0);
// Multiply_float_float_float_cuda_Multiply_2149<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2135_0, Tanh_2136_0, Multiply_2149_0);
// Add_float_float_float_cuda_Add_2157<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2154_0, Multiply_2149_0, Add_2157_0);
// Tanh_float_float_cuda_Tanh_2160<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2157_0, Tanh_2160_0);
// Add_float_float_float_cuda_Add_2100<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2084_0, Dot_2080_0, Add_2100_0);
// Add_float_float_float_cuda_Add_2120<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2100_0, Reshape_983_0, Add_2120_0);
// Sigmoid_float_float_cuda_Sigmoid_2140<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2120_0, Sigmoid_2140_0);
// Multiply_float_float_float_cuda_Multiply_2163<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2160_0, Sigmoid_2140_0, Multiply_2163_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_59_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_26(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* output0, float* output1, float* output2, float* output3, float* output4)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_58_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_60_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_59_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output3, output4, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_26_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* output0, float* output1, float* output2, float* output3, float* output4) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_26<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output0, output1, output2, output3, output4);
}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_2235_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2231_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2251_0	type: float	shape: Shape{1}
//	- name: Add_2223_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2233_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2229_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2234_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2230_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2236_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2232_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2260_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_2239<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2235_0, Dot_2231_0, Add_2239_0);
// Add_float_float_float_cuda_Add_2246<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2239_0, Reshape_1209_0, Add_2246_0);
// Broadcast_float_float_cuda_Broadcast_2252<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2251_0, Broadcast_2252_0);
// Add_float_float_float_cuda_Add_2253<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2246_0, Broadcast_2252_0, Add_2253_0);
// Sigmoid_float_float_cuda_Sigmoid_2256<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2253_0, Sigmoid_2256_0);
// Multiply_float_float_float_cuda_Multiply_2257<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2223_0, Sigmoid_2256_0, Multiply_2257_0);
// Add_float_float_float_cuda_Add_2237<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2233_0, Dot_2229_0, Add_2237_0);
// Add_float_float_float_cuda_Add_2242<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2237_0, Reshape_1205_0, Add_2242_0);
// Sigmoid_float_float_cuda_Sigmoid_2249<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2242_0, Sigmoid_2249_0);
// Add_float_float_float_cuda_Add_2238<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2234_0, Dot_2230_0, Add_2238_0);
// Add_float_float_float_cuda_Add_2244<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2238_0, Reshape_1207_0, Add_2244_0);
// Tanh_float_float_cuda_Tanh_2250<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2244_0, Tanh_2250_0);
// Multiply_float_float_float_cuda_Multiply_2255<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2249_0, Tanh_2250_0, Multiply_2255_0);
// Add_float_float_float_cuda_Add_2258<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2257_0, Multiply_2255_0, Add_2258_0);
// Tanh_float_float_cuda_Tanh_2259<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2258_0, Tanh_2259_0);
// Add_float_float_float_cuda_Add_2240<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_2236_0, Dot_2232_0, Add_2240_0);
// Add_float_float_float_cuda_Add_2248<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2240_0, Reshape_1211_0, Add_2248_0);
// Sigmoid_float_float_cuda_Sigmoid_2254<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2248_0, Sigmoid_2254_0);
// Multiply_float_float_float_cuda_Multiply_2260<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2259_0, Sigmoid_2254_0, Multiply_2260_0);
extern "C" __launch_bounds__(256) __global__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_63(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0)
{
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
extern void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_63_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0) {
    FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_63<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_235_0	type: float	shape: Shape{1, 256}
//	- name: Dot_755_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_861_0	type: float	shape: Shape{1}
//	- name: Add_706_0	type: float	shape: Shape{1, 256}
//	- name: Dot_233_0	type: float	shape: Shape{1, 256}
//	- name: Dot_753_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_234_0	type: float	shape: Shape{1, 256}
//	- name: Dot_754_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_236_0	type: float	shape: Shape{1, 256}
//	- name: Dot_756_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_751_0	type: float	shape: Shape{1, 256}
//	- name: Dot_747_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_855_0	type: float	shape: Shape{1}
//	- name: Add_705_0	type: float	shape: Shape{1, 256}
//	- name: Dot_749_0	type: float	shape: Shape{1, 256}
//	- name: Dot_745_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_750_0	type: float	shape: Shape{1, 256}
//	- name: Dot_746_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_752_0	type: float	shape: Shape{1, 256}
//	- name: Dot_748_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_743_0	type: float	shape: Shape{1, 256}
//	- name: Dot_739_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_849_0	type: float	shape: Shape{1}
//	- name: Add_704_0	type: float	shape: Shape{1, 256}
//	- name: Dot_741_0	type: float	shape: Shape{1, 256}
//	- name: Dot_737_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_742_0	type: float	shape: Shape{1, 256}
//	- name: Dot_738_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_744_0	type: float	shape: Shape{1, 256}
//	- name: Dot_740_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_735_0	type: float	shape: Shape{1, 256}
//	- name: Dot_731_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_843_0	type: float	shape: Shape{1}
//	- name: Add_703_0	type: float	shape: Shape{1, 256}
//	- name: Dot_733_0	type: float	shape: Shape{1, 256}
//	- name: Dot_729_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_734_0	type: float	shape: Shape{1, 256}
//	- name: Dot_730_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_736_0	type: float	shape: Shape{1, 256}
//	- name: Dot_732_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_727_0	type: float	shape: Shape{1, 256}
//	- name: Dot_723_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_837_0	type: float	shape: Shape{1}
//	- name: Add_702_0	type: float	shape: Shape{1, 256}
//	- name: Dot_725_0	type: float	shape: Shape{1, 256}
//	- name: Dot_721_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_726_0	type: float	shape: Shape{1, 256}
//	- name: Dot_722_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_728_0	type: float	shape: Shape{1, 256}
//	- name: Dot_724_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_719_0	type: float	shape: Shape{1, 256}
//	- name: Dot_267_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_831_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_717_0	type: float	shape: Shape{1, 256}
//	- name: Dot_265_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_718_0	type: float	shape: Shape{1, 256}
//	- name: Dot_266_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_720_0	type: float	shape: Shape{1, 256}
//	- name: Dot_268_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_888_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_900_0	type: float	shape: Shape{1, 256}
//	- name: Add_887_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_899_0	type: float	shape: Shape{1, 256}
//	- name: Add_886_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_898_0	type: float	shape: Shape{1, 256}
//	- name: Add_885_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_897_0	type: float	shape: Shape{1, 256}
//	- name: Add_884_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_896_0	type: float	shape: Shape{1, 256}
//	- name: Add_883_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_895_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_235_0, Dot_755_0, Reshape_285_0, Reshape_861_0, Add_706_0, Dot_233_0, Dot_753_0, Reshape_281_0, Dot_234_0, Dot_754_0, Reshape_283_0, Dot_236_0, Dot_756_0, Reshape_287_0, Multiply_900_0, Add_888_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_19<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_751_0, Dot_747_0, Reshape_321_0, Reshape_855_0, Add_705_0, Dot_749_0, Dot_745_0, Reshape_317_0, Dot_750_0, Dot_746_0, Reshape_319_0, Dot_752_0, Dot_748_0, Reshape_323_0, Multiply_899_0, Add_887_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_18<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_743_0, Dot_739_0, Reshape_389_0, Reshape_849_0, Add_704_0, Dot_741_0, Dot_737_0, Reshape_385_0, Dot_742_0, Dot_738_0, Reshape_387_0, Dot_744_0, Dot_740_0, Reshape_391_0, Multiply_898_0, Add_886_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_17<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_735_0, Dot_731_0, Reshape_489_0, Reshape_843_0, Add_703_0, Dot_733_0, Dot_729_0, Reshape_485_0, Dot_734_0, Dot_730_0, Reshape_487_0, Dot_736_0, Dot_732_0, Reshape_491_0, Add_885_0, Multiply_897_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_16<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_727_0, Dot_723_0, Reshape_621_0, Reshape_837_0, Add_702_0, Dot_725_0, Dot_721_0, Reshape_617_0, Dot_726_0, Dot_722_0, Reshape_619_0, Dot_728_0, Dot_724_0, Reshape_623_0, Multiply_896_0, Add_884_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_15<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_719_0, Dot_267_0, Reshape_785_0, Reshape_831_0, Constant_100_0, Dot_717_0, Dot_265_0, Reshape_781_0, Dot_718_0, Dot_266_0, Reshape_783_0, Dot_720_0, Dot_268_0, Reshape_787_0, Multiply_895_0, Add_883_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_19 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_18 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_16 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_235_0	type: float	shape: Shape{1, 256}
//	- name: Dot_755_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_861_0	type: float	shape: Shape{1}
//	- name: Add_706_0	type: float	shape: Shape{1, 256}
//	- name: Dot_233_0	type: float	shape: Shape{1, 256}
//	- name: Dot_753_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_234_0	type: float	shape: Shape{1, 256}
//	- name: Dot_754_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_236_0	type: float	shape: Shape{1, 256}
//	- name: Dot_756_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_900_0	type: float	shape: Shape{1, 256}
//	- name: Add_888_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_779<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_235_0, Dot_755_0, Add_779_0);
// Add_float_float_float_cuda_Add_826<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_779_0, Reshape_285_0, Add_826_0);
// Broadcast_float_float_cuda_Broadcast_862<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_861_0, Broadcast_862_0);
// Add_float_float_float_cuda_Add_863<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_826_0, Broadcast_862_0, Add_863_0);
// Sigmoid_float_float_cuda_Sigmoid_876<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_863_0, Sigmoid_876_0);
// Multiply_float_float_float_cuda_Multiply_882<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_706_0, Sigmoid_876_0, Multiply_882_0);
// Add_float_float_float_cuda_Add_777<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_233_0, Dot_753_0, Add_777_0);
// Add_float_float_float_cuda_Add_822<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_777_0, Reshape_281_0, Add_822_0);
// Sigmoid_float_float_cuda_Sigmoid_859<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_822_0, Sigmoid_859_0);
// Add_float_float_float_cuda_Add_778<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_234_0, Dot_754_0, Add_778_0);
// Add_float_float_float_cuda_Add_824<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_778_0, Reshape_283_0, Add_824_0);
// Tanh_float_float_cuda_Tanh_860<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_824_0, Tanh_860_0);
// Multiply_float_float_float_cuda_Multiply_875<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_859_0, Tanh_860_0, Multiply_875_0);
// Add_float_float_float_cuda_Add_888<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_882_0, Multiply_875_0, Add_888_0);
// Tanh_float_float_cuda_Tanh_894<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_888_0, Tanh_894_0);
// Add_float_float_float_cuda_Add_780<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_236_0, Dot_756_0, Add_780_0);
// Add_float_float_float_cuda_Add_828<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_780_0, Reshape_287_0, Add_828_0);
// Sigmoid_float_float_cuda_Sigmoid_864<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_828_0, Sigmoid_864_0);
// Multiply_float_float_float_cuda_Multiply_900<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_894_0, Sigmoid_864_0, Multiply_900_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_735_0	type: float	shape: Shape{1, 256}
//	- name: Dot_731_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_843_0	type: float	shape: Shape{1}
//	- name: Add_703_0	type: float	shape: Shape{1, 256}
//	- name: Dot_733_0	type: float	shape: Shape{1, 256}
//	- name: Dot_729_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_734_0	type: float	shape: Shape{1, 256}
//	- name: Dot_730_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_736_0	type: float	shape: Shape{1, 256}
//	- name: Dot_732_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_885_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_897_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_767<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_735_0, Dot_731_0, Add_767_0);
// Add_float_float_float_cuda_Add_802<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_767_0, Reshape_489_0, Add_802_0);
// Broadcast_float_float_cuda_Broadcast_844<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_843_0, Broadcast_844_0);
// Add_float_float_float_cuda_Add_845<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_802_0, Broadcast_844_0, Add_845_0);
// Sigmoid_float_float_cuda_Sigmoid_870<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_845_0, Sigmoid_870_0);
// Multiply_float_float_float_cuda_Multiply_879<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_703_0, Sigmoid_870_0, Multiply_879_0);
// Add_float_float_float_cuda_Add_765<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_733_0, Dot_729_0, Add_765_0);
// Add_float_float_float_cuda_Add_798<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_765_0, Reshape_485_0, Add_798_0);
// Sigmoid_float_float_cuda_Sigmoid_841<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_798_0, Sigmoid_841_0);
// Add_float_float_float_cuda_Add_766<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_734_0, Dot_730_0, Add_766_0);
// Add_float_float_float_cuda_Add_800<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_766_0, Reshape_487_0, Add_800_0);
// Tanh_float_float_cuda_Tanh_842<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_800_0, Tanh_842_0);
// Multiply_float_float_float_cuda_Multiply_869<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_841_0, Tanh_842_0, Multiply_869_0);
// Add_float_float_float_cuda_Add_885<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_879_0, Multiply_869_0, Add_885_0);
// Tanh_float_float_cuda_Tanh_891<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_885_0, Tanh_891_0);
// Add_float_float_float_cuda_Add_768<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_736_0, Dot_732_0, Add_768_0);
// Add_float_float_float_cuda_Add_804<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_768_0, Reshape_491_0, Add_804_0);
// Sigmoid_float_float_cuda_Sigmoid_846<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_804_0, Sigmoid_846_0);
// Multiply_float_float_float_cuda_Multiply_897<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_891_0, Sigmoid_846_0, Multiply_897_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_17_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_719_0	type: float	shape: Shape{1, 256}
//	- name: Dot_267_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_831_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_717_0	type: float	shape: Shape{1, 256}
//	- name: Dot_265_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_718_0	type: float	shape: Shape{1, 256}
//	- name: Dot_266_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_720_0	type: float	shape: Shape{1, 256}
//	- name: Dot_268_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_895_0	type: float	shape: Shape{1, 256}
//	- name: Add_883_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_759<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_719_0, Dot_267_0, Add_759_0);
// Add_float_float_float_cuda_Add_786<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_759_0, Reshape_785_0, Add_786_0);
// Broadcast_float_float_cuda_Broadcast_832<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_831_0, Broadcast_832_0);
// Add_float_float_float_cuda_Add_833<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_786_0, Broadcast_832_0, Add_833_0);
// Sigmoid_float_float_cuda_Sigmoid_866<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_833_0, Sigmoid_866_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_877<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_866_0, Multiply_877_0);
// Add_float_float_float_cuda_Add_757<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_717_0, Dot_265_0, Add_757_0);
// Add_float_float_float_cuda_Add_782<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_757_0, Reshape_781_0, Add_782_0);
// Sigmoid_float_float_cuda_Sigmoid_829<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_782_0, Sigmoid_829_0);
// Add_float_float_float_cuda_Add_758<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_718_0, Dot_266_0, Add_758_0);
// Add_float_float_float_cuda_Add_784<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_758_0, Reshape_783_0, Add_784_0);
// Tanh_float_float_cuda_Tanh_830<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_784_0, Tanh_830_0);
// Multiply_float_float_float_cuda_Multiply_865<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_829_0, Tanh_830_0, Multiply_865_0);
// Add_float_float_float_cuda_Add_883<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_877_0, Multiply_865_0, Add_883_0);
// Tanh_float_float_cuda_Tanh_889<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_883_0, Tanh_889_0);
// Add_float_float_float_cuda_Add_760<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_720_0, Dot_268_0, Add_760_0);
// Add_float_float_float_cuda_Add_788<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_760_0, Reshape_787_0, Add_788_0);
// Sigmoid_float_float_cuda_Sigmoid_834<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_788_0, Sigmoid_834_0);
// Multiply_float_float_float_cuda_Multiply_895<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_889_0, Sigmoid_834_0, Multiply_895_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_15_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_12(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output1, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output3, output2, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output5, output4, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_17_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output6, output7, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_20_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output9, output8, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 5)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_15_block_kernel(input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output11, output10, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_12_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_12<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_900_0	type: float	shape: Shape{1, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_899_0	type: float	shape: Shape{1, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_898_0	type: float	shape: Shape{1, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_897_0	type: float	shape: Shape{1, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_896_0	type: float	shape: Shape{1, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_895_0	type: float	shape: Shape{1, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_948_0	type: float	shape: Shape{1, 256}
//	- name: Dot_941_0	type: float	shape: Shape{1, 256}
//	- name: Dot_947_0	type: float	shape: Shape{1, 256}
//	- name: Dot_946_0	type: float	shape: Shape{1, 256}
//	- name: Dot_944_0	type: float	shape: Shape{1, 256}
//	- name: Dot_943_0	type: float	shape: Shape{1, 256}
//	- name: Dot_945_0	type: float	shape: Shape{1, 256}
//	- name: Dot_942_0	type: float	shape: Shape{1, 256}
//	- name: Dot_938_0	type: float	shape: Shape{1, 256}
//	- name: Dot_940_0	type: float	shape: Shape{1, 256}
//	- name: Dot_937_0	type: float	shape: Shape{1, 256}
//	- name: Dot_935_0	type: float	shape: Shape{1, 256}
//	- name: Dot_934_0	type: float	shape: Shape{1, 256}
//	- name: Dot_939_0	type: float	shape: Shape{1, 256}
//	- name: Dot_936_0	type: float	shape: Shape{1, 256}
//	- name: Dot_933_0	type: float	shape: Shape{1, 256}
//	- name: Dot_932_0	type: float	shape: Shape{1, 256}
//	- name: Dot_931_0	type: float	shape: Shape{1, 256}
//	- name: Dot_930_0	type: float	shape: Shape{1, 256}
//	- name: Dot_929_0	type: float	shape: Shape{1, 256}
//	- name: Dot_928_0	type: float	shape: Shape{1, 256}
//	- name: Dot_927_0	type: float	shape: Shape{1, 256}
//	- name: Dot_926_0	type: float	shape: Shape{1, 256}
//	- name: Dot_925_0	type: float	shape: Shape{1, 256}
//	- name: Dot_917_0	type: float	shape: Shape{1, 256}
//	- name: Dot_923_0	type: float	shape: Shape{1, 256}
//	- name: Dot_922_0	type: float	shape: Shape{1, 256}
//	- name: Dot_918_0	type: float	shape: Shape{1, 256}
//	- name: Dot_921_0	type: float	shape: Shape{1, 256}
//	- name: Dot_920_0	type: float	shape: Shape{1, 256}
//	- name: Dot_919_0	type: float	shape: Shape{1, 256}
//	- name: Dot_924_0	type: float	shape: Shape{1, 256}
//	- name: Dot_916_0	type: float	shape: Shape{1, 256}
//	- name: Dot_915_0	type: float	shape: Shape{1, 256}
//	- name: Dot_914_0	type: float	shape: Shape{1, 256}
//	- name: Dot_913_0	type: float	shape: Shape{1, 256}
//	- name: Dot_912_0	type: float	shape: Shape{1, 256}
//	- name: Dot_911_0	type: float	shape: Shape{1, 256}
//	- name: Dot_910_0	type: float	shape: Shape{1, 256}
//	- name: Dot_909_0	type: float	shape: Shape{1, 256}
//	- name: Dot_907_0	type: float	shape: Shape{1, 256}
//	- name: Dot_904_0	type: float	shape: Shape{1, 256}
//	- name: Dot_908_0	type: float	shape: Shape{1, 256}
//	- name: Dot_902_0	type: float	shape: Shape{1, 256}
//	- name: Dot_903_0	type: float	shape: Shape{1, 256}
//	- name: Dot_901_0	type: float	shape: Shape{1, 256}
//	- name: Dot_906_0	type: float	shape: Shape{1, 256}
//	- name: Dot_905_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_948<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_10_0, Dot_948_0);
// Dot_float_float_float_cuda_Dot_941<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_12_0, Dot_941_0);
// Dot_float_float_float_cuda_Dot_947<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_7_0, Dot_947_0);
// Dot_float_float_float_cuda_Dot_946<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_4_0, Dot_946_0);
// Dot_float_float_float_cuda_Dot_944<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_21_0, Dot_944_0);
// Dot_float_float_float_cuda_Dot_943<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_18_0, Dot_943_0);
// Dot_float_float_float_cuda_Dot_945<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_1_0, Dot_945_0);
// Dot_float_float_float_cuda_Dot_942<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_900_0, Constant_15_0, Dot_942_0);
// Dot_float_float_float_cuda_Dot_938<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_16_0, Dot_938_0);
// Dot_float_float_float_cuda_Dot_940<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_22_0, Dot_940_0);
// Dot_float_float_float_cuda_Dot_937<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_13_0, Dot_937_0);
// Dot_float_float_float_cuda_Dot_935<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_30_0, Dot_935_0);
// Dot_float_float_float_cuda_Dot_934<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_27_0, Dot_934_0);
// Dot_float_float_float_cuda_Dot_939<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_19_0, Dot_939_0);
// Dot_float_float_float_cuda_Dot_936<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_33_0, Dot_936_0);
// Dot_float_float_float_cuda_Dot_933<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_899_0, Constant_24_0, Dot_933_0);
// Dot_float_float_float_cuda_Dot_932<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_34_0, Dot_932_0);
// Dot_float_float_float_cuda_Dot_931<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_31_0, Dot_931_0);
// Dot_float_float_float_cuda_Dot_930<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_28_0, Dot_930_0);
// Dot_float_float_float_cuda_Dot_929<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_25_0, Dot_929_0);
// Dot_float_float_float_cuda_Dot_928<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_45_0, Dot_928_0);
// Dot_float_float_float_cuda_Dot_927<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_42_0, Dot_927_0);
// Dot_float_float_float_cuda_Dot_926<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_39_0, Dot_926_0);
// Dot_float_float_float_cuda_Dot_925<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_898_0, Constant_36_0, Dot_925_0);
// Dot_float_float_float_cuda_Dot_917<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_48_0, Dot_917_0);
// Dot_float_float_float_cuda_Dot_923<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_43_0, Dot_923_0);
// Dot_float_float_float_cuda_Dot_922<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_40_0, Dot_922_0);
// Dot_float_float_float_cuda_Dot_918<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_51_0, Dot_918_0);
// Dot_float_float_float_cuda_Dot_921<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_37_0, Dot_921_0);
// Dot_float_float_float_cuda_Dot_920<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_57_0, Dot_920_0);
// Dot_float_float_float_cuda_Dot_919<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_54_0, Dot_919_0);
// Dot_float_float_float_cuda_Dot_924<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_897_0, Constant_46_0, Dot_924_0);
// Dot_float_float_float_cuda_Dot_916<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_58_0, Dot_916_0);
// Dot_float_float_float_cuda_Dot_915<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_55_0, Dot_915_0);
// Dot_float_float_float_cuda_Dot_914<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_52_0, Dot_914_0);
// Dot_float_float_float_cuda_Dot_913<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_49_0, Dot_913_0);
// Dot_float_float_float_cuda_Dot_912<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_69_0, Dot_912_0);
// Dot_float_float_float_cuda_Dot_911<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_66_0, Dot_911_0);
// Dot_float_float_float_cuda_Dot_910<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_63_0, Dot_910_0);
// Dot_float_float_float_cuda_Dot_909<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_896_0, Constant_60_0, Dot_909_0);
// Dot_float_float_float_cuda_Dot_907<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_67_0, Dot_907_0);
// Dot_float_float_float_cuda_Dot_904<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_81_0, Dot_904_0);
// Dot_float_float_float_cuda_Dot_908<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_70_0, Dot_908_0);
// Dot_float_float_float_cuda_Dot_902<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_75_0, Dot_902_0);
// Dot_float_float_float_cuda_Dot_903<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_78_0, Dot_903_0);
// Dot_float_float_float_cuda_Dot_901<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_72_0, Dot_901_0);
// Dot_float_float_float_cuda_Dot_906<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_64_0, Dot_906_0);
// Dot_float_float_float_cuda_Dot_905<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_895_0, Constant_61_0, Dot_905_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_941 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_947 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_946 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_944 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_943 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_945 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_942 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_938 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_940 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_937 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_935 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_934 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_939 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_936 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_933 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_932 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_931 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_930 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_929 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_928 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_927 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_926 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_925 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_917 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_923 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_922 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_918 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_921 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_920 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_919 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_924 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_916 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_915 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_914 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_913 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_912 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_911 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_910 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_909 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_907 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_904 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_908 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_902 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_903 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_901 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_906 : Dot_float_float_float_cuda_Dot_948
// Dot_float_float_float_cuda_Dot_905 : Dot_float_float_float_cuda_Dot_948

// Node name:	Dot_948
// Description:	Dot
// Input:
//	- name: Multiply_900_0	type: float	shape: Shape{1, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_948_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_948_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_13(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input14, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input15, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input16, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input9, input17, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input23, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input24, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input25, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input18, input26, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input28, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input29, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input30, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input31, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input32, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input33, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input34, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input27, input35, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 256 && (int)blockIdx.x <= 263)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input37, output32, threadIdx.x, blockIdx.x - 256 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 264 && (int)blockIdx.x <= 271)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input38, output33, threadIdx.x, blockIdx.x - 264 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 272 && (int)blockIdx.x <= 279)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input39, output34, threadIdx.x, blockIdx.x - 272 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 280 && (int)blockIdx.x <= 287)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input40, output35, threadIdx.x, blockIdx.x - 280 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 288 && (int)blockIdx.x <= 295)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input41, output36, threadIdx.x, blockIdx.x - 288 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 296 && (int)blockIdx.x <= 303)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input42, output37, threadIdx.x, blockIdx.x - 296 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 304 && (int)blockIdx.x <= 311)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input43, output38, threadIdx.x, blockIdx.x - 304 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 312 && (int)blockIdx.x <= 319)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input36, input44, output39, threadIdx.x, blockIdx.x - 312 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 320 && (int)blockIdx.x <= 327)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input46, output40, threadIdx.x, blockIdx.x - 320 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 328 && (int)blockIdx.x <= 335)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input47, output41, threadIdx.x, blockIdx.x - 328 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 336 && (int)blockIdx.x <= 343)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input48, output42, threadIdx.x, blockIdx.x - 336 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 344 && (int)blockIdx.x <= 351)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input49, output43, threadIdx.x, blockIdx.x - 344 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 352 && (int)blockIdx.x <= 359)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input50, output44, threadIdx.x, blockIdx.x - 352 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 360 && (int)blockIdx.x <= 367)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input51, output45, threadIdx.x, blockIdx.x - 360 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 368 && (int)blockIdx.x <= 375)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input52, output46, threadIdx.x, blockIdx.x - 368 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 376 && (int)blockIdx.x <= 383)
    {
        Dot_float_float_float_cuda_Dot_948_block_kernel(input45, input53, output47, threadIdx.x, blockIdx.x - 376 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_13_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_13<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31, output32, output33, output34, output35, output36, output37, output38, output39, output40, output41, output42, output43, output44, output45, output46, output47);
}
// Node name:	 BlockFusion
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
//	- name: Constant_97_0	type: int32_t	shape: Shape{1}
//	- name: Constant_98_0	type: int32_t	shape: Shape{1}
//	- name: Constant_101_0	type: int32_t	shape: Shape{1}
//	- name: Constant_102_0	type: int32_t	shape: Shape{1}
//	- name: Constant_104_0	type: float	shape: Shape{}
// Output:
//	- name: Slice_195_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_197_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_199_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_201_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_203_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_205_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_207_0	type: float	shape: Shape{1, 1, 256}
//	- name: Slice_209_0	type: float	shape: Shape{1, 1, 256}
//	- name: Concat_193_0	type: int32_t	shape: Shape{2}
//	- name: Concat_194_0	type: int32_t	shape: Shape{2}
//	- name: Broadcast_212_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Slice_float_float_cuda_Slice_195<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_195_0);
// Slice_float_float_cuda_Slice_197<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_197_0);
// Slice_float_float_cuda_Slice_199<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_199_0);
// Slice_float_float_cuda_Slice_201<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_201_0);
// Slice_float_float_cuda_Slice_203<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_203_0);
// Slice_float_float_cuda_Slice_205<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_205_0);
// Slice_float_float_cuda_Slice_207<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_207_0);
// Slice_float_float_cuda_Slice_209<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Parameter_96_0, Slice_209_0);
// Concat_int32_t_int32_t_int32_t_cuda_Concat_193<<<dim3(1, 1, 1), dim3(512, 1, 1), 0, 0>>>(Constant_97_0, Constant_98_0, Concat_193_0);
// Concat_int32_t_int32_t_int32_t_cuda_Concat_194<<<dim3(1, 1, 1), dim3(512, 1, 1), 0, 0>>>(Constant_101_0, Constant_102_0, Concat_194_0);
// Broadcast_float_float_cuda_Broadcast_212<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_104_0, Broadcast_212_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Concat_int32_t_int32_t_int32_t_cuda_Concat_194 : Concat_int32_t_int32_t_int32_t_cuda_Concat_193

// Node name:	Slice_195
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_195_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_195_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {0, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_197
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_197_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_197_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {1, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_199
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_199_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_199_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {2, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_201
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_201_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_201_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {3, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_203
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_203_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_203_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {4, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_205
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_205_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_205_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {5, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_207
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_207_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_207_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {6, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Slice_209
// Description:	Slice
// Input:
//	- name: Parameter_96_0	type: float	shape: Shape{8, 1, 256}
// Output:
//	- name: Slice_209_0	type: float	shape: Shape{1, 1, 256}
__device__ __noinline__ void Slice_float_float_cuda_Slice_209_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if (tid < 256)
    {
        uint32_t input_strides[] = {256, 256, 1};
        uint32_t output_strides[] = {256, 256, 1};
        uint32_t lower_bounds[] = {7, 0, 0};
        uint32_t slice_strides[] = {1, 1, 1};
        uint32_t input_idx = 0;
        uint32_t output_idx = tid;
        input_idx += (((output_idx / output_strides[0]) * slice_strides[0]) + lower_bounds[0]) * input_strides[0];
        output_idx %= output_strides[0];
        input_idx += (((output_idx / output_strides[1]) * slice_strides[1]) + lower_bounds[1]) * input_strides[1];
        output_idx %= output_strides[1];
        input_idx += (((output_idx / output_strides[2]) * slice_strides[2]) + lower_bounds[2]) * input_strides[2];
        output0[tid] = input0[input_idx];
    }

}
// Node name:	Concat_193
// Description:	Concat
// Input:
//	- name: Constant_97_0	type: int32_t	shape: Shape{1}
//	- name: Constant_98_0	type: int32_t	shape: Shape{1}
// Output:
//	- name: Concat_193_0	type: int32_t	shape: Shape{2}
__device__ __noinline__ void Concat_int32_t_int32_t_int32_t_cuda_Concat_193_block_kernel(int32_t* input0, int32_t* input1, int32_t* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 512){
        return;
    }
    const dim3 blockDim(512, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    uint32_t inputs_strides[] = {1, 1};
    uint32_t tid = blockIdx.x * blockDim.x + threadIdx.x;
    if(tid < 2)
    {
        uint32_t block_id = tid / 2;
        uint32_t block_idx = tid % 2;
        uint32_t output_idx = block_id * 2 + block_idx;
        if(block_idx < inputs_strides[0])
        {
            output0[output_idx] = input0[block_id * inputs_strides[0] + block_idx];
            return;
        }
        block_idx -= inputs_strides[0];
        if(block_idx < inputs_strides[1])
        {
            output0[output_idx] = input1[block_id * inputs_strides[1] + block_idx];
            return;
        }
        block_idx -= inputs_strides[1];
    }

}
// Node name:	Broadcast_212
// Description:	Broadcast
// Input:
//	- name: Constant_104_0	type: float	shape: Shape{}
// Output:
//	- name: Broadcast_212_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Broadcast_float_float_cuda_Broadcast_212_block_kernel(float* input0, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 64){
        return;
    }
    const dim3 blockDim(64, 1, 1);
    const dim3 gridDim(4, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    size_t nthreads = 256;uint32_t strides0 = 256;
    uint32_t strides1 = 1;
    int stride_magic0 = 1;
    int stride_magic1 = 1;
    int stride_shift0 = 8;
    int stride_shift1 = 0;
    uint32_t reduced_strides0 = 0;
    uint32_t reduced_strides1 = 0;
    const int tid = blockDim.x*blockIdx.x + threadIdx.x;
    if (tid < nthreads)
    {
        int coordinate_product = tid;
        int coordinate0 = division_by_invariant_multiplication(coordinate_product, stride_magic0, stride_shift0);
        coordinate_product -= (coordinate0 * strides0);
        int coordinate1 = division_by_invariant_multiplication(coordinate_product, stride_magic1, stride_shift1);
        uint32_t reduced_idx = 0;
        reduced_idx += coordinate0 * reduced_strides0;
        reduced_idx += coordinate1 * reduced_strides1;
        output0[tid] = load(input0, reduced_idx);
    }

}
extern "C" __global__  void BlockFusionKernel_float_int32_t_int32_t_int32_t_int32_t_float_float_float_float_float_float_float_float_float_int32_t_int32_t_float_cuda_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Concat_Concat_Broadcast_0(float* input0, int32_t* input1, int32_t* input2, int32_t* input3, int32_t* input4, float* input5, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, int32_t* output8, int32_t* output9, float* output10)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 3)
    {
        Slice_float_float_cuda_Slice_195_block_kernel(input0, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 4 && (int)blockIdx.x <= 7)
    {
        Slice_float_float_cuda_Slice_197_block_kernel(input0, output1, threadIdx.x, blockIdx.x - 4 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 11)
    {
        Slice_float_float_cuda_Slice_199_block_kernel(input0, output2, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 12 && (int)blockIdx.x <= 15)
    {
        Slice_float_float_cuda_Slice_201_block_kernel(input0, output3, threadIdx.x, blockIdx.x - 12 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 19)
    {
        Slice_float_float_cuda_Slice_203_block_kernel(input0, output4, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 20 && (int)blockIdx.x <= 23)
    {
        Slice_float_float_cuda_Slice_205_block_kernel(input0, output5, threadIdx.x, blockIdx.x - 20 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 27)
    {
        Slice_float_float_cuda_Slice_207_block_kernel(input0, output6, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 28 && (int)blockIdx.x <= 31)
    {
        Slice_float_float_cuda_Slice_209_block_kernel(input0, output7, threadIdx.x, blockIdx.x - 28 + 0, NULL);
    }
    else if (blockIdx.x == 32)
    {
        Concat_int32_t_int32_t_int32_t_cuda_Concat_193_block_kernel(input1, input2, output8, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 33)
    {
        Concat_int32_t_int32_t_int32_t_cuda_Concat_193_block_kernel(input3, input4, output9, threadIdx.x, 0, NULL);
    }
    else if ((int)blockIdx.x >= 34 && (int)blockIdx.x <= 37)
    {
        Broadcast_float_float_cuda_Broadcast_212_block_kernel(input5, output10, threadIdx.x, blockIdx.x - 34 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_int32_t_int32_t_int32_t_int32_t_float_float_float_float_float_float_float_float_float_int32_t_int32_t_float_cuda_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Concat_Concat_Broadcast_0_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, int32_t* input1, int32_t* input2, int32_t* input3, int32_t* input4, float* input5, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, int32_t* output8, int32_t* output9, float* output10) {
    BlockFusionKernel_float_int32_t_int32_t_int32_t_int32_t_float_float_float_float_float_float_float_float_float_int32_t_int32_t_float_cuda_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Concat_Concat_Broadcast_0<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_223_0	type: float	shape: Shape{1, 256}
//	- name: Dot_371_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_423_0	type: float	shape: Shape{1}
//	- name: Add_352_0	type: float	shape: Shape{1, 256}
//	- name: Dot_221_0	type: float	shape: Shape{1, 256}
//	- name: Dot_369_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_222_0	type: float	shape: Shape{1, 256}
//	- name: Dot_370_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_224_0	type: float	shape: Shape{1, 256}
//	- name: Dot_372_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_367_0	type: float	shape: Shape{1, 256}
//	- name: Dot_363_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_417_0	type: float	shape: Shape{1}
//	- name: Add_351_0	type: float	shape: Shape{1, 256}
//	- name: Dot_365_0	type: float	shape: Shape{1, 256}
//	- name: Dot_361_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_366_0	type: float	shape: Shape{1, 256}
//	- name: Dot_362_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_368_0	type: float	shape: Shape{1, 256}
//	- name: Dot_364_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_359_0	type: float	shape: Shape{1, 256}
//	- name: Dot_255_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_411_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_357_0	type: float	shape: Shape{1, 256}
//	- name: Dot_253_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_358_0	type: float	shape: Shape{1, 256}
//	- name: Dot_254_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_360_0	type: float	shape: Shape{1, 256}
//	- name: Dot_256_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_438_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_444_0	type: float	shape: Shape{1, 256}
//	- name: Add_437_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_443_0	type: float	shape: Shape{1, 256}
//	- name: Add_436_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_442_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_3<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_223_0, Dot_371_0, Reshape_285_0, Reshape_423_0, Add_352_0, Dot_221_0, Dot_369_0, Reshape_281_0, Dot_222_0, Dot_370_0, Reshape_283_0, Dot_224_0, Dot_372_0, Reshape_287_0, Multiply_444_0, Add_438_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_5<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_367_0, Dot_363_0, Reshape_321_0, Reshape_417_0, Add_351_0, Dot_365_0, Dot_361_0, Reshape_317_0, Dot_366_0, Dot_362_0, Reshape_319_0, Dot_368_0, Dot_364_0, Reshape_323_0, Multiply_443_0, Add_437_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_4<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_359_0, Dot_255_0, Reshape_389_0, Reshape_411_0, Constant_100_0, Dot_357_0, Dot_253_0, Reshape_385_0, Dot_358_0, Dot_254_0, Reshape_387_0, Dot_360_0, Dot_256_0, Reshape_391_0, Add_436_0, Multiply_442_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_5 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_3

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_223_0	type: float	shape: Shape{1, 256}
//	- name: Dot_371_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_423_0	type: float	shape: Shape{1}
//	- name: Add_352_0	type: float	shape: Shape{1, 256}
//	- name: Dot_221_0	type: float	shape: Shape{1, 256}
//	- name: Dot_369_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_222_0	type: float	shape: Shape{1, 256}
//	- name: Dot_370_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_224_0	type: float	shape: Shape{1, 256}
//	- name: Dot_372_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_444_0	type: float	shape: Shape{1, 256}
//	- name: Add_438_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_383<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_223_0, Dot_371_0, Add_383_0);
// Add_float_float_float_cuda_Add_406<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_383_0, Reshape_285_0, Add_406_0);
// Broadcast_float_float_cuda_Broadcast_424<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_423_0, Broadcast_424_0);
// Add_float_float_float_cuda_Add_425<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_406_0, Broadcast_424_0, Add_425_0);
// Sigmoid_float_float_cuda_Sigmoid_432<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_425_0, Sigmoid_432_0);
// Multiply_float_float_float_cuda_Multiply_435<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_352_0, Sigmoid_432_0, Multiply_435_0);
// Add_float_float_float_cuda_Add_381<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_221_0, Dot_369_0, Add_381_0);
// Add_float_float_float_cuda_Add_402<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_381_0, Reshape_281_0, Add_402_0);
// Sigmoid_float_float_cuda_Sigmoid_421<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_402_0, Sigmoid_421_0);
// Add_float_float_float_cuda_Add_382<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_222_0, Dot_370_0, Add_382_0);
// Add_float_float_float_cuda_Add_404<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_382_0, Reshape_283_0, Add_404_0);
// Tanh_float_float_cuda_Tanh_422<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_404_0, Tanh_422_0);
// Multiply_float_float_float_cuda_Multiply_431<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_421_0, Tanh_422_0, Multiply_431_0);
// Add_float_float_float_cuda_Add_438<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_435_0, Multiply_431_0, Add_438_0);
// Tanh_float_float_cuda_Tanh_441<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_438_0, Tanh_441_0);
// Add_float_float_float_cuda_Add_384<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_224_0, Dot_372_0, Add_384_0);
// Add_float_float_float_cuda_Add_408<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_384_0, Reshape_287_0, Add_408_0);
// Sigmoid_float_float_cuda_Sigmoid_426<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_408_0, Sigmoid_426_0);
// Multiply_float_float_float_cuda_Multiply_444<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_441_0, Sigmoid_426_0, Multiply_444_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_3_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_359_0	type: float	shape: Shape{1, 256}
//	- name: Dot_255_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_411_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_357_0	type: float	shape: Shape{1, 256}
//	- name: Dot_253_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_358_0	type: float	shape: Shape{1, 256}
//	- name: Dot_254_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_360_0	type: float	shape: Shape{1, 256}
//	- name: Dot_256_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_436_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_442_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_375<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_359_0, Dot_255_0, Add_375_0);
// Add_float_float_float_cuda_Add_390<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_375_0, Reshape_389_0, Add_390_0);
// Broadcast_float_float_cuda_Broadcast_412<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_411_0, Broadcast_412_0);
// Add_float_float_float_cuda_Add_413<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_390_0, Broadcast_412_0, Add_413_0);
// Sigmoid_float_float_cuda_Sigmoid_428<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_413_0, Sigmoid_428_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_433<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_428_0, Multiply_433_0);
// Add_float_float_float_cuda_Add_373<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_357_0, Dot_253_0, Add_373_0);
// Add_float_float_float_cuda_Add_386<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_373_0, Reshape_385_0, Add_386_0);
// Sigmoid_float_float_cuda_Sigmoid_409<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_386_0, Sigmoid_409_0);
// Add_float_float_float_cuda_Add_374<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_358_0, Dot_254_0, Add_374_0);
// Add_float_float_float_cuda_Add_388<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_374_0, Reshape_387_0, Add_388_0);
// Tanh_float_float_cuda_Tanh_410<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_388_0, Tanh_410_0);
// Multiply_float_float_float_cuda_Multiply_427<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_409_0, Tanh_410_0, Multiply_427_0);
// Add_float_float_float_cuda_Add_436<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_433_0, Multiply_427_0, Add_436_0);
// Tanh_float_float_cuda_Tanh_439<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_436_0, Tanh_439_0);
// Add_float_float_float_cuda_Add_376<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_360_0, Dot_256_0, Add_376_0);
// Add_float_float_float_cuda_Add_392<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_376_0, Reshape_391_0, Add_392_0);
// Sigmoid_float_float_cuda_Sigmoid_414<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_392_0, Sigmoid_414_0);
// Multiply_float_float_float_cuda_Multiply_442<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_439_0, Sigmoid_414_0, Multiply_442_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_4_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp19;
    output0[tid] = temp14;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_6(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_3_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output1, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_3_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output3, output2, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_4_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output4, output5, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_6_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_6<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output0, output1, output2, output3, output4, output5);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_1419_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1415_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1543_0	type: float	shape: Shape{1}
//	- name: Add_1347_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1417_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1413_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1418_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1414_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1420_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1416_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1411_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1407_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1537_0	type: float	shape: Shape{1}
//	- name: Add_1346_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1409_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1405_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1410_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1406_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1412_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1408_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1403_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1399_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1531_0	type: float	shape: Shape{1}
//	- name: Add_1345_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1401_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1397_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1402_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1398_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1404_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1400_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1395_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1391_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1525_0	type: float	shape: Shape{1}
//	- name: Add_1344_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1393_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1394_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1390_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1396_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1392_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1371_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1367_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1507_0	type: float	shape: Shape{1}
//	- name: Add_1341_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1369_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1365_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1370_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1366_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1368_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1372_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1379_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1375_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1513_0	type: float	shape: Shape{1}
//	- name: Add_1342_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1377_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1373_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1378_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1374_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1380_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1376_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1383_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1519_0	type: float	shape: Shape{1}
//	- name: Add_1343_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1381_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1386_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1382_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1388_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1384_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1588_0	type: float	shape: Shape{1, 256}
//	- name: Add_1573_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1587_0	type: float	shape: Shape{1, 256}
//	- name: Add_1572_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1586_0	type: float	shape: Shape{1, 256}
//	- name: Add_1571_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1585_0	type: float	shape: Shape{1, 256}
//	- name: Add_1568_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1582_0	type: float	shape: Shape{1, 256}
//	- name: Add_1569_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1583_0	type: float	shape: Shape{1, 256}
//	- name: Add_1570_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1584_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_36<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1419_0, Dot_1415_0, Reshape_321_0, Reshape_1543_0, Add_1347_0, Dot_1417_0, Dot_1413_0, Reshape_317_0, Dot_1418_0, Dot_1414_0, Reshape_319_0, Dot_1420_0, Dot_1416_0, Reshape_323_0, Multiply_1588_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1411_0, Dot_1407_0, Reshape_389_0, Reshape_1537_0, Add_1346_0, Dot_1409_0, Dot_1405_0, Reshape_385_0, Dot_1410_0, Dot_1406_0, Reshape_387_0, Dot_1412_0, Dot_1408_0, Reshape_391_0, Multiply_1587_0, Add_1573_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_42<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1403_0, Dot_1399_0, Reshape_489_0, Reshape_1531_0, Add_1345_0, Dot_1401_0, Dot_1397_0, Reshape_485_0, Dot_1402_0, Dot_1398_0, Reshape_487_0, Dot_1404_0, Dot_1400_0, Reshape_491_0, Multiply_1586_0, Add_1572_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_39<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1395_0, Dot_1391_0, Reshape_621_0, Reshape_1525_0, Add_1344_0, Dot_1393_0, Dot_1389_0, Reshape_617_0, Dot_1394_0, Dot_1390_0, Reshape_619_0, Dot_1396_0, Dot_1392_0, Reshape_623_0, Add_1571_0, Multiply_1585_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_38<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1371_0, Dot_1367_0, Reshape_1209_0, Reshape_1507_0, Add_1341_0, Dot_1369_0, Dot_1365_0, Reshape_1205_0, Dot_1370_0, Dot_1366_0, Reshape_1207_0, Dot_1372_0, Dot_1368_0, Reshape_1211_0, Multiply_1582_0, Add_1568_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_40<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1379_0, Dot_1375_0, Reshape_981_0, Reshape_1513_0, Add_1342_0, Dot_1377_0, Dot_1373_0, Reshape_977_0, Dot_1378_0, Dot_1374_0, Reshape_979_0, Dot_1380_0, Dot_1376_0, Reshape_983_0, Multiply_1583_0, Add_1569_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_37<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1387_0, Dot_1383_0, Reshape_785_0, Reshape_1519_0, Add_1343_0, Dot_1385_0, Dot_1381_0, Reshape_781_0, Dot_1386_0, Dot_1382_0, Reshape_783_0, Dot_1388_0, Dot_1384_0, Reshape_787_0, Multiply_1584_0, Add_1570_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_42 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_38 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_40 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_37 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1419_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1415_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1543_0	type: float	shape: Shape{1}
//	- name: Add_1347_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1417_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1413_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1418_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1414_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1420_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1416_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1588_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1447<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1419_0, Dot_1415_0, Add_1447_0);
// Add_float_float_float_cuda_Add_1502<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1447_0, Reshape_321_0, Add_1502_0);
// Broadcast_float_float_cuda_Broadcast_1544<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1543_0, Broadcast_1544_0);
// Add_float_float_float_cuda_Add_1545<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1502_0, Broadcast_1544_0, Add_1545_0);
// Sigmoid_float_float_cuda_Sigmoid_1560<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1545_0, Sigmoid_1560_0);
// Multiply_float_float_float_cuda_Multiply_1567<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1347_0, Sigmoid_1560_0, Multiply_1567_0);
// Add_float_float_float_cuda_Add_1445<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1417_0, Dot_1413_0, Add_1445_0);
// Add_float_float_float_cuda_Add_1498<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1445_0, Reshape_317_0, Add_1498_0);
// Sigmoid_float_float_cuda_Sigmoid_1541<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1498_0, Sigmoid_1541_0);
// Add_float_float_float_cuda_Add_1446<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1418_0, Dot_1414_0, Add_1446_0);
// Add_float_float_float_cuda_Add_1500<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1446_0, Reshape_319_0, Add_1500_0);
// Tanh_float_float_cuda_Tanh_1542<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1500_0, Tanh_1542_0);
// Multiply_float_float_float_cuda_Multiply_1559<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1541_0, Tanh_1542_0, Multiply_1559_0);
// Add_float_float_float_cuda_Add_1574<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1567_0, Multiply_1559_0, Add_1574_0);
// Tanh_float_float_cuda_Tanh_1581<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1574_0, Tanh_1581_0);
// Add_float_float_float_cuda_Add_1448<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1420_0, Dot_1416_0, Add_1448_0);
// Add_float_float_float_cuda_Add_1504<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1448_0, Reshape_323_0, Add_1504_0);
// Sigmoid_float_float_cuda_Sigmoid_1546<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1504_0, Sigmoid_1546_0);
// Multiply_float_float_float_cuda_Multiply_1588<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1581_0, Sigmoid_1546_0, Multiply_1588_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_36_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1411_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1407_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1537_0	type: float	shape: Shape{1}
//	- name: Add_1346_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1409_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1405_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1410_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1406_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1412_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1408_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1587_0	type: float	shape: Shape{1, 256}
//	- name: Add_1573_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1443<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1411_0, Dot_1407_0, Add_1443_0);
// Add_float_float_float_cuda_Add_1494<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1443_0, Reshape_389_0, Add_1494_0);
// Broadcast_float_float_cuda_Broadcast_1538<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1537_0, Broadcast_1538_0);
// Add_float_float_float_cuda_Add_1539<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1494_0, Broadcast_1538_0, Add_1539_0);
// Sigmoid_float_float_cuda_Sigmoid_1558<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1539_0, Sigmoid_1558_0);
// Multiply_float_float_float_cuda_Multiply_1566<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1346_0, Sigmoid_1558_0, Multiply_1566_0);
// Add_float_float_float_cuda_Add_1441<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1409_0, Dot_1405_0, Add_1441_0);
// Add_float_float_float_cuda_Add_1490<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1441_0, Reshape_385_0, Add_1490_0);
// Sigmoid_float_float_cuda_Sigmoid_1535<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1490_0, Sigmoid_1535_0);
// Add_float_float_float_cuda_Add_1442<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1410_0, Dot_1406_0, Add_1442_0);
// Add_float_float_float_cuda_Add_1492<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1442_0, Reshape_387_0, Add_1492_0);
// Tanh_float_float_cuda_Tanh_1536<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1492_0, Tanh_1536_0);
// Multiply_float_float_float_cuda_Multiply_1557<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1535_0, Tanh_1536_0, Multiply_1557_0);
// Add_float_float_float_cuda_Add_1573<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1566_0, Multiply_1557_0, Add_1573_0);
// Tanh_float_float_cuda_Tanh_1580<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1573_0, Tanh_1580_0);
// Add_float_float_float_cuda_Add_1444<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1412_0, Dot_1408_0, Add_1444_0);
// Add_float_float_float_cuda_Add_1496<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1444_0, Reshape_391_0, Add_1496_0);
// Sigmoid_float_float_cuda_Sigmoid_1540<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1496_0, Sigmoid_1540_0);
// Multiply_float_float_float_cuda_Multiply_1587<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1580_0, Sigmoid_1540_0, Multiply_1587_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1395_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1391_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1525_0	type: float	shape: Shape{1}
//	- name: Add_1344_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1393_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1394_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1390_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1396_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1392_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_1571_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1585_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1435<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1395_0, Dot_1391_0, Add_1435_0);
// Add_float_float_float_cuda_Add_1478<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1435_0, Reshape_621_0, Add_1478_0);
// Broadcast_float_float_cuda_Broadcast_1526<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1525_0, Broadcast_1526_0);
// Add_float_float_float_cuda_Add_1527<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1478_0, Broadcast_1526_0, Add_1527_0);
// Sigmoid_float_float_cuda_Sigmoid_1554<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1527_0, Sigmoid_1554_0);
// Multiply_float_float_float_cuda_Multiply_1564<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1344_0, Sigmoid_1554_0, Multiply_1564_0);
// Add_float_float_float_cuda_Add_1433<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1393_0, Dot_1389_0, Add_1433_0);
// Add_float_float_float_cuda_Add_1474<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1433_0, Reshape_617_0, Add_1474_0);
// Sigmoid_float_float_cuda_Sigmoid_1523<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1474_0, Sigmoid_1523_0);
// Add_float_float_float_cuda_Add_1434<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1394_0, Dot_1390_0, Add_1434_0);
// Add_float_float_float_cuda_Add_1476<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1434_0, Reshape_619_0, Add_1476_0);
// Tanh_float_float_cuda_Tanh_1524<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1476_0, Tanh_1524_0);
// Multiply_float_float_float_cuda_Multiply_1553<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1523_0, Tanh_1524_0, Multiply_1553_0);
// Add_float_float_float_cuda_Add_1571<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1564_0, Multiply_1553_0, Add_1571_0);
// Tanh_float_float_cuda_Tanh_1578<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1571_0, Tanh_1578_0);
// Add_float_float_float_cuda_Add_1436<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1396_0, Dot_1392_0, Add_1436_0);
// Add_float_float_float_cuda_Add_1480<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1436_0, Reshape_623_0, Add_1480_0);
// Sigmoid_float_float_cuda_Sigmoid_1528<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1480_0, Sigmoid_1528_0);
// Multiply_float_float_float_cuda_Multiply_1585<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1578_0, Sigmoid_1528_0, Multiply_1585_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_39_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_18(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* input84, float* input85, float* input86, float* input87, float* input88, float* input89, float* input90, float* input91, float* input92, float* input93, float* input94, float* input95, float* input96, float* input97, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_36_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output4, output3, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_39_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output5, output6, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input68, input67, input69, output8, output7, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 5)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41_block_kernel(input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output10, output9, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 6)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_41_block_kernel(input84, input85, input86, input87, input88, input89, input90, input91, input92, input93, input94, input95, input96, input97, output12, output11, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_18_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* input84, float* input85, float* input86, float* input87, float* input88, float* input89, float* input90, float* input91, float* input92, float* input93, float* input94, float* input95, float* input96, float* input97, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_18<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, input84, input85, input86, input87, input88, input89, input90, input91, input92, input93, input94, input95, input96, input97, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12);
}
// Node name:	 BlockFusion
// Input:
//	- name: Reshape_196_0	type: float	shape: Shape{1, 256}
//	- name: Constant_6_0	type: float	shape: Shape{256, 256}
//	- name: Constant_3_0	type: float	shape: Shape{256, 256}
//	- name: Constant_9_0	type: float	shape: Shape{256, 256}
//	- name: Constant_0_0	type: float	shape: Shape{256, 256}
//	- name: Reshape_198_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_200_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_202_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_204_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_206_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_208_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_210_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Dot_215_0	type: float	shape: Shape{1, 256}
//	- name: Dot_214_0	type: float	shape: Shape{1, 256}
//	- name: Dot_216_0	type: float	shape: Shape{1, 256}
//	- name: Dot_213_0	type: float	shape: Shape{1, 256}
//	- name: Dot_217_0	type: float	shape: Shape{1, 256}
//	- name: Dot_218_0	type: float	shape: Shape{1, 256}
//	- name: Dot_220_0	type: float	shape: Shape{1, 256}
//	- name: Dot_219_0	type: float	shape: Shape{1, 256}
//	- name: Dot_221_0	type: float	shape: Shape{1, 256}
//	- name: Dot_224_0	type: float	shape: Shape{1, 256}
//	- name: Dot_223_0	type: float	shape: Shape{1, 256}
//	- name: Dot_222_0	type: float	shape: Shape{1, 256}
//	- name: Dot_227_0	type: float	shape: Shape{1, 256}
//	- name: Dot_226_0	type: float	shape: Shape{1, 256}
//	- name: Dot_228_0	type: float	shape: Shape{1, 256}
//	- name: Dot_225_0	type: float	shape: Shape{1, 256}
//	- name: Dot_232_0	type: float	shape: Shape{1, 256}
//	- name: Dot_230_0	type: float	shape: Shape{1, 256}
//	- name: Dot_231_0	type: float	shape: Shape{1, 256}
//	- name: Dot_229_0	type: float	shape: Shape{1, 256}
//	- name: Dot_233_0	type: float	shape: Shape{1, 256}
//	- name: Dot_234_0	type: float	shape: Shape{1, 256}
//	- name: Dot_235_0	type: float	shape: Shape{1, 256}
//	- name: Dot_236_0	type: float	shape: Shape{1, 256}
//	- name: Dot_237_0	type: float	shape: Shape{1, 256}
//	- name: Dot_238_0	type: float	shape: Shape{1, 256}
//	- name: Dot_239_0	type: float	shape: Shape{1, 256}
//	- name: Dot_240_0	type: float	shape: Shape{1, 256}
//	- name: Dot_241_0	type: float	shape: Shape{1, 256}
//	- name: Dot_242_0	type: float	shape: Shape{1, 256}
//	- name: Dot_243_0	type: float	shape: Shape{1, 256}
//	- name: Dot_244_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_215<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_196_0, Constant_6_0, Dot_215_0);
// Dot_float_float_float_cuda_Dot_214<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_196_0, Constant_3_0, Dot_214_0);
// Dot_float_float_float_cuda_Dot_216<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_196_0, Constant_9_0, Dot_216_0);
// Dot_float_float_float_cuda_Dot_213<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_196_0, Constant_0_0, Dot_213_0);
// Dot_float_float_float_cuda_Dot_217<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_198_0, Constant_0_0, Dot_217_0);
// Dot_float_float_float_cuda_Dot_218<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_198_0, Constant_3_0, Dot_218_0);
// Dot_float_float_float_cuda_Dot_220<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_198_0, Constant_9_0, Dot_220_0);
// Dot_float_float_float_cuda_Dot_219<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_198_0, Constant_6_0, Dot_219_0);
// Dot_float_float_float_cuda_Dot_221<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_200_0, Constant_0_0, Dot_221_0);
// Dot_float_float_float_cuda_Dot_224<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_200_0, Constant_9_0, Dot_224_0);
// Dot_float_float_float_cuda_Dot_223<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_200_0, Constant_6_0, Dot_223_0);
// Dot_float_float_float_cuda_Dot_222<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_200_0, Constant_3_0, Dot_222_0);
// Dot_float_float_float_cuda_Dot_227<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_202_0, Constant_6_0, Dot_227_0);
// Dot_float_float_float_cuda_Dot_226<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_202_0, Constant_3_0, Dot_226_0);
// Dot_float_float_float_cuda_Dot_228<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_202_0, Constant_9_0, Dot_228_0);
// Dot_float_float_float_cuda_Dot_225<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_202_0, Constant_0_0, Dot_225_0);
// Dot_float_float_float_cuda_Dot_232<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_204_0, Constant_9_0, Dot_232_0);
// Dot_float_float_float_cuda_Dot_230<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_204_0, Constant_3_0, Dot_230_0);
// Dot_float_float_float_cuda_Dot_231<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_204_0, Constant_6_0, Dot_231_0);
// Dot_float_float_float_cuda_Dot_229<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_204_0, Constant_0_0, Dot_229_0);
// Dot_float_float_float_cuda_Dot_233<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_206_0, Constant_0_0, Dot_233_0);
// Dot_float_float_float_cuda_Dot_234<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_206_0, Constant_3_0, Dot_234_0);
// Dot_float_float_float_cuda_Dot_235<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_206_0, Constant_6_0, Dot_235_0);
// Dot_float_float_float_cuda_Dot_236<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_206_0, Constant_9_0, Dot_236_0);
// Dot_float_float_float_cuda_Dot_237<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_208_0, Constant_0_0, Dot_237_0);
// Dot_float_float_float_cuda_Dot_238<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_208_0, Constant_3_0, Dot_238_0);
// Dot_float_float_float_cuda_Dot_239<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_208_0, Constant_6_0, Dot_239_0);
// Dot_float_float_float_cuda_Dot_240<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_208_0, Constant_9_0, Dot_240_0);
// Dot_float_float_float_cuda_Dot_241<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_210_0, Constant_0_0, Dot_241_0);
// Dot_float_float_float_cuda_Dot_242<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_210_0, Constant_3_0, Dot_242_0);
// Dot_float_float_float_cuda_Dot_243<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_210_0, Constant_6_0, Dot_243_0);
// Dot_float_float_float_cuda_Dot_244<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Reshape_210_0, Constant_9_0, Dot_244_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_214 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_216 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_213 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_217 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_218 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_220 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_219 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_221 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_224 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_223 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_222 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_227 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_226 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_228 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_225 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_232 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_230 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_231 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_229 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_233 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_234 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_235 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_236 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_237 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_238 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_239 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_240 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_241 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_242 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_243 : Dot_float_float_float_cuda_Dot_215
// Dot_float_float_float_cuda_Dot_244 : Dot_float_float_float_cuda_Dot_215

// Node name:	Dot_215
// Description:	Dot
// Input:
//	- name: Reshape_196_0	type: float	shape: Shape{1, 256}
//	- name: Constant_6_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_215_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_215_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_2(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input5, input4, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input5, input2, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input5, input3, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input5, input1, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input6, input4, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input6, input3, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input6, input1, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input6, input2, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input7, input1, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input7, input2, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input7, input3, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input7, input4, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input8, input3, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input8, input2, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input8, input1, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input8, input4, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input9, input4, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input9, input2, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input9, input1, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input9, input3, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input10, input4, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input10, input2, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input10, input1, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input10, input3, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input11, input4, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input11, input2, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input11, input1, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_215_block_kernel(input11, input3, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_2_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_2<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_564_0	type: float	shape: Shape{1, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_563_0	type: float	shape: Shape{1, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_562_0	type: float	shape: Shape{1, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_561_0	type: float	shape: Shape{1, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_592_0	type: float	shape: Shape{1, 256}
//	- name: Dot_591_0	type: float	shape: Shape{1, 256}
//	- name: Dot_596_0	type: float	shape: Shape{1, 256}
//	- name: Dot_594_0	type: float	shape: Shape{1, 256}
//	- name: Dot_595_0	type: float	shape: Shape{1, 256}
//	- name: Dot_593_0	type: float	shape: Shape{1, 256}
//	- name: Dot_590_0	type: float	shape: Shape{1, 256}
//	- name: Dot_589_0	type: float	shape: Shape{1, 256}
//	- name: Dot_583_0	type: float	shape: Shape{1, 256}
//	- name: Dot_585_0	type: float	shape: Shape{1, 256}
//	- name: Dot_586_0	type: float	shape: Shape{1, 256}
//	- name: Dot_588_0	type: float	shape: Shape{1, 256}
//	- name: Dot_584_0	type: float	shape: Shape{1, 256}
//	- name: Dot_587_0	type: float	shape: Shape{1, 256}
//	- name: Dot_581_0	type: float	shape: Shape{1, 256}
//	- name: Dot_582_0	type: float	shape: Shape{1, 256}
//	- name: Dot_579_0	type: float	shape: Shape{1, 256}
//	- name: Dot_578_0	type: float	shape: Shape{1, 256}
//	- name: Dot_576_0	type: float	shape: Shape{1, 256}
//	- name: Dot_577_0	type: float	shape: Shape{1, 256}
//	- name: Dot_574_0	type: float	shape: Shape{1, 256}
//	- name: Dot_575_0	type: float	shape: Shape{1, 256}
//	- name: Dot_573_0	type: float	shape: Shape{1, 256}
//	- name: Dot_580_0	type: float	shape: Shape{1, 256}
//	- name: Dot_572_0	type: float	shape: Shape{1, 256}
//	- name: Dot_571_0	type: float	shape: Shape{1, 256}
//	- name: Dot_570_0	type: float	shape: Shape{1, 256}
//	- name: Dot_567_0	type: float	shape: Shape{1, 256}
//	- name: Dot_566_0	type: float	shape: Shape{1, 256}
//	- name: Dot_569_0	type: float	shape: Shape{1, 256}
//	- name: Dot_568_0	type: float	shape: Shape{1, 256}
//	- name: Dot_565_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_592<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_21_0, Dot_592_0);
// Dot_float_float_float_cuda_Dot_591<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_18_0, Dot_591_0);
// Dot_float_float_float_cuda_Dot_596<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_10_0, Dot_596_0);
// Dot_float_float_float_cuda_Dot_594<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_4_0, Dot_594_0);
// Dot_float_float_float_cuda_Dot_595<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_7_0, Dot_595_0);
// Dot_float_float_float_cuda_Dot_593<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_1_0, Dot_593_0);
// Dot_float_float_float_cuda_Dot_590<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_15_0, Dot_590_0);
// Dot_float_float_float_cuda_Dot_589<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_564_0, Constant_12_0, Dot_589_0);
// Dot_float_float_float_cuda_Dot_583<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_30_0, Dot_583_0);
// Dot_float_float_float_cuda_Dot_585<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_13_0, Dot_585_0);
// Dot_float_float_float_cuda_Dot_586<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_16_0, Dot_586_0);
// Dot_float_float_float_cuda_Dot_588<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_22_0, Dot_588_0);
// Dot_float_float_float_cuda_Dot_584<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_33_0, Dot_584_0);
// Dot_float_float_float_cuda_Dot_587<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_19_0, Dot_587_0);
// Dot_float_float_float_cuda_Dot_581<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_24_0, Dot_581_0);
// Dot_float_float_float_cuda_Dot_582<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_563_0, Constant_27_0, Dot_582_0);
// Dot_float_float_float_cuda_Dot_579<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_31_0, Dot_579_0);
// Dot_float_float_float_cuda_Dot_578<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_28_0, Dot_578_0);
// Dot_float_float_float_cuda_Dot_576<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_45_0, Dot_576_0);
// Dot_float_float_float_cuda_Dot_577<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_25_0, Dot_577_0);
// Dot_float_float_float_cuda_Dot_574<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_39_0, Dot_574_0);
// Dot_float_float_float_cuda_Dot_575<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_42_0, Dot_575_0);
// Dot_float_float_float_cuda_Dot_573<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_36_0, Dot_573_0);
// Dot_float_float_float_cuda_Dot_580<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_562_0, Constant_34_0, Dot_580_0);
// Dot_float_float_float_cuda_Dot_572<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_46_0, Dot_572_0);
// Dot_float_float_float_cuda_Dot_571<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_43_0, Dot_571_0);
// Dot_float_float_float_cuda_Dot_570<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_40_0, Dot_570_0);
// Dot_float_float_float_cuda_Dot_567<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_54_0, Dot_567_0);
// Dot_float_float_float_cuda_Dot_566<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_51_0, Dot_566_0);
// Dot_float_float_float_cuda_Dot_569<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_37_0, Dot_569_0);
// Dot_float_float_float_cuda_Dot_568<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_57_0, Dot_568_0);
// Dot_float_float_float_cuda_Dot_565<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_561_0, Constant_48_0, Dot_565_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_591 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_596 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_594 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_595 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_593 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_590 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_589 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_583 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_585 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_586 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_588 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_584 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_587 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_581 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_582 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_579 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_578 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_576 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_577 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_574 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_575 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_573 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_580 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_572 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_571 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_570 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_567 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_566 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_569 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_568 : Dot_float_float_float_cuda_Dot_592
// Dot_float_float_float_cuda_Dot_565 : Dot_float_float_float_cuda_Dot_592

// Node name:	Dot_592
// Description:	Dot
// Input:
//	- name: Multiply_564_0	type: float	shape: Shape{1, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_592_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_592_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_9(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input14, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input15, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input16, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input9, input17, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input23, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input24, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input25, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input18, input26, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input28, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input29, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input30, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input31, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input32, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input33, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input34, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_592_block_kernel(input27, input35, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_9_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_9<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_243_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1171_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1313_0	type: float	shape: Shape{1}
//	- name: Add_1102_0	type: float	shape: Shape{1, 256}
//	- name: Dot_241_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1169_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_242_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1170_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_244_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1172_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1167_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1163_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1307_0	type: float	shape: Shape{1}
//	- name: Add_1101_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1165_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1161_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1166_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1162_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1168_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1164_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1159_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1155_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1301_0	type: float	shape: Shape{1}
//	- name: Add_1100_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1157_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1153_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1158_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1154_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1160_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1156_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1151_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1147_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1295_0	type: float	shape: Shape{1}
//	- name: Add_1099_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1149_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1145_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1150_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1146_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1152_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1148_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1143_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1139_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1289_0	type: float	shape: Shape{1}
//	- name: Add_1098_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1141_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1137_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1142_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1138_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1144_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1140_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_1119_0	type: float	shape: Shape{1, 256}
//	- name: Dot_275_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1271_0	type: float	shape: Shape{1}
//	- name: Dot_1117_0	type: float	shape: Shape{1, 256}
//	- name: Dot_273_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1118_0	type: float	shape: Shape{1, 256}
//	- name: Dot_274_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1120_0	type: float	shape: Shape{1, 256}
//	- name: Dot_276_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1127_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1123_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1277_0	type: float	shape: Shape{1}
//	- name: Add_1096_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1125_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1121_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1126_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1122_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1128_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1124_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1135_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1131_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1283_0	type: float	shape: Shape{1}
//	- name: Add_1097_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1133_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1129_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1134_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1130_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1136_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1132_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1364_0	type: float	shape: Shape{1, 256}
//	- name: Add_1347_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1363_0	type: float	shape: Shape{1, 256}
//	- name: Add_1346_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1362_0	type: float	shape: Shape{1, 256}
//	- name: Add_1345_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1361_0	type: float	shape: Shape{1, 256}
//	- name: Add_1344_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1360_0	type: float	shape: Shape{1, 256}
//	- name: Add_1341_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1357_0	type: float	shape: Shape{1, 256}
//	- name: Add_1342_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1358_0	type: float	shape: Shape{1, 256}
//	- name: Add_1343_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1359_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_31<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_243_0, Dot_1171_0, Reshape_285_0, Reshape_1313_0, Add_1102_0, Dot_241_0, Dot_1169_0, Reshape_281_0, Dot_242_0, Dot_1170_0, Reshape_283_0, Dot_244_0, Dot_1172_0, Reshape_287_0, Multiply_1364_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1167_0, Dot_1163_0, Reshape_321_0, Reshape_1307_0, Add_1101_0, Dot_1165_0, Dot_1161_0, Reshape_317_0, Dot_1166_0, Dot_1162_0, Reshape_319_0, Dot_1168_0, Dot_1164_0, Reshape_323_0, Multiply_1363_0, Add_1347_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_30<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1159_0, Dot_1155_0, Reshape_389_0, Reshape_1301_0, Add_1100_0, Dot_1157_0, Dot_1153_0, Reshape_385_0, Dot_1158_0, Dot_1154_0, Reshape_387_0, Dot_1160_0, Dot_1156_0, Reshape_391_0, Add_1346_0, Multiply_1362_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_35<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1151_0, Dot_1147_0, Reshape_489_0, Reshape_1295_0, Add_1099_0, Dot_1149_0, Dot_1145_0, Reshape_485_0, Dot_1150_0, Dot_1146_0, Reshape_487_0, Dot_1152_0, Dot_1148_0, Reshape_491_0, Add_1345_0, Multiply_1361_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_33<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1143_0, Dot_1139_0, Reshape_621_0, Reshape_1289_0, Add_1098_0, Dot_1141_0, Dot_1137_0, Reshape_617_0, Dot_1142_0, Dot_1138_0, Reshape_619_0, Dot_1144_0, Dot_1140_0, Reshape_623_0, Multiply_1360_0, Add_1344_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Broadcast_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_28<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Constant_100_0, Dot_1119_0, Dot_275_0, Reshape_1209_0, Reshape_1271_0, Dot_1117_0, Dot_273_0, Reshape_1205_0, Dot_1118_0, Dot_274_0, Reshape_1207_0, Dot_1120_0, Dot_276_0, Reshape_1211_0, Multiply_1357_0, Add_1341_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_29<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1127_0, Dot_1123_0, Reshape_981_0, Reshape_1277_0, Add_1096_0, Dot_1125_0, Dot_1121_0, Reshape_977_0, Dot_1126_0, Dot_1122_0, Reshape_979_0, Dot_1128_0, Dot_1124_0, Reshape_983_0, Multiply_1358_0, Add_1342_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_34<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1135_0, Dot_1131_0, Reshape_785_0, Reshape_1283_0, Add_1097_0, Dot_1133_0, Dot_1129_0, Reshape_781_0, Dot_1134_0, Dot_1130_0, Reshape_783_0, Dot_1136_0, Dot_1132_0, Reshape_787_0, Multiply_1359_0, Add_1343_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_35 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_30
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_33 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_29 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_34 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_243_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1171_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1313_0	type: float	shape: Shape{1}
//	- name: Add_1102_0	type: float	shape: Shape{1, 256}
//	- name: Dot_241_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1169_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_242_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1170_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_244_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1172_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1364_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1203<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_243_0, Dot_1171_0, Add_1203_0);
// Add_float_float_float_cuda_Add_1266<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1203_0, Reshape_285_0, Add_1266_0);
// Broadcast_float_float_cuda_Broadcast_1314<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1313_0, Broadcast_1314_0);
// Add_float_float_float_cuda_Add_1315<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1266_0, Broadcast_1314_0, Add_1315_0);
// Sigmoid_float_float_cuda_Sigmoid_1332<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1315_0, Sigmoid_1332_0);
// Multiply_float_float_float_cuda_Multiply_1340<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1102_0, Sigmoid_1332_0, Multiply_1340_0);
// Add_float_float_float_cuda_Add_1201<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_241_0, Dot_1169_0, Add_1201_0);
// Add_float_float_float_cuda_Add_1262<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1201_0, Reshape_281_0, Add_1262_0);
// Sigmoid_float_float_cuda_Sigmoid_1311<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1262_0, Sigmoid_1311_0);
// Add_float_float_float_cuda_Add_1202<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_242_0, Dot_1170_0, Add_1202_0);
// Add_float_float_float_cuda_Add_1264<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1202_0, Reshape_283_0, Add_1264_0);
// Tanh_float_float_cuda_Tanh_1312<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1264_0, Tanh_1312_0);
// Multiply_float_float_float_cuda_Multiply_1331<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1311_0, Tanh_1312_0, Multiply_1331_0);
// Add_float_float_float_cuda_Add_1348<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1340_0, Multiply_1331_0, Add_1348_0);
// Tanh_float_float_cuda_Tanh_1356<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1348_0, Tanh_1356_0);
// Add_float_float_float_cuda_Add_1204<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_244_0, Dot_1172_0, Add_1204_0);
// Add_float_float_float_cuda_Add_1268<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1204_0, Reshape_287_0, Add_1268_0);
// Sigmoid_float_float_cuda_Sigmoid_1316<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1268_0, Sigmoid_1316_0);
// Multiply_float_float_float_cuda_Multiply_1364<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1356_0, Sigmoid_1316_0, Multiply_1364_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_31_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1167_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1163_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1307_0	type: float	shape: Shape{1}
//	- name: Add_1101_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1165_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1161_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1166_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1162_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1168_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1164_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1363_0	type: float	shape: Shape{1, 256}
//	- name: Add_1347_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1199<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1167_0, Dot_1163_0, Add_1199_0);
// Add_float_float_float_cuda_Add_1258<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1199_0, Reshape_321_0, Add_1258_0);
// Broadcast_float_float_cuda_Broadcast_1308<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1307_0, Broadcast_1308_0);
// Add_float_float_float_cuda_Add_1309<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1258_0, Broadcast_1308_0, Add_1309_0);
// Sigmoid_float_float_cuda_Sigmoid_1330<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1309_0, Sigmoid_1330_0);
// Multiply_float_float_float_cuda_Multiply_1339<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1101_0, Sigmoid_1330_0, Multiply_1339_0);
// Add_float_float_float_cuda_Add_1197<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1165_0, Dot_1161_0, Add_1197_0);
// Add_float_float_float_cuda_Add_1254<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1197_0, Reshape_317_0, Add_1254_0);
// Sigmoid_float_float_cuda_Sigmoid_1305<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1254_0, Sigmoid_1305_0);
// Add_float_float_float_cuda_Add_1198<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1166_0, Dot_1162_0, Add_1198_0);
// Add_float_float_float_cuda_Add_1256<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1198_0, Reshape_319_0, Add_1256_0);
// Tanh_float_float_cuda_Tanh_1306<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1256_0, Tanh_1306_0);
// Multiply_float_float_float_cuda_Multiply_1329<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1305_0, Tanh_1306_0, Multiply_1329_0);
// Add_float_float_float_cuda_Add_1347<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1339_0, Multiply_1329_0, Add_1347_0);
// Tanh_float_float_cuda_Tanh_1355<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1347_0, Tanh_1355_0);
// Add_float_float_float_cuda_Add_1200<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1168_0, Dot_1164_0, Add_1200_0);
// Add_float_float_float_cuda_Add_1260<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1200_0, Reshape_323_0, Add_1260_0);
// Sigmoid_float_float_cuda_Sigmoid_1310<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1260_0, Sigmoid_1310_0);
// Multiply_float_float_float_cuda_Multiply_1363<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1355_0, Sigmoid_1310_0, Multiply_1363_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1159_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1155_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1301_0	type: float	shape: Shape{1}
//	- name: Add_1100_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1157_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1153_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1158_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1154_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1160_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1156_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_1346_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1362_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1195<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1159_0, Dot_1155_0, Add_1195_0);
// Add_float_float_float_cuda_Add_1250<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1195_0, Reshape_389_0, Add_1250_0);
// Broadcast_float_float_cuda_Broadcast_1302<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1301_0, Broadcast_1302_0);
// Add_float_float_float_cuda_Add_1303<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1250_0, Broadcast_1302_0, Add_1303_0);
// Sigmoid_float_float_cuda_Sigmoid_1328<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1303_0, Sigmoid_1328_0);
// Multiply_float_float_float_cuda_Multiply_1338<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1100_0, Sigmoid_1328_0, Multiply_1338_0);
// Add_float_float_float_cuda_Add_1193<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1157_0, Dot_1153_0, Add_1193_0);
// Add_float_float_float_cuda_Add_1246<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1193_0, Reshape_385_0, Add_1246_0);
// Sigmoid_float_float_cuda_Sigmoid_1299<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1246_0, Sigmoid_1299_0);
// Add_float_float_float_cuda_Add_1194<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1158_0, Dot_1154_0, Add_1194_0);
// Add_float_float_float_cuda_Add_1248<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1194_0, Reshape_387_0, Add_1248_0);
// Tanh_float_float_cuda_Tanh_1300<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1248_0, Tanh_1300_0);
// Multiply_float_float_float_cuda_Multiply_1327<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1299_0, Tanh_1300_0, Multiply_1327_0);
// Add_float_float_float_cuda_Add_1346<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1338_0, Multiply_1327_0, Add_1346_0);
// Tanh_float_float_cuda_Tanh_1354<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1346_0, Tanh_1354_0);
// Add_float_float_float_cuda_Add_1196<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1160_0, Dot_1156_0, Add_1196_0);
// Add_float_float_float_cuda_Add_1252<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1196_0, Reshape_391_0, Add_1252_0);
// Sigmoid_float_float_cuda_Sigmoid_1304<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1252_0, Sigmoid_1304_0);
// Multiply_float_float_float_cuda_Multiply_1362<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1354_0, Sigmoid_1304_0, Multiply_1362_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_30_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_1119_0	type: float	shape: Shape{1, 256}
//	- name: Dot_275_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1271_0	type: float	shape: Shape{1}
//	- name: Dot_1117_0	type: float	shape: Shape{1, 256}
//	- name: Dot_273_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1118_0	type: float	shape: Shape{1, 256}
//	- name: Dot_274_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1120_0	type: float	shape: Shape{1, 256}
//	- name: Dot_276_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1357_0	type: float	shape: Shape{1, 256}
//	- name: Add_1341_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Add_float_float_float_cuda_Add_1175<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1119_0, Dot_275_0, Add_1175_0);
// Add_float_float_float_cuda_Add_1210<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1175_0, Reshape_1209_0, Add_1210_0);
// Broadcast_float_float_cuda_Broadcast_1272<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1271_0, Broadcast_1272_0);
// Add_float_float_float_cuda_Add_1273<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1210_0, Broadcast_1272_0, Add_1273_0);
// Sigmoid_float_float_cuda_Sigmoid_1318<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1273_0, Sigmoid_1318_0);
// Multiply_float_float_float_cuda_Multiply_1333<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_1318_0, Multiply_1333_0);
// Add_float_float_float_cuda_Add_1173<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1117_0, Dot_273_0, Add_1173_0);
// Add_float_float_float_cuda_Add_1206<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1173_0, Reshape_1205_0, Add_1206_0);
// Sigmoid_float_float_cuda_Sigmoid_1269<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1206_0, Sigmoid_1269_0);
// Add_float_float_float_cuda_Add_1174<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1118_0, Dot_274_0, Add_1174_0);
// Add_float_float_float_cuda_Add_1208<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1174_0, Reshape_1207_0, Add_1208_0);
// Tanh_float_float_cuda_Tanh_1270<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1208_0, Tanh_1270_0);
// Multiply_float_float_float_cuda_Multiply_1317<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1269_0, Tanh_1270_0, Multiply_1317_0);
// Add_float_float_float_cuda_Add_1341<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1333_0, Multiply_1317_0, Add_1341_0);
// Tanh_float_float_cuda_Tanh_1349<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1341_0, Tanh_1349_0);
// Add_float_float_float_cuda_Add_1176<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1120_0, Dot_276_0, Add_1176_0);
// Add_float_float_float_cuda_Add_1212<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1176_0, Reshape_1211_0, Add_1212_0);
// Sigmoid_float_float_cuda_Sigmoid_1274<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1212_0, Sigmoid_1274_0);
// Multiply_float_float_float_cuda_Multiply_1357<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1349_0, Sigmoid_1274_0, Multiply_1357_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Broadcast_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_28_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = input0[tid / 256];
    float temp1 = add(input1[tid], input2[tid]);
    float temp2 = add(temp1, input3[tid]);
    float temp3 = input4[tid % 1];
    float temp4 = add(temp2, temp3);
    float temp5 = sigmoid(temp4);
    float temp6 = mul(temp0, temp5);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_16(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* input84, float* input85, float* input86, float* input87, float* input88, float* input89, float* input90, float* input91, float* input92, float* input93, float* input94, float* input95, float* input96, float* input97, float* input98, float* input99, float* input100, float* input101, float* input102, float* input103, float* input104, float* input105, float* input106, float* input107, float* input108, float* input109, float* input110, float* input111, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_31_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_30_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output3, output4, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_30_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output5, output6, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output8, output7, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 5)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Broadcast_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_28_block_kernel(input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output10, output9, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 6)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32_block_kernel(input84, input85, input86, input87, input88, input89, input90, input91, input92, input93, input94, input95, input96, input97, output12, output11, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 7)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_32_block_kernel(input98, input99, input100, input101, input102, input103, input104, input105, input106, input107, input108, input109, input110, input111, output14, output13, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_16_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* input84, float* input85, float* input86, float* input87, float* input88, float* input89, float* input90, float* input91, float* input92, float* input93, float* input94, float* input95, float* input96, float* input97, float* input98, float* input99, float* input100, float* input101, float* input102, float* input103, float* input104, float* input105, float* input106, float* input107, float* input108, float* input109, float* input110, float* input111, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_16<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, input84, input85, input86, input87, input88, input89, input90, input91, input92, input93, input94, input95, input96, input97, input98, input99, input100, input101, input102, input103, input104, input105, input106, input107, input108, input109, input110, input111, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_1635_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1631_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1741_0	type: float	shape: Shape{1}
//	- name: Add_1573_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1633_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1629_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1634_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1630_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1636_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1632_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1627_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1623_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1735_0	type: float	shape: Shape{1}
//	- name: Add_1572_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1625_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1626_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1622_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1628_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1624_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1615_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1729_0	type: float	shape: Shape{1}
//	- name: Add_1571_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1613_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1618_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1614_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1620_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1616_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1595_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1591_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1711_0	type: float	shape: Shape{1}
//	- name: Add_1568_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1593_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1589_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1594_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1590_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1596_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1592_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1603_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1599_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1717_0	type: float	shape: Shape{1}
//	- name: Add_1569_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1601_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1597_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1602_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1598_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1604_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1600_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1611_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1607_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1723_0	type: float	shape: Shape{1}
//	- name: Add_1570_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1609_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1605_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1610_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1606_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1612_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1608_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1780_0	type: float	shape: Shape{1, 256}
//	- name: Add_1767_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1779_0	type: float	shape: Shape{1, 256}
//	- name: Add_1766_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1778_0	type: float	shape: Shape{1, 256}
//	- name: Add_1763_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1775_0	type: float	shape: Shape{1, 256}
//	- name: Add_1764_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1776_0	type: float	shape: Shape{1, 256}
//	- name: Add_1765_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1777_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_47<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1635_0, Dot_1631_0, Reshape_389_0, Reshape_1741_0, Add_1573_0, Dot_1633_0, Dot_1629_0, Reshape_385_0, Dot_1634_0, Dot_1630_0, Reshape_387_0, Dot_1636_0, Dot_1632_0, Reshape_391_0, Multiply_1780_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1627_0, Dot_1623_0, Reshape_489_0, Reshape_1735_0, Add_1572_0, Dot_1625_0, Dot_1621_0, Reshape_485_0, Dot_1626_0, Dot_1622_0, Reshape_487_0, Dot_1628_0, Dot_1624_0, Reshape_491_0, Add_1767_0, Multiply_1779_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_48<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1619_0, Dot_1615_0, Reshape_621_0, Reshape_1729_0, Add_1571_0, Dot_1617_0, Dot_1613_0, Reshape_617_0, Dot_1618_0, Dot_1614_0, Reshape_619_0, Dot_1620_0, Dot_1616_0, Reshape_623_0, Add_1766_0, Multiply_1778_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_43<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1595_0, Dot_1591_0, Reshape_1209_0, Reshape_1711_0, Add_1568_0, Dot_1593_0, Dot_1589_0, Reshape_1205_0, Dot_1594_0, Dot_1590_0, Reshape_1207_0, Dot_1596_0, Dot_1592_0, Reshape_1211_0, Multiply_1775_0, Add_1763_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_44<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1603_0, Dot_1599_0, Reshape_981_0, Reshape_1717_0, Add_1569_0, Dot_1601_0, Dot_1597_0, Reshape_977_0, Dot_1602_0, Dot_1598_0, Reshape_979_0, Dot_1604_0, Dot_1600_0, Reshape_983_0, Multiply_1776_0, Add_1764_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_45<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1611_0, Dot_1607_0, Reshape_785_0, Reshape_1723_0, Add_1570_0, Dot_1609_0, Dot_1605_0, Reshape_781_0, Dot_1610_0, Dot_1606_0, Reshape_783_0, Dot_1612_0, Dot_1608_0, Reshape_787_0, Add_1765_0, Multiply_1777_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_48 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_44 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_43
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_45 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1635_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1631_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1741_0	type: float	shape: Shape{1}
//	- name: Add_1573_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1633_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1629_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1634_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1630_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1636_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1632_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1780_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1659<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1635_0, Dot_1631_0, Add_1659_0);
// Add_float_float_float_cuda_Add_1706<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1659_0, Reshape_389_0, Add_1706_0);
// Broadcast_float_float_cuda_Broadcast_1742<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1741_0, Broadcast_1742_0);
// Add_float_float_float_cuda_Add_1743<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1706_0, Broadcast_1742_0, Add_1743_0);
// Sigmoid_float_float_cuda_Sigmoid_1756<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1743_0, Sigmoid_1756_0);
// Multiply_float_float_float_cuda_Multiply_1762<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1573_0, Sigmoid_1756_0, Multiply_1762_0);
// Add_float_float_float_cuda_Add_1657<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1633_0, Dot_1629_0, Add_1657_0);
// Add_float_float_float_cuda_Add_1702<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1657_0, Reshape_385_0, Add_1702_0);
// Sigmoid_float_float_cuda_Sigmoid_1739<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1702_0, Sigmoid_1739_0);
// Add_float_float_float_cuda_Add_1658<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1634_0, Dot_1630_0, Add_1658_0);
// Add_float_float_float_cuda_Add_1704<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1658_0, Reshape_387_0, Add_1704_0);
// Tanh_float_float_cuda_Tanh_1740<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1704_0, Tanh_1740_0);
// Multiply_float_float_float_cuda_Multiply_1755<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1739_0, Tanh_1740_0, Multiply_1755_0);
// Add_float_float_float_cuda_Add_1768<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1762_0, Multiply_1755_0, Add_1768_0);
// Tanh_float_float_cuda_Tanh_1774<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1768_0, Tanh_1774_0);
// Add_float_float_float_cuda_Add_1660<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1636_0, Dot_1632_0, Add_1660_0);
// Add_float_float_float_cuda_Add_1708<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1660_0, Reshape_391_0, Add_1708_0);
// Sigmoid_float_float_cuda_Sigmoid_1744<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1708_0, Sigmoid_1744_0);
// Multiply_float_float_float_cuda_Multiply_1780<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1774_0, Sigmoid_1744_0, Multiply_1780_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_47_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1627_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1623_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1735_0	type: float	shape: Shape{1}
//	- name: Add_1572_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1625_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1626_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1622_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1628_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1624_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_1767_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1779_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1655<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1627_0, Dot_1623_0, Add_1655_0);
// Add_float_float_float_cuda_Add_1698<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1655_0, Reshape_489_0, Add_1698_0);
// Broadcast_float_float_cuda_Broadcast_1736<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1735_0, Broadcast_1736_0);
// Add_float_float_float_cuda_Add_1737<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1698_0, Broadcast_1736_0, Add_1737_0);
// Sigmoid_float_float_cuda_Sigmoid_1754<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1737_0, Sigmoid_1754_0);
// Multiply_float_float_float_cuda_Multiply_1761<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1572_0, Sigmoid_1754_0, Multiply_1761_0);
// Add_float_float_float_cuda_Add_1653<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1625_0, Dot_1621_0, Add_1653_0);
// Add_float_float_float_cuda_Add_1694<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1653_0, Reshape_485_0, Add_1694_0);
// Sigmoid_float_float_cuda_Sigmoid_1733<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1694_0, Sigmoid_1733_0);
// Add_float_float_float_cuda_Add_1654<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1626_0, Dot_1622_0, Add_1654_0);
// Add_float_float_float_cuda_Add_1696<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1654_0, Reshape_487_0, Add_1696_0);
// Tanh_float_float_cuda_Tanh_1734<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1696_0, Tanh_1734_0);
// Multiply_float_float_float_cuda_Multiply_1753<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1733_0, Tanh_1734_0, Multiply_1753_0);
// Add_float_float_float_cuda_Add_1767<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1761_0, Multiply_1753_0, Add_1767_0);
// Tanh_float_float_cuda_Tanh_1773<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1767_0, Tanh_1773_0);
// Add_float_float_float_cuda_Add_1656<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1628_0, Dot_1624_0, Add_1656_0);
// Add_float_float_float_cuda_Add_1700<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1656_0, Reshape_491_0, Add_1700_0);
// Sigmoid_float_float_cuda_Sigmoid_1738<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1700_0, Sigmoid_1738_0);
// Multiply_float_float_float_cuda_Multiply_1779<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1773_0, Sigmoid_1738_0, Multiply_1779_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1595_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1591_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1711_0	type: float	shape: Shape{1}
//	- name: Add_1568_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1593_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1589_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1594_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1590_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1596_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1592_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1775_0	type: float	shape: Shape{1, 256}
//	- name: Add_1763_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1639<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1595_0, Dot_1591_0, Add_1639_0);
// Add_float_float_float_cuda_Add_1666<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1639_0, Reshape_1209_0, Add_1666_0);
// Broadcast_float_float_cuda_Broadcast_1712<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1711_0, Broadcast_1712_0);
// Add_float_float_float_cuda_Add_1713<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1666_0, Broadcast_1712_0, Add_1713_0);
// Sigmoid_float_float_cuda_Sigmoid_1746<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1713_0, Sigmoid_1746_0);
// Multiply_float_float_float_cuda_Multiply_1757<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1568_0, Sigmoid_1746_0, Multiply_1757_0);
// Add_float_float_float_cuda_Add_1637<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1593_0, Dot_1589_0, Add_1637_0);
// Add_float_float_float_cuda_Add_1662<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1637_0, Reshape_1205_0, Add_1662_0);
// Sigmoid_float_float_cuda_Sigmoid_1709<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1662_0, Sigmoid_1709_0);
// Add_float_float_float_cuda_Add_1638<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1594_0, Dot_1590_0, Add_1638_0);
// Add_float_float_float_cuda_Add_1664<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1638_0, Reshape_1207_0, Add_1664_0);
// Tanh_float_float_cuda_Tanh_1710<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1664_0, Tanh_1710_0);
// Multiply_float_float_float_cuda_Multiply_1745<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1709_0, Tanh_1710_0, Multiply_1745_0);
// Add_float_float_float_cuda_Add_1763<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1757_0, Multiply_1745_0, Add_1763_0);
// Tanh_float_float_cuda_Tanh_1769<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1763_0, Tanh_1769_0);
// Add_float_float_float_cuda_Add_1640<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1596_0, Dot_1592_0, Add_1640_0);
// Add_float_float_float_cuda_Add_1668<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1640_0, Reshape_1211_0, Add_1668_0);
// Sigmoid_float_float_cuda_Sigmoid_1714<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1668_0, Sigmoid_1714_0);
// Multiply_float_float_float_cuda_Multiply_1775<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1769_0, Sigmoid_1714_0, Multiply_1775_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_43_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_20(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_47_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output1, output2, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output3, output4, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_43_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output6, output5, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_43_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output8, output7, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 5)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_46_block_kernel(input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output9, output10, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_20_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_20<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10);
}
// Node name:	 BlockFusion
// Input:
//	- name: Broadcast_212_0	type: float	shape: Shape{1, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_257_0	type: float	shape: Shape{1, 256}
//	- name: Dot_258_0	type: float	shape: Shape{1, 256}
//	- name: Dot_256_0	type: float	shape: Shape{1, 256}
//	- name: Dot_267_0	type: float	shape: Shape{1, 256}
//	- name: Dot_245_0	type: float	shape: Shape{1, 256}
//	- name: Dot_246_0	type: float	shape: Shape{1, 256}
//	- name: Dot_247_0	type: float	shape: Shape{1, 256}
//	- name: Dot_248_0	type: float	shape: Shape{1, 256}
//	- name: Dot_249_0	type: float	shape: Shape{1, 256}
//	- name: Dot_250_0	type: float	shape: Shape{1, 256}
//	- name: Dot_251_0	type: float	shape: Shape{1, 256}
//	- name: Dot_252_0	type: float	shape: Shape{1, 256}
//	- name: Dot_253_0	type: float	shape: Shape{1, 256}
//	- name: Dot_254_0	type: float	shape: Shape{1, 256}
//	- name: Dot_255_0	type: float	shape: Shape{1, 256}
//	- name: Dot_259_0	type: float	shape: Shape{1, 256}
//	- name: Dot_260_0	type: float	shape: Shape{1, 256}
//	- name: Dot_261_0	type: float	shape: Shape{1, 256}
//	- name: Dot_262_0	type: float	shape: Shape{1, 256}
//	- name: Dot_263_0	type: float	shape: Shape{1, 256}
//	- name: Dot_264_0	type: float	shape: Shape{1, 256}
//	- name: Dot_265_0	type: float	shape: Shape{1, 256}
//	- name: Dot_266_0	type: float	shape: Shape{1, 256}
//	- name: Dot_268_0	type: float	shape: Shape{1, 256}
//	- name: Dot_269_0	type: float	shape: Shape{1, 256}
//	- name: Dot_270_0	type: float	shape: Shape{1, 256}
//	- name: Dot_271_0	type: float	shape: Shape{1, 256}
//	- name: Dot_272_0	type: float	shape: Shape{1, 256}
//	- name: Dot_273_0	type: float	shape: Shape{1, 256}
//	- name: Dot_274_0	type: float	shape: Shape{1, 256}
//	- name: Dot_275_0	type: float	shape: Shape{1, 256}
//	- name: Dot_276_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_257<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_37_0, Dot_257_0);
// Dot_float_float_float_cuda_Dot_258<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_40_0, Dot_258_0);
// Dot_float_float_float_cuda_Dot_256<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_34_0, Dot_256_0);
// Dot_float_float_float_cuda_Dot_267<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_67_0, Dot_267_0);
// Dot_float_float_float_cuda_Dot_245<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_1_0, Dot_245_0);
// Dot_float_float_float_cuda_Dot_246<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_4_0, Dot_246_0);
// Dot_float_float_float_cuda_Dot_247<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_7_0, Dot_247_0);
// Dot_float_float_float_cuda_Dot_248<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_10_0, Dot_248_0);
// Dot_float_float_float_cuda_Dot_249<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_13_0, Dot_249_0);
// Dot_float_float_float_cuda_Dot_250<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_16_0, Dot_250_0);
// Dot_float_float_float_cuda_Dot_251<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_19_0, Dot_251_0);
// Dot_float_float_float_cuda_Dot_252<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_22_0, Dot_252_0);
// Dot_float_float_float_cuda_Dot_253<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_25_0, Dot_253_0);
// Dot_float_float_float_cuda_Dot_254<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_28_0, Dot_254_0);
// Dot_float_float_float_cuda_Dot_255<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_31_0, Dot_255_0);
// Dot_float_float_float_cuda_Dot_259<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_43_0, Dot_259_0);
// Dot_float_float_float_cuda_Dot_260<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_46_0, Dot_260_0);
// Dot_float_float_float_cuda_Dot_261<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_49_0, Dot_261_0);
// Dot_float_float_float_cuda_Dot_262<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_52_0, Dot_262_0);
// Dot_float_float_float_cuda_Dot_263<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_55_0, Dot_263_0);
// Dot_float_float_float_cuda_Dot_264<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_58_0, Dot_264_0);
// Dot_float_float_float_cuda_Dot_265<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_61_0, Dot_265_0);
// Dot_float_float_float_cuda_Dot_266<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_64_0, Dot_266_0);
// Dot_float_float_float_cuda_Dot_268<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_70_0, Dot_268_0);
// Dot_float_float_float_cuda_Dot_269<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_73_0, Dot_269_0);
// Dot_float_float_float_cuda_Dot_270<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_76_0, Dot_270_0);
// Dot_float_float_float_cuda_Dot_271<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_79_0, Dot_271_0);
// Dot_float_float_float_cuda_Dot_272<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_82_0, Dot_272_0);
// Dot_float_float_float_cuda_Dot_273<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_85_0, Dot_273_0);
// Dot_float_float_float_cuda_Dot_274<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_88_0, Dot_274_0);
// Dot_float_float_float_cuda_Dot_275<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_91_0, Dot_275_0);
// Dot_float_float_float_cuda_Dot_276<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Broadcast_212_0, Constant_94_0, Dot_276_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_258 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_256 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_267 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_245 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_246 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_247 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_248 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_249 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_250 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_251 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_252 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_253 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_254 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_255 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_259 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_260 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_261 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_262 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_263 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_264 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_265 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_266 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_268 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_269 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_270 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_271 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_272 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_273 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_274 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_275 : Dot_float_float_float_cuda_Dot_257
// Dot_float_float_float_cuda_Dot_276 : Dot_float_float_float_cuda_Dot_257

// Node name:	Dot_257
// Description:	Dot
// Input:
//	- name: Broadcast_212_0	type: float	shape: Shape{1, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_257_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_257_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_1(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input9, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input10, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input11, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input12, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input13, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input14, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input15, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input16, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input17, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input18, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input19, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input20, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input21, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input22, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input23, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input24, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input25, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input26, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input27, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input28, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input29, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input30, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input31, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_257_block_kernel(input0, input32, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_1_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_1<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_239_0	type: float	shape: Shape{1, 256}
//	- name: Dot_947_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1071_0	type: float	shape: Shape{1}
//	- name: Add_888_0	type: float	shape: Shape{1, 256}
//	- name: Dot_237_0	type: float	shape: Shape{1, 256}
//	- name: Dot_945_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_238_0	type: float	shape: Shape{1, 256}
//	- name: Dot_946_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_240_0	type: float	shape: Shape{1, 256}
//	- name: Dot_948_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_943_0	type: float	shape: Shape{1, 256}
//	- name: Dot_939_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1065_0	type: float	shape: Shape{1}
//	- name: Add_887_0	type: float	shape: Shape{1, 256}
//	- name: Dot_941_0	type: float	shape: Shape{1, 256}
//	- name: Dot_937_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_942_0	type: float	shape: Shape{1, 256}
//	- name: Dot_938_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_944_0	type: float	shape: Shape{1, 256}
//	- name: Dot_940_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_935_0	type: float	shape: Shape{1, 256}
//	- name: Dot_931_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1059_0	type: float	shape: Shape{1}
//	- name: Add_886_0	type: float	shape: Shape{1, 256}
//	- name: Dot_933_0	type: float	shape: Shape{1, 256}
//	- name: Dot_929_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_934_0	type: float	shape: Shape{1, 256}
//	- name: Dot_930_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_936_0	type: float	shape: Shape{1, 256}
//	- name: Dot_932_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_927_0	type: float	shape: Shape{1, 256}
//	- name: Dot_923_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1053_0	type: float	shape: Shape{1}
//	- name: Add_885_0	type: float	shape: Shape{1, 256}
//	- name: Dot_925_0	type: float	shape: Shape{1, 256}
//	- name: Dot_921_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_926_0	type: float	shape: Shape{1, 256}
//	- name: Dot_922_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_928_0	type: float	shape: Shape{1, 256}
//	- name: Dot_924_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_919_0	type: float	shape: Shape{1, 256}
//	- name: Dot_915_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1047_0	type: float	shape: Shape{1}
//	- name: Add_884_0	type: float	shape: Shape{1, 256}
//	- name: Dot_917_0	type: float	shape: Shape{1, 256}
//	- name: Dot_913_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_918_0	type: float	shape: Shape{1, 256}
//	- name: Dot_914_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_920_0	type: float	shape: Shape{1, 256}
//	- name: Dot_916_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_903_0	type: float	shape: Shape{1, 256}
//	- name: Dot_271_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1035_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_901_0	type: float	shape: Shape{1, 256}
//	- name: Dot_269_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_902_0	type: float	shape: Shape{1, 256}
//	- name: Dot_270_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_904_0	type: float	shape: Shape{1, 256}
//	- name: Dot_272_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
//	- name: Dot_911_0	type: float	shape: Shape{1, 256}
//	- name: Dot_907_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1041_0	type: float	shape: Shape{1}
//	- name: Add_883_0	type: float	shape: Shape{1, 256}
//	- name: Dot_909_0	type: float	shape: Shape{1, 256}
//	- name: Dot_905_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_910_0	type: float	shape: Shape{1, 256}
//	- name: Dot_906_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_912_0	type: float	shape: Shape{1, 256}
//	- name: Dot_908_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_1102_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1116_0	type: float	shape: Shape{1, 256}
//	- name: Add_1101_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1115_0	type: float	shape: Shape{1, 256}
//	- name: Add_1100_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1114_0	type: float	shape: Shape{1, 256}
//	- name: Add_1099_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1113_0	type: float	shape: Shape{1, 256}
//	- name: Add_1098_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1112_0	type: float	shape: Shape{1, 256}
//	- name: Add_1096_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1110_0	type: float	shape: Shape{1, 256}
//	- name: Add_1097_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1111_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_239_0, Dot_947_0, Reshape_285_0, Reshape_1071_0, Add_888_0, Dot_237_0, Dot_945_0, Reshape_281_0, Dot_238_0, Dot_946_0, Reshape_283_0, Dot_240_0, Dot_948_0, Reshape_287_0, Add_1102_0, Multiply_1116_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_27<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_943_0, Dot_939_0, Reshape_321_0, Reshape_1065_0, Add_887_0, Dot_941_0, Dot_937_0, Reshape_317_0, Dot_942_0, Dot_938_0, Reshape_319_0, Dot_944_0, Dot_940_0, Reshape_323_0, Add_1101_0, Multiply_1115_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_26<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_935_0, Dot_931_0, Reshape_389_0, Reshape_1059_0, Add_886_0, Dot_933_0, Dot_929_0, Reshape_385_0, Dot_934_0, Dot_930_0, Reshape_387_0, Dot_936_0, Dot_932_0, Reshape_391_0, Add_1100_0, Multiply_1114_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_24<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_927_0, Dot_923_0, Reshape_489_0, Reshape_1053_0, Add_885_0, Dot_925_0, Dot_921_0, Reshape_485_0, Dot_926_0, Dot_922_0, Reshape_487_0, Dot_928_0, Dot_924_0, Reshape_491_0, Multiply_1113_0, Add_1099_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_22<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_919_0, Dot_915_0, Reshape_621_0, Reshape_1047_0, Add_884_0, Dot_917_0, Dot_913_0, Reshape_617_0, Dot_918_0, Dot_914_0, Reshape_619_0, Dot_920_0, Dot_916_0, Reshape_623_0, Add_1098_0, Multiply_1112_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_23<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_903_0, Dot_271_0, Reshape_981_0, Reshape_1035_0, Constant_100_0, Dot_901_0, Dot_269_0, Reshape_977_0, Dot_902_0, Dot_270_0, Reshape_979_0, Dot_904_0, Dot_272_0, Reshape_983_0, Multiply_1110_0, Add_1096_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_25<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_911_0, Dot_907_0, Reshape_785_0, Reshape_1041_0, Add_883_0, Dot_909_0, Dot_905_0, Reshape_781_0, Dot_910_0, Dot_906_0, Reshape_783_0, Dot_912_0, Dot_908_0, Reshape_787_0, Multiply_1111_0, Add_1097_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_27 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_26 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_22 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_25 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_24

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_239_0	type: float	shape: Shape{1, 256}
//	- name: Dot_947_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1071_0	type: float	shape: Shape{1}
//	- name: Add_888_0	type: float	shape: Shape{1, 256}
//	- name: Dot_237_0	type: float	shape: Shape{1, 256}
//	- name: Dot_945_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_238_0	type: float	shape: Shape{1, 256}
//	- name: Dot_946_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_240_0	type: float	shape: Shape{1, 256}
//	- name: Dot_948_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_1102_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1116_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_975<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_239_0, Dot_947_0, Add_975_0);
// Add_float_float_float_cuda_Add_1030<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_975_0, Reshape_285_0, Add_1030_0);
// Broadcast_float_float_cuda_Broadcast_1072<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1071_0, Broadcast_1072_0);
// Add_float_float_float_cuda_Add_1073<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1030_0, Broadcast_1072_0, Add_1073_0);
// Sigmoid_float_float_cuda_Sigmoid_1088<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1073_0, Sigmoid_1088_0);
// Multiply_float_float_float_cuda_Multiply_1095<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_888_0, Sigmoid_1088_0, Multiply_1095_0);
// Add_float_float_float_cuda_Add_973<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_237_0, Dot_945_0, Add_973_0);
// Add_float_float_float_cuda_Add_1026<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_973_0, Reshape_281_0, Add_1026_0);
// Sigmoid_float_float_cuda_Sigmoid_1069<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1026_0, Sigmoid_1069_0);
// Add_float_float_float_cuda_Add_974<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_238_0, Dot_946_0, Add_974_0);
// Add_float_float_float_cuda_Add_1028<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_974_0, Reshape_283_0, Add_1028_0);
// Tanh_float_float_cuda_Tanh_1070<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1028_0, Tanh_1070_0);
// Multiply_float_float_float_cuda_Multiply_1087<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1069_0, Tanh_1070_0, Multiply_1087_0);
// Add_float_float_float_cuda_Add_1102<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1095_0, Multiply_1087_0, Add_1102_0);
// Tanh_float_float_cuda_Tanh_1109<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1102_0, Tanh_1109_0);
// Add_float_float_float_cuda_Add_976<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_240_0, Dot_948_0, Add_976_0);
// Add_float_float_float_cuda_Add_1032<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_976_0, Reshape_287_0, Add_1032_0);
// Sigmoid_float_float_cuda_Sigmoid_1074<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1032_0, Sigmoid_1074_0);
// Multiply_float_float_float_cuda_Multiply_1116<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1109_0, Sigmoid_1074_0, Multiply_1116_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_927_0	type: float	shape: Shape{1, 256}
//	- name: Dot_923_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1053_0	type: float	shape: Shape{1}
//	- name: Add_885_0	type: float	shape: Shape{1, 256}
//	- name: Dot_925_0	type: float	shape: Shape{1, 256}
//	- name: Dot_921_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_926_0	type: float	shape: Shape{1, 256}
//	- name: Dot_922_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_928_0	type: float	shape: Shape{1, 256}
//	- name: Dot_924_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1113_0	type: float	shape: Shape{1, 256}
//	- name: Add_1099_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_963<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_927_0, Dot_923_0, Add_963_0);
// Add_float_float_float_cuda_Add_1006<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_963_0, Reshape_489_0, Add_1006_0);
// Broadcast_float_float_cuda_Broadcast_1054<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1053_0, Broadcast_1054_0);
// Add_float_float_float_cuda_Add_1055<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1006_0, Broadcast_1054_0, Add_1055_0);
// Sigmoid_float_float_cuda_Sigmoid_1082<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1055_0, Sigmoid_1082_0);
// Multiply_float_float_float_cuda_Multiply_1092<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_885_0, Sigmoid_1082_0, Multiply_1092_0);
// Add_float_float_float_cuda_Add_961<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_925_0, Dot_921_0, Add_961_0);
// Add_float_float_float_cuda_Add_1002<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_961_0, Reshape_485_0, Add_1002_0);
// Sigmoid_float_float_cuda_Sigmoid_1051<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1002_0, Sigmoid_1051_0);
// Add_float_float_float_cuda_Add_962<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_926_0, Dot_922_0, Add_962_0);
// Add_float_float_float_cuda_Add_1004<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_962_0, Reshape_487_0, Add_1004_0);
// Tanh_float_float_cuda_Tanh_1052<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1004_0, Tanh_1052_0);
// Multiply_float_float_float_cuda_Multiply_1081<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1051_0, Tanh_1052_0, Multiply_1081_0);
// Add_float_float_float_cuda_Add_1099<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1092_0, Multiply_1081_0, Add_1099_0);
// Tanh_float_float_cuda_Tanh_1106<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1099_0, Tanh_1106_0);
// Add_float_float_float_cuda_Add_964<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_928_0, Dot_924_0, Add_964_0);
// Add_float_float_float_cuda_Add_1008<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_964_0, Reshape_491_0, Add_1008_0);
// Sigmoid_float_float_cuda_Sigmoid_1056<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1008_0, Sigmoid_1056_0);
// Multiply_float_float_float_cuda_Multiply_1113<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1106_0, Sigmoid_1056_0, Multiply_1113_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_24_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_903_0	type: float	shape: Shape{1, 256}
//	- name: Dot_271_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1035_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_901_0	type: float	shape: Shape{1, 256}
//	- name: Dot_269_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_902_0	type: float	shape: Shape{1, 256}
//	- name: Dot_270_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_904_0	type: float	shape: Shape{1, 256}
//	- name: Dot_272_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1110_0	type: float	shape: Shape{1, 256}
//	- name: Add_1096_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_951<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_903_0, Dot_271_0, Add_951_0);
// Add_float_float_float_cuda_Add_982<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_951_0, Reshape_981_0, Add_982_0);
// Broadcast_float_float_cuda_Broadcast_1036<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1035_0, Broadcast_1036_0);
// Add_float_float_float_cuda_Add_1037<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_982_0, Broadcast_1036_0, Add_1037_0);
// Sigmoid_float_float_cuda_Sigmoid_1076<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1037_0, Sigmoid_1076_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_1089<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_1076_0, Multiply_1089_0);
// Add_float_float_float_cuda_Add_949<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_901_0, Dot_269_0, Add_949_0);
// Add_float_float_float_cuda_Add_978<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_949_0, Reshape_977_0, Add_978_0);
// Sigmoid_float_float_cuda_Sigmoid_1033<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_978_0, Sigmoid_1033_0);
// Add_float_float_float_cuda_Add_950<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_902_0, Dot_270_0, Add_950_0);
// Add_float_float_float_cuda_Add_980<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_950_0, Reshape_979_0, Add_980_0);
// Tanh_float_float_cuda_Tanh_1034<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_980_0, Tanh_1034_0);
// Multiply_float_float_float_cuda_Multiply_1075<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1033_0, Tanh_1034_0, Multiply_1075_0);
// Add_float_float_float_cuda_Add_1096<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1089_0, Multiply_1075_0, Add_1096_0);
// Tanh_float_float_cuda_Tanh_1103<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1096_0, Tanh_1103_0);
// Add_float_float_float_cuda_Add_952<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_904_0, Dot_272_0, Add_952_0);
// Add_float_float_float_cuda_Add_984<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_952_0, Reshape_983_0, Add_984_0);
// Sigmoid_float_float_cuda_Sigmoid_1038<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_984_0, Sigmoid_1038_0);
// Multiply_float_float_float_cuda_Multiply_1110<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1103_0, Sigmoid_1038_0, Multiply_1110_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_23_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_14(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* input84, float* input85, float* input86, float* input87, float* input88, float* input89, float* input90, float* input91, float* input92, float* input93, float* input94, float* input95, float* input96, float* input97, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output3, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output4, output5, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_24_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output7, output6, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_21_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output8, output9, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 5)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_23_block_kernel(input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, output11, output10, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 6)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_24_block_kernel(input84, input85, input86, input87, input88, input89, input90, input91, input92, input93, input94, input95, input96, input97, output13, output12, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_14_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* input70, float* input71, float* input72, float* input73, float* input74, float* input75, float* input76, float* input77, float* input78, float* input79, float* input80, float* input81, float* input82, float* input83, float* input84, float* input85, float* input86, float* input87, float* input88, float* input89, float* input90, float* input91, float* input92, float* input93, float* input94, float* input95, float* input96, float* input97, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_14<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, input70, input71, input72, input73, input74, input75, input76, input77, input78, input79, input80, input81, input82, input83, input84, input85, input86, input87, input88, input89, input90, input91, input92, input93, input94, input95, input96, input97, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_1780_0	type: float	shape: Shape{1, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1779_0	type: float	shape: Shape{1, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1778_0	type: float	shape: Shape{1, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1775_0	type: float	shape: Shape{1, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1776_0	type: float	shape: Shape{1, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1777_0	type: float	shape: Shape{1, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1820_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1819_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1818_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1817_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1816_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1815_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1814_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1813_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1812_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1811_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1810_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1809_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1808_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1804_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1803_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1806_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1807_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1802_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1805_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1801_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1784_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1782_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1787_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1786_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1790_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1785_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1792_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1789_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1791_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1788_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1800_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1798_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1797_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1799_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1796_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1795_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1793_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1794_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_1820<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1780_0, Constant_45_0, Dot_1820_0);
// Dot_float_float_float_cuda_Dot_1819<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1780_0, Constant_42_0, Dot_1819_0);
// Dot_float_float_float_cuda_Dot_1818<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1780_0, Constant_39_0, Dot_1818_0);
// Dot_float_float_float_cuda_Dot_1817<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1780_0, Constant_36_0, Dot_1817_0);
// Dot_float_float_float_cuda_Dot_1816<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_46_0, Dot_1816_0);
// Dot_float_float_float_cuda_Dot_1815<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_43_0, Dot_1815_0);
// Dot_float_float_float_cuda_Dot_1814<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_40_0, Dot_1814_0);
// Dot_float_float_float_cuda_Dot_1813<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_37_0, Dot_1813_0);
// Dot_float_float_float_cuda_Dot_1812<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_57_0, Dot_1812_0);
// Dot_float_float_float_cuda_Dot_1811<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_54_0, Dot_1811_0);
// Dot_float_float_float_cuda_Dot_1810<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_51_0, Dot_1810_0);
// Dot_float_float_float_cuda_Dot_1809<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1779_0, Constant_48_0, Dot_1809_0);
// Dot_float_float_float_cuda_Dot_1808<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_58_0, Dot_1808_0);
// Dot_float_float_float_cuda_Dot_1804<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_69_0, Dot_1804_0);
// Dot_float_float_float_cuda_Dot_1803<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_66_0, Dot_1803_0);
// Dot_float_float_float_cuda_Dot_1806<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_52_0, Dot_1806_0);
// Dot_float_float_float_cuda_Dot_1807<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_55_0, Dot_1807_0);
// Dot_float_float_float_cuda_Dot_1802<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_63_0, Dot_1802_0);
// Dot_float_float_float_cuda_Dot_1805<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_49_0, Dot_1805_0);
// Dot_float_float_float_cuda_Dot_1801<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1778_0, Constant_60_0, Dot_1801_0);
// Dot_float_float_float_cuda_Dot_1784<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1775_0, Constant_94_0, Dot_1784_0);
// Dot_float_float_float_cuda_Dot_1783<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1775_0, Constant_91_0, Dot_1783_0);
// Dot_float_float_float_cuda_Dot_1782<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1775_0, Constant_88_0, Dot_1782_0);
// Dot_float_float_float_cuda_Dot_1781<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1775_0, Constant_85_0, Dot_1781_0);
// Dot_float_float_float_cuda_Dot_1787<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_90_0, Dot_1787_0);
// Dot_float_float_float_cuda_Dot_1786<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_87_0, Dot_1786_0);
// Dot_float_float_float_cuda_Dot_1790<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_76_0, Dot_1790_0);
// Dot_float_float_float_cuda_Dot_1785<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_84_0, Dot_1785_0);
// Dot_float_float_float_cuda_Dot_1792<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_82_0, Dot_1792_0);
// Dot_float_float_float_cuda_Dot_1789<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_73_0, Dot_1789_0);
// Dot_float_float_float_cuda_Dot_1791<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_79_0, Dot_1791_0);
// Dot_float_float_float_cuda_Dot_1788<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1776_0, Constant_93_0, Dot_1788_0);
// Dot_float_float_float_cuda_Dot_1800<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_70_0, Dot_1800_0);
// Dot_float_float_float_cuda_Dot_1798<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_64_0, Dot_1798_0);
// Dot_float_float_float_cuda_Dot_1797<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_61_0, Dot_1797_0);
// Dot_float_float_float_cuda_Dot_1799<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_67_0, Dot_1799_0);
// Dot_float_float_float_cuda_Dot_1796<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_81_0, Dot_1796_0);
// Dot_float_float_float_cuda_Dot_1795<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_78_0, Dot_1795_0);
// Dot_float_float_float_cuda_Dot_1793<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_72_0, Dot_1793_0);
// Dot_float_float_float_cuda_Dot_1794<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1777_0, Constant_75_0, Dot_1794_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_1819 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1818 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1817 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1816 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1815 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1814 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1813 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1812 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1811 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1810 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1809 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1808 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1804 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1803 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1806 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1807 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1802 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1805 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1801 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1784 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1783 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1782 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1781 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1787 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1786 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1790 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1785 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1792 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1789 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1791 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1788 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1800 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1798 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1797 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1799 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1796 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1795 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1793 : Dot_float_float_float_cuda_Dot_1820
// Dot_float_float_float_cuda_Dot_1794 : Dot_float_float_float_cuda_Dot_1820

// Node name:	Dot_1820
// Description:	Dot
// Input:
//	- name: Multiply_1780_0	type: float	shape: Shape{1, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1820_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_1820_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_21(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input5, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input15, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input16, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input17, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input18, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input14, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input23, input24, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input23, input25, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input23, input26, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input23, input27, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input29, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input30, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input31, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input32, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input33, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input34, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input35, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input28, input36, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 256 && (int)blockIdx.x <= 263)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input38, output32, threadIdx.x, blockIdx.x - 256 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 264 && (int)blockIdx.x <= 271)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input39, output33, threadIdx.x, blockIdx.x - 264 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 272 && (int)blockIdx.x <= 279)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input40, output34, threadIdx.x, blockIdx.x - 272 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 280 && (int)blockIdx.x <= 287)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input41, output35, threadIdx.x, blockIdx.x - 280 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 288 && (int)blockIdx.x <= 295)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input42, output36, threadIdx.x, blockIdx.x - 288 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 296 && (int)blockIdx.x <= 303)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input43, output37, threadIdx.x, blockIdx.x - 296 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 304 && (int)blockIdx.x <= 311)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input44, output38, threadIdx.x, blockIdx.x - 304 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 312 && (int)blockIdx.x <= 319)
    {
        Dot_float_float_float_cuda_Dot_1820_block_kernel(input37, input45, output39, threadIdx.x, blockIdx.x - 312 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_21_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_21<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31, output32, output33, output34, output35, output36, output37, output38, output39);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_219_0	type: float	shape: Shape{1, 256}
//	- name: Dot_307_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_341_0	type: float	shape: Shape{1}
//	- name: Add_298_0	type: float	shape: Shape{1, 256}
//	- name: Dot_217_0	type: float	shape: Shape{1, 256}
//	- name: Dot_305_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_218_0	type: float	shape: Shape{1, 256}
//	- name: Dot_306_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_220_0	type: float	shape: Shape{1, 256}
//	- name: Dot_308_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_303_0	type: float	shape: Shape{1, 256}
//	- name: Dot_251_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_335_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_301_0	type: float	shape: Shape{1, 256}
//	- name: Dot_249_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_302_0	type: float	shape: Shape{1, 256}
//	- name: Dot_250_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_304_0	type: float	shape: Shape{1, 256}
//	- name: Dot_252_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_352_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_356_0	type: float	shape: Shape{1, 256}
//	- name: Add_351_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_355_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_2<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_219_0, Dot_307_0, Reshape_285_0, Reshape_341_0, Add_298_0, Dot_217_0, Dot_305_0, Reshape_281_0, Dot_218_0, Dot_306_0, Reshape_283_0, Dot_220_0, Dot_308_0, Reshape_287_0, Add_352_0, Multiply_356_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_1<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_303_0, Dot_251_0, Reshape_321_0, Reshape_335_0, Constant_100_0, Dot_301_0, Dot_249_0, Reshape_317_0, Dot_302_0, Dot_250_0, Reshape_319_0, Dot_304_0, Dot_252_0, Reshape_323_0, Multiply_355_0, Add_351_0);
// Deduped function map: <src_function_name : deduped_function_name>

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_219_0	type: float	shape: Shape{1, 256}
//	- name: Dot_307_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_341_0	type: float	shape: Shape{1}
//	- name: Add_298_0	type: float	shape: Shape{1, 256}
//	- name: Dot_217_0	type: float	shape: Shape{1, 256}
//	- name: Dot_305_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_218_0	type: float	shape: Shape{1, 256}
//	- name: Dot_306_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_220_0	type: float	shape: Shape{1, 256}
//	- name: Dot_308_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_352_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_356_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_315<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_219_0, Dot_307_0, Add_315_0);
// Add_float_float_float_cuda_Add_330<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_315_0, Reshape_285_0, Add_330_0);
// Broadcast_float_float_cuda_Broadcast_342<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_341_0, Broadcast_342_0);
// Add_float_float_float_cuda_Add_343<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_330_0, Broadcast_342_0, Add_343_0);
// Sigmoid_float_float_cuda_Sigmoid_348<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_343_0, Sigmoid_348_0);
// Multiply_float_float_float_cuda_Multiply_350<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_298_0, Sigmoid_348_0, Multiply_350_0);
// Add_float_float_float_cuda_Add_313<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_217_0, Dot_305_0, Add_313_0);
// Add_float_float_float_cuda_Add_326<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_313_0, Reshape_281_0, Add_326_0);
// Sigmoid_float_float_cuda_Sigmoid_339<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_326_0, Sigmoid_339_0);
// Add_float_float_float_cuda_Add_314<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_218_0, Dot_306_0, Add_314_0);
// Add_float_float_float_cuda_Add_328<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_314_0, Reshape_283_0, Add_328_0);
// Tanh_float_float_cuda_Tanh_340<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_328_0, Tanh_340_0);
// Multiply_float_float_float_cuda_Multiply_347<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_339_0, Tanh_340_0, Multiply_347_0);
// Add_float_float_float_cuda_Add_352<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_350_0, Multiply_347_0, Add_352_0);
// Tanh_float_float_cuda_Tanh_354<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_352_0, Tanh_354_0);
// Add_float_float_float_cuda_Add_316<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_220_0, Dot_308_0, Add_316_0);
// Add_float_float_float_cuda_Add_332<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_316_0, Reshape_287_0, Add_332_0);
// Sigmoid_float_float_cuda_Sigmoid_344<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_332_0, Sigmoid_344_0);
// Multiply_float_float_float_cuda_Multiply_356<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_354_0, Sigmoid_344_0, Multiply_356_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_2_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_303_0	type: float	shape: Shape{1, 256}
//	- name: Dot_251_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_335_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_301_0	type: float	shape: Shape{1, 256}
//	- name: Dot_249_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_302_0	type: float	shape: Shape{1, 256}
//	- name: Dot_250_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_304_0	type: float	shape: Shape{1, 256}
//	- name: Dot_252_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_355_0	type: float	shape: Shape{1, 256}
//	- name: Add_351_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_311<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_303_0, Dot_251_0, Add_311_0);
// Add_float_float_float_cuda_Add_322<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_311_0, Reshape_321_0, Add_322_0);
// Broadcast_float_float_cuda_Broadcast_336<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_335_0, Broadcast_336_0);
// Add_float_float_float_cuda_Add_337<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_322_0, Broadcast_336_0, Add_337_0);
// Sigmoid_float_float_cuda_Sigmoid_346<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_337_0, Sigmoid_346_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_349<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_346_0, Multiply_349_0);
// Add_float_float_float_cuda_Add_309<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_301_0, Dot_249_0, Add_309_0);
// Add_float_float_float_cuda_Add_318<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_309_0, Reshape_317_0, Add_318_0);
// Sigmoid_float_float_cuda_Sigmoid_333<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_318_0, Sigmoid_333_0);
// Add_float_float_float_cuda_Add_310<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_302_0, Dot_250_0, Add_310_0);
// Add_float_float_float_cuda_Add_320<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_310_0, Reshape_319_0, Add_320_0);
// Tanh_float_float_cuda_Tanh_334<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_320_0, Tanh_334_0);
// Multiply_float_float_float_cuda_Multiply_345<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_333_0, Tanh_334_0, Multiply_345_0);
// Add_float_float_float_cuda_Add_351<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_349_0, Multiply_345_0, Add_351_0);
// Tanh_float_float_cuda_Tanh_353<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_351_0, Tanh_353_0);
// Add_float_float_float_cuda_Add_312<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_304_0, Dot_252_0, Add_312_0);
// Add_float_float_float_cuda_Add_324<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_312_0, Reshape_323_0, Add_324_0);
// Sigmoid_float_float_cuda_Sigmoid_338<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_324_0, Sigmoid_338_0);
// Multiply_float_float_float_cuda_Multiply_355<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_353_0, Sigmoid_338_0, Multiply_355_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_1_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_4(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* output0, float* output1, float* output2, float* output3)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_2_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_1_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output3, output2, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_4_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* output0, float* output1, float* output2, float* output3) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_4<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output0, output1, output2, output3);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_2228_0	type: float	shape: Shape{1, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_2227_0	type: float	shape: Shape{1, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_2233_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2235_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2234_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2236_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2230_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2232_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2229_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2231_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_2233<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2228_0, Constant_84_0, Dot_2233_0);
// Dot_float_float_float_cuda_Dot_2235<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2228_0, Constant_90_0, Dot_2235_0);
// Dot_float_float_float_cuda_Dot_2234<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2228_0, Constant_87_0, Dot_2234_0);
// Dot_float_float_float_cuda_Dot_2236<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2228_0, Constant_93_0, Dot_2236_0);
// Dot_float_float_float_cuda_Dot_2230<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2227_0, Constant_88_0, Dot_2230_0);
// Dot_float_float_float_cuda_Dot_2232<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2227_0, Constant_94_0, Dot_2232_0);
// Dot_float_float_float_cuda_Dot_2229<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2227_0, Constant_85_0, Dot_2229_0);
// Dot_float_float_float_cuda_Dot_2231<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2227_0, Constant_91_0, Dot_2231_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_2235 : Dot_float_float_float_cuda_Dot_2233
// Dot_float_float_float_cuda_Dot_2234 : Dot_float_float_float_cuda_Dot_2233
// Dot_float_float_float_cuda_Dot_2236 : Dot_float_float_float_cuda_Dot_2233
// Dot_float_float_float_cuda_Dot_2230 : Dot_float_float_float_cuda_Dot_2233
// Dot_float_float_float_cuda_Dot_2232 : Dot_float_float_float_cuda_Dot_2233
// Dot_float_float_float_cuda_Dot_2229 : Dot_float_float_float_cuda_Dot_2233
// Dot_float_float_float_cuda_Dot_2231 : Dot_float_float_float_cuda_Dot_2233

// Node name:	Dot_2233
// Description:	Dot
// Input:
//	- name: Multiply_2228_0	type: float	shape: Shape{1, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_2233_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_2233_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_29(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_2233_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_29_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_29<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, output0, output1, output2, output3, output4, output5, output6, output7);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_1819_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1815_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1907_0	type: float	shape: Shape{1}
//	- name: Add_1767_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1817_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1813_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1818_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1814_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1820_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1816_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1811_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1807_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1901_0	type: float	shape: Shape{1}
//	- name: Add_1766_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1809_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1805_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1810_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1806_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1812_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1808_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1787_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1783_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1883_0	type: float	shape: Shape{1}
//	- name: Add_1763_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1785_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1781_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1786_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1782_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1788_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1784_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1803_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1799_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1895_0	type: float	shape: Shape{1}
//	- name: Add_1765_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1801_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1797_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1802_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1798_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1804_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1800_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1795_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1791_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1889_0	type: float	shape: Shape{1}
//	- name: Add_1764_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1793_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1789_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1794_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1790_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1796_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1792_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1940_0	type: float	shape: Shape{1, 256}
//	- name: Add_1929_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1939_0	type: float	shape: Shape{1, 256}
//	- name: Add_1926_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1936_0	type: float	shape: Shape{1, 256}
//	- name: Add_1928_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1938_0	type: float	shape: Shape{1, 256}
//	- name: Add_1927_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1937_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_49<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1819_0, Dot_1815_0, Reshape_489_0, Reshape_1907_0, Add_1767_0, Dot_1817_0, Dot_1813_0, Reshape_485_0, Dot_1818_0, Dot_1814_0, Reshape_487_0, Dot_1820_0, Dot_1816_0, Reshape_491_0, Multiply_1940_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1811_0, Dot_1807_0, Reshape_621_0, Reshape_1901_0, Add_1766_0, Dot_1809_0, Dot_1805_0, Reshape_617_0, Dot_1810_0, Dot_1806_0, Reshape_619_0, Dot_1812_0, Dot_1808_0, Reshape_623_0, Multiply_1939_0, Add_1929_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_53<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1787_0, Dot_1783_0, Reshape_1209_0, Reshape_1883_0, Add_1763_0, Dot_1785_0, Dot_1781_0, Reshape_1205_0, Dot_1786_0, Dot_1782_0, Reshape_1207_0, Dot_1788_0, Dot_1784_0, Reshape_1211_0, Multiply_1936_0, Add_1926_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_52<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1803_0, Dot_1799_0, Reshape_785_0, Reshape_1895_0, Add_1765_0, Dot_1801_0, Dot_1797_0, Reshape_781_0, Dot_1802_0, Dot_1798_0, Reshape_783_0, Dot_1804_0, Dot_1800_0, Reshape_787_0, Multiply_1938_0, Add_1928_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_51<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1795_0, Dot_1791_0, Reshape_981_0, Reshape_1889_0, Add_1764_0, Dot_1793_0, Dot_1789_0, Reshape_977_0, Dot_1794_0, Dot_1790_0, Reshape_979_0, Dot_1796_0, Dot_1792_0, Reshape_983_0, Add_1927_0, Multiply_1937_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_53 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_52 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1819_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1815_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1907_0	type: float	shape: Shape{1}
//	- name: Add_1767_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1817_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1813_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1818_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1814_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1820_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1816_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1940_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1839<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1819_0, Dot_1815_0, Add_1839_0);
// Add_float_float_float_cuda_Add_1878<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1839_0, Reshape_489_0, Add_1878_0);
// Broadcast_float_float_cuda_Broadcast_1908<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1907_0, Broadcast_1908_0);
// Add_float_float_float_cuda_Add_1909<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1878_0, Broadcast_1908_0, Add_1909_0);
// Sigmoid_float_float_cuda_Sigmoid_1920<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1909_0, Sigmoid_1920_0);
// Multiply_float_float_float_cuda_Multiply_1925<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1767_0, Sigmoid_1920_0, Multiply_1925_0);
// Add_float_float_float_cuda_Add_1837<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1817_0, Dot_1813_0, Add_1837_0);
// Add_float_float_float_cuda_Add_1874<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1837_0, Reshape_485_0, Add_1874_0);
// Sigmoid_float_float_cuda_Sigmoid_1905<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1874_0, Sigmoid_1905_0);
// Add_float_float_float_cuda_Add_1838<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1818_0, Dot_1814_0, Add_1838_0);
// Add_float_float_float_cuda_Add_1876<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1838_0, Reshape_487_0, Add_1876_0);
// Tanh_float_float_cuda_Tanh_1906<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1876_0, Tanh_1906_0);
// Multiply_float_float_float_cuda_Multiply_1919<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1905_0, Tanh_1906_0, Multiply_1919_0);
// Add_float_float_float_cuda_Add_1930<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1925_0, Multiply_1919_0, Add_1930_0);
// Tanh_float_float_cuda_Tanh_1935<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1930_0, Tanh_1935_0);
// Add_float_float_float_cuda_Add_1840<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1820_0, Dot_1816_0, Add_1840_0);
// Add_float_float_float_cuda_Add_1880<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1840_0, Reshape_491_0, Add_1880_0);
// Sigmoid_float_float_cuda_Sigmoid_1910<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1880_0, Sigmoid_1910_0);
// Multiply_float_float_float_cuda_Multiply_1940<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1935_0, Sigmoid_1910_0, Multiply_1940_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_49_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1811_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1807_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1901_0	type: float	shape: Shape{1}
//	- name: Add_1766_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1809_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1805_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1810_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1806_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1812_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1808_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_1939_0	type: float	shape: Shape{1, 256}
//	- name: Add_1929_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1835<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1811_0, Dot_1807_0, Add_1835_0);
// Add_float_float_float_cuda_Add_1870<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1835_0, Reshape_621_0, Add_1870_0);
// Broadcast_float_float_cuda_Broadcast_1902<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1901_0, Broadcast_1902_0);
// Add_float_float_float_cuda_Add_1903<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1870_0, Broadcast_1902_0, Add_1903_0);
// Sigmoid_float_float_cuda_Sigmoid_1918<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1903_0, Sigmoid_1918_0);
// Multiply_float_float_float_cuda_Multiply_1924<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1766_0, Sigmoid_1918_0, Multiply_1924_0);
// Add_float_float_float_cuda_Add_1833<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1809_0, Dot_1805_0, Add_1833_0);
// Add_float_float_float_cuda_Add_1866<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1833_0, Reshape_617_0, Add_1866_0);
// Sigmoid_float_float_cuda_Sigmoid_1899<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1866_0, Sigmoid_1899_0);
// Add_float_float_float_cuda_Add_1834<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1810_0, Dot_1806_0, Add_1834_0);
// Add_float_float_float_cuda_Add_1868<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1834_0, Reshape_619_0, Add_1868_0);
// Tanh_float_float_cuda_Tanh_1900<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1868_0, Tanh_1900_0);
// Multiply_float_float_float_cuda_Multiply_1917<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1899_0, Tanh_1900_0, Multiply_1917_0);
// Add_float_float_float_cuda_Add_1929<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1924_0, Multiply_1917_0, Add_1929_0);
// Tanh_float_float_cuda_Tanh_1934<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1929_0, Tanh_1934_0);
// Add_float_float_float_cuda_Add_1836<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1812_0, Dot_1808_0, Add_1836_0);
// Add_float_float_float_cuda_Add_1872<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1836_0, Reshape_623_0, Add_1872_0);
// Sigmoid_float_float_cuda_Sigmoid_1904<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1872_0, Sigmoid_1904_0);
// Multiply_float_float_float_cuda_Multiply_1939<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1934_0, Sigmoid_1904_0, Multiply_1939_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1795_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1791_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1889_0	type: float	shape: Shape{1}
//	- name: Add_1764_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1793_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1789_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1794_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1790_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1796_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1792_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_1927_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_1937_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1827<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1795_0, Dot_1791_0, Add_1827_0);
// Add_float_float_float_cuda_Add_1854<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1827_0, Reshape_981_0, Add_1854_0);
// Broadcast_float_float_cuda_Broadcast_1890<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_1889_0, Broadcast_1890_0);
// Add_float_float_float_cuda_Add_1891<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1854_0, Broadcast_1890_0, Add_1891_0);
// Sigmoid_float_float_cuda_Sigmoid_1914<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1891_0, Sigmoid_1914_0);
// Multiply_float_float_float_cuda_Multiply_1922<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1764_0, Sigmoid_1914_0, Multiply_1922_0);
// Add_float_float_float_cuda_Add_1825<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1793_0, Dot_1789_0, Add_1825_0);
// Add_float_float_float_cuda_Add_1850<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1825_0, Reshape_977_0, Add_1850_0);
// Sigmoid_float_float_cuda_Sigmoid_1887<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1850_0, Sigmoid_1887_0);
// Add_float_float_float_cuda_Add_1826<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1794_0, Dot_1790_0, Add_1826_0);
// Add_float_float_float_cuda_Add_1852<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1826_0, Reshape_979_0, Add_1852_0);
// Tanh_float_float_cuda_Tanh_1888<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1852_0, Tanh_1888_0);
// Multiply_float_float_float_cuda_Multiply_1913<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_1887_0, Tanh_1888_0, Multiply_1913_0);
// Add_float_float_float_cuda_Add_1927<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_1922_0, Multiply_1913_0, Add_1927_0);
// Tanh_float_float_cuda_Tanh_1932<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1927_0, Tanh_1932_0);
// Add_float_float_float_cuda_Add_1828<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1796_0, Dot_1792_0, Add_1828_0);
// Add_float_float_float_cuda_Add_1856<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1828_0, Reshape_983_0, Add_1856_0);
// Sigmoid_float_float_cuda_Sigmoid_1892<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1856_0, Sigmoid_1892_0);
// Multiply_float_float_float_cuda_Multiply_1937<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_1932_0, Sigmoid_1892_0, Multiply_1937_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_51_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_22(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_49_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output4, output3, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_50_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output6, output5, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_51_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output7, output8, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_22_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_22<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output0, output1, output2, output3, output4, output5, output6, output7, output8);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_1116_0	type: float	shape: Shape{1, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1115_0	type: float	shape: Shape{1, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1114_0	type: float	shape: Shape{1, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1113_0	type: float	shape: Shape{1, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1112_0	type: float	shape: Shape{1, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1110_0	type: float	shape: Shape{1, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1111_0	type: float	shape: Shape{1, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1165_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1172_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1167_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1170_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1171_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1168_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1166_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1169_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1163_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1161_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1160_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1159_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1164_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1162_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1158_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1157_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1149_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1154_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1153_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1151_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1152_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1150_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1156_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1155_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1148_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1147_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1146_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1145_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1143_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1144_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1142_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1141_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1135_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1137_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1139_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1140_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1138_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1136_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1134_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1133_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1124_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1123_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1121_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1122_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1117_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1120_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1119_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1118_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1131_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1130_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1128_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1129_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1126_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1127_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1125_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1132_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_1165<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_12_0, Dot_1165_0);
// Dot_float_float_float_cuda_Dot_1172<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_10_0, Dot_1172_0);
// Dot_float_float_float_cuda_Dot_1167<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_18_0, Dot_1167_0);
// Dot_float_float_float_cuda_Dot_1170<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_4_0, Dot_1170_0);
// Dot_float_float_float_cuda_Dot_1171<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_7_0, Dot_1171_0);
// Dot_float_float_float_cuda_Dot_1168<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_21_0, Dot_1168_0);
// Dot_float_float_float_cuda_Dot_1166<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_15_0, Dot_1166_0);
// Dot_float_float_float_cuda_Dot_1169<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1116_0, Constant_1_0, Dot_1169_0);
// Dot_float_float_float_cuda_Dot_1163<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_19_0, Dot_1163_0);
// Dot_float_float_float_cuda_Dot_1161<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_13_0, Dot_1161_0);
// Dot_float_float_float_cuda_Dot_1160<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_33_0, Dot_1160_0);
// Dot_float_float_float_cuda_Dot_1159<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_30_0, Dot_1159_0);
// Dot_float_float_float_cuda_Dot_1164<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_22_0, Dot_1164_0);
// Dot_float_float_float_cuda_Dot_1162<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_16_0, Dot_1162_0);
// Dot_float_float_float_cuda_Dot_1158<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_27_0, Dot_1158_0);
// Dot_float_float_float_cuda_Dot_1157<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1115_0, Constant_24_0, Dot_1157_0);
// Dot_float_float_float_cuda_Dot_1149<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_36_0, Dot_1149_0);
// Dot_float_float_float_cuda_Dot_1154<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_28_0, Dot_1154_0);
// Dot_float_float_float_cuda_Dot_1153<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_25_0, Dot_1153_0);
// Dot_float_float_float_cuda_Dot_1151<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_42_0, Dot_1151_0);
// Dot_float_float_float_cuda_Dot_1152<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_45_0, Dot_1152_0);
// Dot_float_float_float_cuda_Dot_1150<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_39_0, Dot_1150_0);
// Dot_float_float_float_cuda_Dot_1156<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_34_0, Dot_1156_0);
// Dot_float_float_float_cuda_Dot_1155<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1114_0, Constant_31_0, Dot_1155_0);
// Dot_float_float_float_cuda_Dot_1148<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_46_0, Dot_1148_0);
// Dot_float_float_float_cuda_Dot_1147<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_43_0, Dot_1147_0);
// Dot_float_float_float_cuda_Dot_1146<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_40_0, Dot_1146_0);
// Dot_float_float_float_cuda_Dot_1145<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_37_0, Dot_1145_0);
// Dot_float_float_float_cuda_Dot_1143<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_54_0, Dot_1143_0);
// Dot_float_float_float_cuda_Dot_1144<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_57_0, Dot_1144_0);
// Dot_float_float_float_cuda_Dot_1142<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_51_0, Dot_1142_0);
// Dot_float_float_float_cuda_Dot_1141<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1113_0, Constant_48_0, Dot_1141_0);
// Dot_float_float_float_cuda_Dot_1135<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_66_0, Dot_1135_0);
// Dot_float_float_float_cuda_Dot_1137<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_49_0, Dot_1137_0);
// Dot_float_float_float_cuda_Dot_1139<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_55_0, Dot_1139_0);
// Dot_float_float_float_cuda_Dot_1140<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_58_0, Dot_1140_0);
// Dot_float_float_float_cuda_Dot_1138<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_52_0, Dot_1138_0);
// Dot_float_float_float_cuda_Dot_1136<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_69_0, Dot_1136_0);
// Dot_float_float_float_cuda_Dot_1134<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_63_0, Dot_1134_0);
// Dot_float_float_float_cuda_Dot_1133<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1112_0, Constant_60_0, Dot_1133_0);
// Dot_float_float_float_cuda_Dot_1124<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_82_0, Dot_1124_0);
// Dot_float_float_float_cuda_Dot_1123<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_79_0, Dot_1123_0);
// Dot_float_float_float_cuda_Dot_1121<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_73_0, Dot_1121_0);
// Dot_float_float_float_cuda_Dot_1122<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_76_0, Dot_1122_0);
// Dot_float_float_float_cuda_Dot_1117<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_84_0, Dot_1117_0);
// Dot_float_float_float_cuda_Dot_1120<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_93_0, Dot_1120_0);
// Dot_float_float_float_cuda_Dot_1119<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_90_0, Dot_1119_0);
// Dot_float_float_float_cuda_Dot_1118<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1110_0, Constant_87_0, Dot_1118_0);
// Dot_float_float_float_cuda_Dot_1131<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_67_0, Dot_1131_0);
// Dot_float_float_float_cuda_Dot_1130<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_64_0, Dot_1130_0);
// Dot_float_float_float_cuda_Dot_1128<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_81_0, Dot_1128_0);
// Dot_float_float_float_cuda_Dot_1129<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_61_0, Dot_1129_0);
// Dot_float_float_float_cuda_Dot_1126<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_75_0, Dot_1126_0);
// Dot_float_float_float_cuda_Dot_1127<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_78_0, Dot_1127_0);
// Dot_float_float_float_cuda_Dot_1125<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_72_0, Dot_1125_0);
// Dot_float_float_float_cuda_Dot_1132<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1111_0, Constant_70_0, Dot_1132_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_1172 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1167 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1170 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1171 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1168 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1166 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1169 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1163 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1161 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1160 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1159 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1164 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1162 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1158 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1157 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1149 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1154 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1153 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1151 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1152 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1150 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1156 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1155 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1148 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1147 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1146 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1145 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1143 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1144 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1142 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1141 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1135 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1137 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1139 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1140 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1138 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1136 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1134 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1133 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1124 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1123 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1121 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1122 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1117 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1120 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1119 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1118 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1131 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1130 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1128 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1129 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1126 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1127 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1125 : Dot_float_float_float_cuda_Dot_1165
// Dot_float_float_float_cuda_Dot_1132 : Dot_float_float_float_cuda_Dot_1165

// Node name:	Dot_1165
// Description:	Dot
// Input:
//	- name: Multiply_1116_0	type: float	shape: Shape{1, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1165_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_1165_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_15(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47, float* output48, float* output49, float* output50, float* output51, float* output52, float* output53, float* output54, float* output55)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input14, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input15, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input16, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input9, input17, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input23, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input24, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input25, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input18, input26, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input28, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input29, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input30, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input31, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input32, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input33, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input34, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input27, input35, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 256 && (int)blockIdx.x <= 263)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input37, output32, threadIdx.x, blockIdx.x - 256 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 264 && (int)blockIdx.x <= 271)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input38, output33, threadIdx.x, blockIdx.x - 264 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 272 && (int)blockIdx.x <= 279)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input39, output34, threadIdx.x, blockIdx.x - 272 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 280 && (int)blockIdx.x <= 287)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input40, output35, threadIdx.x, blockIdx.x - 280 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 288 && (int)blockIdx.x <= 295)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input41, output36, threadIdx.x, blockIdx.x - 288 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 296 && (int)blockIdx.x <= 303)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input42, output37, threadIdx.x, blockIdx.x - 296 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 304 && (int)blockIdx.x <= 311)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input43, output38, threadIdx.x, blockIdx.x - 304 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 312 && (int)blockIdx.x <= 319)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input36, input44, output39, threadIdx.x, blockIdx.x - 312 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 320 && (int)blockIdx.x <= 327)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input46, output40, threadIdx.x, blockIdx.x - 320 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 328 && (int)blockIdx.x <= 335)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input47, output41, threadIdx.x, blockIdx.x - 328 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 336 && (int)blockIdx.x <= 343)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input48, output42, threadIdx.x, blockIdx.x - 336 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 344 && (int)blockIdx.x <= 351)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input49, output43, threadIdx.x, blockIdx.x - 344 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 352 && (int)blockIdx.x <= 359)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input50, output44, threadIdx.x, blockIdx.x - 352 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 360 && (int)blockIdx.x <= 367)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input51, output45, threadIdx.x, blockIdx.x - 360 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 368 && (int)blockIdx.x <= 375)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input52, output46, threadIdx.x, blockIdx.x - 368 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 376 && (int)blockIdx.x <= 383)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input45, input53, output47, threadIdx.x, blockIdx.x - 376 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 384 && (int)blockIdx.x <= 391)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input55, output48, threadIdx.x, blockIdx.x - 384 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 392 && (int)blockIdx.x <= 399)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input56, output49, threadIdx.x, blockIdx.x - 392 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 400 && (int)blockIdx.x <= 407)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input57, output50, threadIdx.x, blockIdx.x - 400 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 408 && (int)blockIdx.x <= 415)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input58, output51, threadIdx.x, blockIdx.x - 408 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 416 && (int)blockIdx.x <= 423)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input59, output52, threadIdx.x, blockIdx.x - 416 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 424 && (int)blockIdx.x <= 431)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input60, output53, threadIdx.x, blockIdx.x - 424 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 432 && (int)blockIdx.x <= 439)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input61, output54, threadIdx.x, blockIdx.x - 432 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 440 && (int)blockIdx.x <= 447)
    {
        Dot_float_float_float_cuda_Dot_1165_block_kernel(input54, input62, output55, threadIdx.x, blockIdx.x - 440 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_15_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47, float* output48, float* output49, float* output50, float* output51, float* output52, float* output53, float* output54, float* output55) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_15<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31, output32, output33, output34, output35, output36, output37, output38, output39, output40, output41, output42, output43, output44, output45, output46, output47, output48, output49, output50, output51, output52, output53, output54, output55);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_231_0	type: float	shape: Shape{1, 256}
//	- name: Dot_595_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_683_0	type: float	shape: Shape{1}
//	- name: Add_556_0	type: float	shape: Shape{1, 256}
//	- name: Dot_229_0	type: float	shape: Shape{1, 256}
//	- name: Dot_593_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_230_0	type: float	shape: Shape{1, 256}
//	- name: Dot_594_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_232_0	type: float	shape: Shape{1, 256}
//	- name: Dot_596_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_591_0	type: float	shape: Shape{1, 256}
//	- name: Dot_587_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_677_0	type: float	shape: Shape{1}
//	- name: Add_555_0	type: float	shape: Shape{1, 256}
//	- name: Dot_589_0	type: float	shape: Shape{1, 256}
//	- name: Dot_585_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_590_0	type: float	shape: Shape{1, 256}
//	- name: Dot_586_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_592_0	type: float	shape: Shape{1, 256}
//	- name: Dot_588_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_583_0	type: float	shape: Shape{1, 256}
//	- name: Dot_579_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_671_0	type: float	shape: Shape{1}
//	- name: Add_554_0	type: float	shape: Shape{1, 256}
//	- name: Dot_581_0	type: float	shape: Shape{1, 256}
//	- name: Dot_577_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_582_0	type: float	shape: Shape{1, 256}
//	- name: Dot_578_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_584_0	type: float	shape: Shape{1, 256}
//	- name: Dot_580_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_575_0	type: float	shape: Shape{1, 256}
//	- name: Dot_571_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_665_0	type: float	shape: Shape{1}
//	- name: Add_553_0	type: float	shape: Shape{1, 256}
//	- name: Dot_573_0	type: float	shape: Shape{1, 256}
//	- name: Dot_569_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_574_0	type: float	shape: Shape{1, 256}
//	- name: Dot_570_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_576_0	type: float	shape: Shape{1, 256}
//	- name: Dot_572_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
//	- name: Dot_567_0	type: float	shape: Shape{1, 256}
//	- name: Dot_263_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_659_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_565_0	type: float	shape: Shape{1, 256}
//	- name: Dot_261_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_566_0	type: float	shape: Shape{1, 256}
//	- name: Dot_262_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_568_0	type: float	shape: Shape{1, 256}
//	- name: Dot_264_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_706_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_716_0	type: float	shape: Shape{1, 256}
//	- name: Add_705_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_715_0	type: float	shape: Shape{1, 256}
//	- name: Add_704_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_714_0	type: float	shape: Shape{1, 256}
//	- name: Add_703_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_713_0	type: float	shape: Shape{1, 256}
//	- name: Add_702_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_712_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_10<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_231_0, Dot_595_0, Reshape_285_0, Reshape_683_0, Add_556_0, Dot_229_0, Dot_593_0, Reshape_281_0, Dot_230_0, Dot_594_0, Reshape_283_0, Dot_232_0, Dot_596_0, Reshape_287_0, Add_706_0, Multiply_716_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_11<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_591_0, Dot_587_0, Reshape_321_0, Reshape_677_0, Add_555_0, Dot_589_0, Dot_585_0, Reshape_317_0, Dot_590_0, Dot_586_0, Reshape_319_0, Dot_592_0, Dot_588_0, Reshape_323_0, Add_705_0, Multiply_715_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_12<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_583_0, Dot_579_0, Reshape_389_0, Reshape_671_0, Add_554_0, Dot_581_0, Dot_577_0, Reshape_385_0, Dot_582_0, Dot_578_0, Reshape_387_0, Dot_584_0, Dot_580_0, Reshape_391_0, Multiply_714_0, Add_704_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_14<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_575_0, Dot_571_0, Reshape_489_0, Reshape_665_0, Add_553_0, Dot_573_0, Dot_569_0, Reshape_485_0, Dot_574_0, Dot_570_0, Reshape_487_0, Dot_576_0, Dot_572_0, Reshape_491_0, Multiply_713_0, Add_703_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_13<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_567_0, Dot_263_0, Reshape_621_0, Reshape_659_0, Constant_100_0, Dot_565_0, Dot_261_0, Reshape_617_0, Dot_566_0, Dot_262_0, Reshape_619_0, Dot_568_0, Dot_264_0, Reshape_623_0, Multiply_712_0, Add_702_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_11 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_10
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_14 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_12

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_231_0	type: float	shape: Shape{1, 256}
//	- name: Dot_595_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_683_0	type: float	shape: Shape{1}
//	- name: Add_556_0	type: float	shape: Shape{1, 256}
//	- name: Dot_229_0	type: float	shape: Shape{1, 256}
//	- name: Dot_593_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_230_0	type: float	shape: Shape{1, 256}
//	- name: Dot_594_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_232_0	type: float	shape: Shape{1, 256}
//	- name: Dot_596_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_706_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_716_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_615<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_231_0, Dot_595_0, Add_615_0);
// Add_float_float_float_cuda_Add_654<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_615_0, Reshape_285_0, Add_654_0);
// Broadcast_float_float_cuda_Broadcast_684<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_683_0, Broadcast_684_0);
// Add_float_float_float_cuda_Add_685<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_654_0, Broadcast_684_0, Add_685_0);
// Sigmoid_float_float_cuda_Sigmoid_696<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_685_0, Sigmoid_696_0);
// Multiply_float_float_float_cuda_Multiply_701<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_556_0, Sigmoid_696_0, Multiply_701_0);
// Add_float_float_float_cuda_Add_613<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_229_0, Dot_593_0, Add_613_0);
// Add_float_float_float_cuda_Add_650<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_613_0, Reshape_281_0, Add_650_0);
// Sigmoid_float_float_cuda_Sigmoid_681<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_650_0, Sigmoid_681_0);
// Add_float_float_float_cuda_Add_614<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_230_0, Dot_594_0, Add_614_0);
// Add_float_float_float_cuda_Add_652<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_614_0, Reshape_283_0, Add_652_0);
// Tanh_float_float_cuda_Tanh_682<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_652_0, Tanh_682_0);
// Multiply_float_float_float_cuda_Multiply_695<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_681_0, Tanh_682_0, Multiply_695_0);
// Add_float_float_float_cuda_Add_706<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_701_0, Multiply_695_0, Add_706_0);
// Tanh_float_float_cuda_Tanh_711<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_706_0, Tanh_711_0);
// Add_float_float_float_cuda_Add_616<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_232_0, Dot_596_0, Add_616_0);
// Add_float_float_float_cuda_Add_656<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_616_0, Reshape_287_0, Add_656_0);
// Sigmoid_float_float_cuda_Sigmoid_686<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_656_0, Sigmoid_686_0);
// Multiply_float_float_float_cuda_Multiply_716<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_711_0, Sigmoid_686_0, Multiply_716_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_10_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_583_0	type: float	shape: Shape{1, 256}
//	- name: Dot_579_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_671_0	type: float	shape: Shape{1}
//	- name: Add_554_0	type: float	shape: Shape{1, 256}
//	- name: Dot_581_0	type: float	shape: Shape{1, 256}
//	- name: Dot_577_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_582_0	type: float	shape: Shape{1, 256}
//	- name: Dot_578_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_584_0	type: float	shape: Shape{1, 256}
//	- name: Dot_580_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_714_0	type: float	shape: Shape{1, 256}
//	- name: Add_704_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_607<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_583_0, Dot_579_0, Add_607_0);
// Add_float_float_float_cuda_Add_638<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_607_0, Reshape_389_0, Add_638_0);
// Broadcast_float_float_cuda_Broadcast_672<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_671_0, Broadcast_672_0);
// Add_float_float_float_cuda_Add_673<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_638_0, Broadcast_672_0, Add_673_0);
// Sigmoid_float_float_cuda_Sigmoid_692<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_673_0, Sigmoid_692_0);
// Multiply_float_float_float_cuda_Multiply_699<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_554_0, Sigmoid_692_0, Multiply_699_0);
// Add_float_float_float_cuda_Add_605<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_581_0, Dot_577_0, Add_605_0);
// Add_float_float_float_cuda_Add_634<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_605_0, Reshape_385_0, Add_634_0);
// Sigmoid_float_float_cuda_Sigmoid_669<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_634_0, Sigmoid_669_0);
// Add_float_float_float_cuda_Add_606<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_582_0, Dot_578_0, Add_606_0);
// Add_float_float_float_cuda_Add_636<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_606_0, Reshape_387_0, Add_636_0);
// Tanh_float_float_cuda_Tanh_670<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_636_0, Tanh_670_0);
// Multiply_float_float_float_cuda_Multiply_691<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_669_0, Tanh_670_0, Multiply_691_0);
// Add_float_float_float_cuda_Add_704<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_699_0, Multiply_691_0, Add_704_0);
// Tanh_float_float_cuda_Tanh_709<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_704_0, Tanh_709_0);
// Add_float_float_float_cuda_Add_608<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_584_0, Dot_580_0, Add_608_0);
// Add_float_float_float_cuda_Add_640<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_608_0, Reshape_391_0, Add_640_0);
// Sigmoid_float_float_cuda_Sigmoid_674<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_640_0, Sigmoid_674_0);
// Multiply_float_float_float_cuda_Multiply_714<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_709_0, Sigmoid_674_0, Multiply_714_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_12_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_567_0	type: float	shape: Shape{1, 256}
//	- name: Dot_263_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_659_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_565_0	type: float	shape: Shape{1, 256}
//	- name: Dot_261_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_566_0	type: float	shape: Shape{1, 256}
//	- name: Dot_262_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_568_0	type: float	shape: Shape{1, 256}
//	- name: Dot_264_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_712_0	type: float	shape: Shape{1, 256}
//	- name: Add_702_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_599<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_567_0, Dot_263_0, Add_599_0);
// Add_float_float_float_cuda_Add_622<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_599_0, Reshape_621_0, Add_622_0);
// Broadcast_float_float_cuda_Broadcast_660<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_659_0, Broadcast_660_0);
// Add_float_float_float_cuda_Add_661<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_622_0, Broadcast_660_0, Add_661_0);
// Sigmoid_float_float_cuda_Sigmoid_688<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_661_0, Sigmoid_688_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_697<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_688_0, Multiply_697_0);
// Add_float_float_float_cuda_Add_597<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_565_0, Dot_261_0, Add_597_0);
// Add_float_float_float_cuda_Add_618<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_597_0, Reshape_617_0, Add_618_0);
// Sigmoid_float_float_cuda_Sigmoid_657<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_618_0, Sigmoid_657_0);
// Add_float_float_float_cuda_Add_598<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_566_0, Dot_262_0, Add_598_0);
// Add_float_float_float_cuda_Add_620<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_598_0, Reshape_619_0, Add_620_0);
// Tanh_float_float_cuda_Tanh_658<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_620_0, Tanh_658_0);
// Multiply_float_float_float_cuda_Multiply_687<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_657_0, Tanh_658_0, Multiply_687_0);
// Add_float_float_float_cuda_Add_702<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_697_0, Multiply_687_0, Add_702_0);
// Tanh_float_float_cuda_Tanh_707<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_702_0, Tanh_707_0);
// Add_float_float_float_cuda_Add_600<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_568_0, Dot_264_0, Add_600_0);
// Add_float_float_float_cuda_Add_624<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_600_0, Reshape_623_0, Add_624_0);
// Sigmoid_float_float_cuda_Sigmoid_662<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_624_0, Sigmoid_662_0);
// Multiply_float_float_float_cuda_Multiply_712<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_707_0, Sigmoid_662_0, Multiply_712_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_13_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_10(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_10_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_10_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output3, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_12_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output5, output4, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_12_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output7, output6, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 4)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_13_block_kernel(input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output9, output8, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_10_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* input64, float* input65, float* input66, float* input67, float* input68, float* input69, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_10<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, input64, input65, input66, input67, input68, input69, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_444_0	type: float	shape: Shape{1, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_443_0	type: float	shape: Shape{1, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_442_0	type: float	shape: Shape{1, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_464_0	type: float	shape: Shape{1, 256}
//	- name: Dot_465_0	type: float	shape: Shape{1, 256}
//	- name: Dot_462_0	type: float	shape: Shape{1, 256}
//	- name: Dot_463_0	type: float	shape: Shape{1, 256}
//	- name: Dot_461_0	type: float	shape: Shape{1, 256}
//	- name: Dot_467_0	type: float	shape: Shape{1, 256}
//	- name: Dot_466_0	type: float	shape: Shape{1, 256}
//	- name: Dot_468_0	type: float	shape: Shape{1, 256}
//	- name: Dot_459_0	type: float	shape: Shape{1, 256}
//	- name: Dot_460_0	type: float	shape: Shape{1, 256}
//	- name: Dot_458_0	type: float	shape: Shape{1, 256}
//	- name: Dot_456_0	type: float	shape: Shape{1, 256}
//	- name: Dot_455_0	type: float	shape: Shape{1, 256}
//	- name: Dot_454_0	type: float	shape: Shape{1, 256}
//	- name: Dot_453_0	type: float	shape: Shape{1, 256}
//	- name: Dot_457_0	type: float	shape: Shape{1, 256}
//	- name: Dot_452_0	type: float	shape: Shape{1, 256}
//	- name: Dot_450_0	type: float	shape: Shape{1, 256}
//	- name: Dot_451_0	type: float	shape: Shape{1, 256}
//	- name: Dot_445_0	type: float	shape: Shape{1, 256}
//	- name: Dot_446_0	type: float	shape: Shape{1, 256}
//	- name: Dot_449_0	type: float	shape: Shape{1, 256}
//	- name: Dot_448_0	type: float	shape: Shape{1, 256}
//	- name: Dot_447_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_464<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_21_0, Dot_464_0);
// Dot_float_float_float_cuda_Dot_465<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_1_0, Dot_465_0);
// Dot_float_float_float_cuda_Dot_462<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_15_0, Dot_462_0);
// Dot_float_float_float_cuda_Dot_463<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_18_0, Dot_463_0);
// Dot_float_float_float_cuda_Dot_461<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_12_0, Dot_461_0);
// Dot_float_float_float_cuda_Dot_467<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_7_0, Dot_467_0);
// Dot_float_float_float_cuda_Dot_466<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_4_0, Dot_466_0);
// Dot_float_float_float_cuda_Dot_468<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_444_0, Constant_10_0, Dot_468_0);
// Dot_float_float_float_cuda_Dot_459<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_19_0, Dot_459_0);
// Dot_float_float_float_cuda_Dot_460<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_22_0, Dot_460_0);
// Dot_float_float_float_cuda_Dot_458<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_16_0, Dot_458_0);
// Dot_float_float_float_cuda_Dot_456<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_33_0, Dot_456_0);
// Dot_float_float_float_cuda_Dot_455<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_30_0, Dot_455_0);
// Dot_float_float_float_cuda_Dot_454<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_27_0, Dot_454_0);
// Dot_float_float_float_cuda_Dot_453<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_24_0, Dot_453_0);
// Dot_float_float_float_cuda_Dot_457<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_443_0, Constant_13_0, Dot_457_0);
// Dot_float_float_float_cuda_Dot_452<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_34_0, Dot_452_0);
// Dot_float_float_float_cuda_Dot_450<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_28_0, Dot_450_0);
// Dot_float_float_float_cuda_Dot_451<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_31_0, Dot_451_0);
// Dot_float_float_float_cuda_Dot_445<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_36_0, Dot_445_0);
// Dot_float_float_float_cuda_Dot_446<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_39_0, Dot_446_0);
// Dot_float_float_float_cuda_Dot_449<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_25_0, Dot_449_0);
// Dot_float_float_float_cuda_Dot_448<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_45_0, Dot_448_0);
// Dot_float_float_float_cuda_Dot_447<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_442_0, Constant_42_0, Dot_447_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_465 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_462 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_463 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_461 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_467 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_466 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_468 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_459 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_460 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_458 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_456 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_455 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_454 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_453 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_457 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_452 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_450 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_451 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_445 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_446 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_449 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_448 : Dot_float_float_float_cuda_Dot_464
// Dot_float_float_float_cuda_Dot_447 : Dot_float_float_float_cuda_Dot_464

// Node name:	Dot_464
// Description:	Dot
// Input:
//	- name: Multiply_444_0	type: float	shape: Shape{1, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_464_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_464_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_7(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input14, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input15, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input16, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input9, input17, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input23, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input24, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input25, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_464_block_kernel(input18, input26, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_7_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_7<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_2068_0	type: float	shape: Shape{1, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_2067_0	type: float	shape: Shape{1, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_2065_0	type: float	shape: Shape{1, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_2066_0	type: float	shape: Shape{1, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_2091_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2089_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2090_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2092_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2081_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2088_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2086_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2087_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2084_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2085_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2083_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2082_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2069_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2072_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2071_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2070_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2080_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2073_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2076_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2075_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2079_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2074_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2078_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2077_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_2091<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2068_0, Constant_66_0, Dot_2091_0);
// Dot_float_float_float_cuda_Dot_2089<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2068_0, Constant_60_0, Dot_2089_0);
// Dot_float_float_float_cuda_Dot_2090<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2068_0, Constant_63_0, Dot_2090_0);
// Dot_float_float_float_cuda_Dot_2092<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2068_0, Constant_69_0, Dot_2092_0);
// Dot_float_float_float_cuda_Dot_2081<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_72_0, Dot_2081_0);
// Dot_float_float_float_cuda_Dot_2088<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_70_0, Dot_2088_0);
// Dot_float_float_float_cuda_Dot_2086<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_64_0, Dot_2086_0);
// Dot_float_float_float_cuda_Dot_2087<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_67_0, Dot_2087_0);
// Dot_float_float_float_cuda_Dot_2084<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_81_0, Dot_2084_0);
// Dot_float_float_float_cuda_Dot_2085<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_61_0, Dot_2085_0);
// Dot_float_float_float_cuda_Dot_2083<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_78_0, Dot_2083_0);
// Dot_float_float_float_cuda_Dot_2082<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2067_0, Constant_75_0, Dot_2082_0);
// Dot_float_float_float_cuda_Dot_2069<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2065_0, Constant_85_0, Dot_2069_0);
// Dot_float_float_float_cuda_Dot_2072<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2065_0, Constant_94_0, Dot_2072_0);
// Dot_float_float_float_cuda_Dot_2071<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2065_0, Constant_91_0, Dot_2071_0);
// Dot_float_float_float_cuda_Dot_2070<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2065_0, Constant_88_0, Dot_2070_0);
// Dot_float_float_float_cuda_Dot_2080<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_82_0, Dot_2080_0);
// Dot_float_float_float_cuda_Dot_2073<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_84_0, Dot_2073_0);
// Dot_float_float_float_cuda_Dot_2076<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_93_0, Dot_2076_0);
// Dot_float_float_float_cuda_Dot_2075<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_90_0, Dot_2075_0);
// Dot_float_float_float_cuda_Dot_2079<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_79_0, Dot_2079_0);
// Dot_float_float_float_cuda_Dot_2074<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_87_0, Dot_2074_0);
// Dot_float_float_float_cuda_Dot_2078<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_76_0, Dot_2078_0);
// Dot_float_float_float_cuda_Dot_2077<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2066_0, Constant_73_0, Dot_2077_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_2089 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2090 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2092 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2081 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2088 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2086 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2087 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2084 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2085 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2083 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2082 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2069 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2072 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2071 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2070 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2080 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2073 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2076 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2075 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2079 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2074 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2078 : Dot_float_float_float_cuda_Dot_2091
// Dot_float_float_float_cuda_Dot_2077 : Dot_float_float_float_cuda_Dot_2091

// Node name:	Dot_2091
// Description:	Dot
// Input:
//	- name: Multiply_2068_0	type: float	shape: Shape{1, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_2091_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_2091_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_25(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input5, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input14, input15, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input14, input16, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input14, input17, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input14, input18, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input20, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input21, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input22, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input23, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input24, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input25, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input26, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_2091_block_kernel(input19, input27, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_25_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_25<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_356_0	type: float	shape: Shape{1, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_355_0	type: float	shape: Shape{1, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_369_0	type: float	shape: Shape{1, 256}
//	- name: Dot_368_0	type: float	shape: Shape{1, 256}
//	- name: Dot_366_0	type: float	shape: Shape{1, 256}
//	- name: Dot_367_0	type: float	shape: Shape{1, 256}
//	- name: Dot_371_0	type: float	shape: Shape{1, 256}
//	- name: Dot_365_0	type: float	shape: Shape{1, 256}
//	- name: Dot_370_0	type: float	shape: Shape{1, 256}
//	- name: Dot_372_0	type: float	shape: Shape{1, 256}
//	- name: Dot_359_0	type: float	shape: Shape{1, 256}
//	- name: Dot_357_0	type: float	shape: Shape{1, 256}
//	- name: Dot_358_0	type: float	shape: Shape{1, 256}
//	- name: Dot_361_0	type: float	shape: Shape{1, 256}
//	- name: Dot_364_0	type: float	shape: Shape{1, 256}
//	- name: Dot_363_0	type: float	shape: Shape{1, 256}
//	- name: Dot_362_0	type: float	shape: Shape{1, 256}
//	- name: Dot_360_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_369<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_1_0, Dot_369_0);
// Dot_float_float_float_cuda_Dot_368<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_21_0, Dot_368_0);
// Dot_float_float_float_cuda_Dot_366<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_15_0, Dot_366_0);
// Dot_float_float_float_cuda_Dot_367<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_18_0, Dot_367_0);
// Dot_float_float_float_cuda_Dot_371<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_7_0, Dot_371_0);
// Dot_float_float_float_cuda_Dot_365<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_12_0, Dot_365_0);
// Dot_float_float_float_cuda_Dot_370<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_4_0, Dot_370_0);
// Dot_float_float_float_cuda_Dot_372<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_356_0, Constant_10_0, Dot_372_0);
// Dot_float_float_float_cuda_Dot_359<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_30_0, Dot_359_0);
// Dot_float_float_float_cuda_Dot_357<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_24_0, Dot_357_0);
// Dot_float_float_float_cuda_Dot_358<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_27_0, Dot_358_0);
// Dot_float_float_float_cuda_Dot_361<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_13_0, Dot_361_0);
// Dot_float_float_float_cuda_Dot_364<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_22_0, Dot_364_0);
// Dot_float_float_float_cuda_Dot_363<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_19_0, Dot_363_0);
// Dot_float_float_float_cuda_Dot_362<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_16_0, Dot_362_0);
// Dot_float_float_float_cuda_Dot_360<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_355_0, Constant_33_0, Dot_360_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_368 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_366 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_367 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_371 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_365 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_370 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_372 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_359 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_357 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_358 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_361 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_364 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_363 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_362 : Dot_float_float_float_cuda_Dot_369
// Dot_float_float_float_cuda_Dot_360 : Dot_float_float_float_cuda_Dot_369

// Node name:	Dot_369
// Description:	Dot
// Input:
//	- name: Multiply_356_0	type: float	shape: Shape{1, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_369_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_369_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_5(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input14, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input15, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input16, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_369_block_kernel(input9, input17, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_5_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_5<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15);
}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_215_0	type: float	shape: Shape{1, 256}
//	- name: Dot_247_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_291_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_213_0	type: float	shape: Shape{1, 256}
//	- name: Dot_245_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_214_0	type: float	shape: Shape{1, 256}
//	- name: Dot_246_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_216_0	type: float	shape: Shape{1, 256}
//	- name: Dot_248_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_300_0	type: float	shape: Shape{1, 256}
//	- name: Add_298_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_279<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_215_0, Dot_247_0, Add_279_0);
// Add_float_float_float_cuda_Add_286<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_279_0, Reshape_285_0, Add_286_0);
// Broadcast_float_float_cuda_Broadcast_292<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_291_0, Broadcast_292_0);
// Add_float_float_float_cuda_Add_293<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_286_0, Broadcast_292_0, Add_293_0);
// Sigmoid_float_float_cuda_Sigmoid_296<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_293_0, Sigmoid_296_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_297<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_296_0, Multiply_297_0);
// Add_float_float_float_cuda_Add_277<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_213_0, Dot_245_0, Add_277_0);
// Add_float_float_float_cuda_Add_282<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_277_0, Reshape_281_0, Add_282_0);
// Sigmoid_float_float_cuda_Sigmoid_289<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_282_0, Sigmoid_289_0);
// Add_float_float_float_cuda_Add_278<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_214_0, Dot_246_0, Add_278_0);
// Add_float_float_float_cuda_Add_284<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_278_0, Reshape_283_0, Add_284_0);
// Tanh_float_float_cuda_Tanh_290<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_284_0, Tanh_290_0);
// Multiply_float_float_float_cuda_Multiply_295<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_289_0, Tanh_290_0, Multiply_295_0);
// Add_float_float_float_cuda_Add_298<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_297_0, Multiply_295_0, Add_298_0);
// Tanh_float_float_cuda_Tanh_299<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_298_0, Tanh_299_0);
// Add_float_float_float_cuda_Add_280<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_216_0, Dot_248_0, Add_280_0);
// Add_float_float_float_cuda_Add_288<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_280_0, Reshape_287_0, Add_288_0);
// Sigmoid_float_float_cuda_Sigmoid_294<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_288_0, Sigmoid_294_0);
// Multiply_float_float_float_cuda_Multiply_300<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_299_0, Sigmoid_294_0, Multiply_300_0);
extern "C" __launch_bounds__(256) __global__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_0(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1)
{
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_0_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1) {
    FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_0<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, output1);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_716_0	type: float	shape: Shape{1, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_715_0	type: float	shape: Shape{1, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_714_0	type: float	shape: Shape{1, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_713_0	type: float	shape: Shape{1, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_712_0	type: float	shape: Shape{1, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_755_0	type: float	shape: Shape{1, 256}
//	- name: Dot_756_0	type: float	shape: Shape{1, 256}
//	- name: Dot_754_0	type: float	shape: Shape{1, 256}
//	- name: Dot_750_0	type: float	shape: Shape{1, 256}
//	- name: Dot_753_0	type: float	shape: Shape{1, 256}
//	- name: Dot_749_0	type: float	shape: Shape{1, 256}
//	- name: Dot_752_0	type: float	shape: Shape{1, 256}
//	- name: Dot_751_0	type: float	shape: Shape{1, 256}
//	- name: Dot_746_0	type: float	shape: Shape{1, 256}
//	- name: Dot_744_0	type: float	shape: Shape{1, 256}
//	- name: Dot_745_0	type: float	shape: Shape{1, 256}
//	- name: Dot_743_0	type: float	shape: Shape{1, 256}
//	- name: Dot_742_0	type: float	shape: Shape{1, 256}
//	- name: Dot_741_0	type: float	shape: Shape{1, 256}
//	- name: Dot_748_0	type: float	shape: Shape{1, 256}
//	- name: Dot_747_0	type: float	shape: Shape{1, 256}
//	- name: Dot_737_0	type: float	shape: Shape{1, 256}
//	- name: Dot_736_0	type: float	shape: Shape{1, 256}
//	- name: Dot_735_0	type: float	shape: Shape{1, 256}
//	- name: Dot_734_0	type: float	shape: Shape{1, 256}
//	- name: Dot_733_0	type: float	shape: Shape{1, 256}
//	- name: Dot_740_0	type: float	shape: Shape{1, 256}
//	- name: Dot_739_0	type: float	shape: Shape{1, 256}
//	- name: Dot_738_0	type: float	shape: Shape{1, 256}
//	- name: Dot_729_0	type: float	shape: Shape{1, 256}
//	- name: Dot_728_0	type: float	shape: Shape{1, 256}
//	- name: Dot_725_0	type: float	shape: Shape{1, 256}
//	- name: Dot_732_0	type: float	shape: Shape{1, 256}
//	- name: Dot_731_0	type: float	shape: Shape{1, 256}
//	- name: Dot_730_0	type: float	shape: Shape{1, 256}
//	- name: Dot_727_0	type: float	shape: Shape{1, 256}
//	- name: Dot_726_0	type: float	shape: Shape{1, 256}
//	- name: Dot_724_0	type: float	shape: Shape{1, 256}
//	- name: Dot_722_0	type: float	shape: Shape{1, 256}
//	- name: Dot_723_0	type: float	shape: Shape{1, 256}
//	- name: Dot_718_0	type: float	shape: Shape{1, 256}
//	- name: Dot_720_0	type: float	shape: Shape{1, 256}
//	- name: Dot_721_0	type: float	shape: Shape{1, 256}
//	- name: Dot_719_0	type: float	shape: Shape{1, 256}
//	- name: Dot_717_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_755<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_7_0, Dot_755_0);
// Dot_float_float_float_cuda_Dot_756<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_10_0, Dot_756_0);
// Dot_float_float_float_cuda_Dot_754<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_4_0, Dot_754_0);
// Dot_float_float_float_cuda_Dot_750<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_15_0, Dot_750_0);
// Dot_float_float_float_cuda_Dot_753<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_1_0, Dot_753_0);
// Dot_float_float_float_cuda_Dot_749<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_12_0, Dot_749_0);
// Dot_float_float_float_cuda_Dot_752<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_21_0, Dot_752_0);
// Dot_float_float_float_cuda_Dot_751<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_716_0, Constant_18_0, Dot_751_0);
// Dot_float_float_float_cuda_Dot_746<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_16_0, Dot_746_0);
// Dot_float_float_float_cuda_Dot_744<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_33_0, Dot_744_0);
// Dot_float_float_float_cuda_Dot_745<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_13_0, Dot_745_0);
// Dot_float_float_float_cuda_Dot_743<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_30_0, Dot_743_0);
// Dot_float_float_float_cuda_Dot_742<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_27_0, Dot_742_0);
// Dot_float_float_float_cuda_Dot_741<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_24_0, Dot_741_0);
// Dot_float_float_float_cuda_Dot_748<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_22_0, Dot_748_0);
// Dot_float_float_float_cuda_Dot_747<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_715_0, Constant_19_0, Dot_747_0);
// Dot_float_float_float_cuda_Dot_737<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_25_0, Dot_737_0);
// Dot_float_float_float_cuda_Dot_736<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_45_0, Dot_736_0);
// Dot_float_float_float_cuda_Dot_735<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_42_0, Dot_735_0);
// Dot_float_float_float_cuda_Dot_734<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_39_0, Dot_734_0);
// Dot_float_float_float_cuda_Dot_733<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_36_0, Dot_733_0);
// Dot_float_float_float_cuda_Dot_740<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_34_0, Dot_740_0);
// Dot_float_float_float_cuda_Dot_739<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_31_0, Dot_739_0);
// Dot_float_float_float_cuda_Dot_738<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_714_0, Constant_28_0, Dot_738_0);
// Dot_float_float_float_cuda_Dot_729<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_37_0, Dot_729_0);
// Dot_float_float_float_cuda_Dot_728<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_57_0, Dot_728_0);
// Dot_float_float_float_cuda_Dot_725<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_48_0, Dot_725_0);
// Dot_float_float_float_cuda_Dot_732<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_46_0, Dot_732_0);
// Dot_float_float_float_cuda_Dot_731<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_43_0, Dot_731_0);
// Dot_float_float_float_cuda_Dot_730<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_40_0, Dot_730_0);
// Dot_float_float_float_cuda_Dot_727<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_54_0, Dot_727_0);
// Dot_float_float_float_cuda_Dot_726<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_713_0, Constant_51_0, Dot_726_0);
// Dot_float_float_float_cuda_Dot_724<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_58_0, Dot_724_0);
// Dot_float_float_float_cuda_Dot_722<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_52_0, Dot_722_0);
// Dot_float_float_float_cuda_Dot_723<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_55_0, Dot_723_0);
// Dot_float_float_float_cuda_Dot_718<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_63_0, Dot_718_0);
// Dot_float_float_float_cuda_Dot_720<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_69_0, Dot_720_0);
// Dot_float_float_float_cuda_Dot_721<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_49_0, Dot_721_0);
// Dot_float_float_float_cuda_Dot_719<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_66_0, Dot_719_0);
// Dot_float_float_float_cuda_Dot_717<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_712_0, Constant_60_0, Dot_717_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_756 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_754 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_750 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_753 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_749 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_752 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_751 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_746 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_744 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_745 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_743 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_742 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_741 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_748 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_747 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_737 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_736 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_735 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_734 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_733 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_740 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_739 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_738 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_729 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_728 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_725 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_732 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_731 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_730 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_727 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_726 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_724 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_722 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_723 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_718 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_720 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_721 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_719 : Dot_float_float_float_cuda_Dot_755
// Dot_float_float_float_cuda_Dot_717 : Dot_float_float_float_cuda_Dot_755

// Node name:	Dot_755
// Description:	Dot
// Input:
//	- name: Multiply_716_0	type: float	shape: Shape{1, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_755_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_755_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_11(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input14, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input15, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input16, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input9, input17, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input23, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input24, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input25, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input18, input26, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input28, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input29, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input30, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input31, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input32, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input33, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input34, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input27, input35, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 256 && (int)blockIdx.x <= 263)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input37, output32, threadIdx.x, blockIdx.x - 256 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 264 && (int)blockIdx.x <= 271)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input38, output33, threadIdx.x, blockIdx.x - 264 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 272 && (int)blockIdx.x <= 279)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input39, output34, threadIdx.x, blockIdx.x - 272 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 280 && (int)blockIdx.x <= 287)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input40, output35, threadIdx.x, blockIdx.x - 280 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 288 && (int)blockIdx.x <= 295)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input41, output36, threadIdx.x, blockIdx.x - 288 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 296 && (int)blockIdx.x <= 303)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input42, output37, threadIdx.x, blockIdx.x - 296 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 304 && (int)blockIdx.x <= 311)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input43, output38, threadIdx.x, blockIdx.x - 304 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 312 && (int)blockIdx.x <= 319)
    {
        Dot_float_float_float_cuda_Dot_755_block_kernel(input36, input44, output39, threadIdx.x, blockIdx.x - 312 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_11_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_11<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31, output32, output33, output34, output35, output36, output37, output38, output39);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_1940_0	type: float	shape: Shape{1, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1939_0	type: float	shape: Shape{1, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1936_0	type: float	shape: Shape{1, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1938_0	type: float	shape: Shape{1, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1937_0	type: float	shape: Shape{1, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1971_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1972_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1970_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1969_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1963_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1966_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1965_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1964_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1961_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1962_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1968_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1967_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1942_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1941_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1944_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1943_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1960_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1959_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1958_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1957_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1956_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1955_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1954_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1953_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1946_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1949_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1948_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1945_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1947_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1952_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1951_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1950_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_1971<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1940_0, Constant_54_0, Dot_1971_0);
// Dot_float_float_float_cuda_Dot_1972<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1940_0, Constant_57_0, Dot_1972_0);
// Dot_float_float_float_cuda_Dot_1970<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1940_0, Constant_51_0, Dot_1970_0);
// Dot_float_float_float_cuda_Dot_1969<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1940_0, Constant_48_0, Dot_1969_0);
// Dot_float_float_float_cuda_Dot_1963<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_66_0, Dot_1963_0);
// Dot_float_float_float_cuda_Dot_1966<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_52_0, Dot_1966_0);
// Dot_float_float_float_cuda_Dot_1965<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_49_0, Dot_1965_0);
// Dot_float_float_float_cuda_Dot_1964<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_69_0, Dot_1964_0);
// Dot_float_float_float_cuda_Dot_1961<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_60_0, Dot_1961_0);
// Dot_float_float_float_cuda_Dot_1962<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_63_0, Dot_1962_0);
// Dot_float_float_float_cuda_Dot_1968<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_58_0, Dot_1968_0);
// Dot_float_float_float_cuda_Dot_1967<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1939_0, Constant_55_0, Dot_1967_0);
// Dot_float_float_float_cuda_Dot_1942<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1936_0, Constant_88_0, Dot_1942_0);
// Dot_float_float_float_cuda_Dot_1941<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1936_0, Constant_85_0, Dot_1941_0);
// Dot_float_float_float_cuda_Dot_1944<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1936_0, Constant_94_0, Dot_1944_0);
// Dot_float_float_float_cuda_Dot_1943<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1936_0, Constant_91_0, Dot_1943_0);
// Dot_float_float_float_cuda_Dot_1960<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_70_0, Dot_1960_0);
// Dot_float_float_float_cuda_Dot_1959<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_67_0, Dot_1959_0);
// Dot_float_float_float_cuda_Dot_1958<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_64_0, Dot_1958_0);
// Dot_float_float_float_cuda_Dot_1957<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_61_0, Dot_1957_0);
// Dot_float_float_float_cuda_Dot_1956<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_81_0, Dot_1956_0);
// Dot_float_float_float_cuda_Dot_1955<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_78_0, Dot_1955_0);
// Dot_float_float_float_cuda_Dot_1954<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_75_0, Dot_1954_0);
// Dot_float_float_float_cuda_Dot_1953<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1938_0, Constant_72_0, Dot_1953_0);
// Dot_float_float_float_cuda_Dot_1946<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_87_0, Dot_1946_0);
// Dot_float_float_float_cuda_Dot_1949<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_73_0, Dot_1949_0);
// Dot_float_float_float_cuda_Dot_1948<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_93_0, Dot_1948_0);
// Dot_float_float_float_cuda_Dot_1945<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_84_0, Dot_1945_0);
// Dot_float_float_float_cuda_Dot_1947<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_90_0, Dot_1947_0);
// Dot_float_float_float_cuda_Dot_1952<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_82_0, Dot_1952_0);
// Dot_float_float_float_cuda_Dot_1951<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_79_0, Dot_1951_0);
// Dot_float_float_float_cuda_Dot_1950<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1937_0, Constant_76_0, Dot_1950_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_1972 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1970 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1969 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1963 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1966 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1965 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1964 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1961 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1962 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1968 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1967 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1942 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1941 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1944 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1943 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1960 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1959 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1958 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1957 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1956 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1955 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1954 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1953 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1946 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1949 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1948 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1945 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1947 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1952 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1951 : Dot_float_float_float_cuda_Dot_1971
// Dot_float_float_float_cuda_Dot_1950 : Dot_float_float_float_cuda_Dot_1971

// Node name:	Dot_1971
// Description:	Dot
// Input:
//	- name: Multiply_1940_0	type: float	shape: Shape{1, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1971_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_1971_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_23(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input5, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input14, input15, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input14, input16, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input14, input17, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input14, input18, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input20, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input21, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input22, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input23, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input24, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input25, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input26, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input19, input27, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input29, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input30, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input31, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input32, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input33, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input34, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input35, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_1971_block_kernel(input28, input36, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_23_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_23<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_227_0	type: float	shape: Shape{1, 256}
//	- name: Dot_467_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_537_0	type: float	shape: Shape{1}
//	- name: Add_438_0	type: float	shape: Shape{1, 256}
//	- name: Dot_225_0	type: float	shape: Shape{1, 256}
//	- name: Dot_465_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_226_0	type: float	shape: Shape{1, 256}
//	- name: Dot_466_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_228_0	type: float	shape: Shape{1, 256}
//	- name: Dot_468_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
//	- name: Dot_463_0	type: float	shape: Shape{1, 256}
//	- name: Dot_459_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_531_0	type: float	shape: Shape{1}
//	- name: Add_437_0	type: float	shape: Shape{1, 256}
//	- name: Dot_461_0	type: float	shape: Shape{1, 256}
//	- name: Dot_457_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_462_0	type: float	shape: Shape{1, 256}
//	- name: Dot_458_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_464_0	type: float	shape: Shape{1, 256}
//	- name: Dot_460_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
//	- name: Dot_455_0	type: float	shape: Shape{1, 256}
//	- name: Dot_451_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_389_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_525_0	type: float	shape: Shape{1}
//	- name: Add_436_0	type: float	shape: Shape{1, 256}
//	- name: Dot_453_0	type: float	shape: Shape{1, 256}
//	- name: Dot_449_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_454_0	type: float	shape: Shape{1, 256}
//	- name: Dot_450_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_456_0	type: float	shape: Shape{1, 256}
//	- name: Dot_452_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_447_0	type: float	shape: Shape{1, 256}
//	- name: Dot_259_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_519_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_445_0	type: float	shape: Shape{1, 256}
//	- name: Dot_257_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_446_0	type: float	shape: Shape{1, 256}
//	- name: Dot_258_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_448_0	type: float	shape: Shape{1, 256}
//	- name: Dot_260_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_556_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_564_0	type: float	shape: Shape{1, 256}
//	- name: Add_555_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_563_0	type: float	shape: Shape{1, 256}
//	- name: Add_554_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_562_0	type: float	shape: Shape{1, 256}
//	- name: Add_553_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_561_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_9<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_227_0, Dot_467_0, Reshape_285_0, Reshape_537_0, Add_438_0, Dot_225_0, Dot_465_0, Reshape_281_0, Dot_226_0, Dot_466_0, Reshape_283_0, Dot_228_0, Dot_468_0, Reshape_287_0, Multiply_564_0, Add_556_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_7<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_463_0, Dot_459_0, Reshape_321_0, Reshape_531_0, Add_437_0, Dot_461_0, Dot_457_0, Reshape_317_0, Dot_462_0, Dot_458_0, Reshape_319_0, Dot_464_0, Dot_460_0, Reshape_323_0, Add_555_0, Multiply_563_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_8<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_455_0, Dot_451_0, Reshape_389_0, Reshape_525_0, Add_436_0, Dot_453_0, Dot_449_0, Reshape_385_0, Dot_454_0, Dot_450_0, Reshape_387_0, Dot_456_0, Dot_452_0, Reshape_391_0, Multiply_562_0, Add_554_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_6<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_447_0, Dot_259_0, Reshape_489_0, Reshape_519_0, Constant_100_0, Dot_445_0, Dot_257_0, Reshape_485_0, Dot_446_0, Dot_258_0, Reshape_487_0, Dot_448_0, Dot_260_0, Reshape_491_0, Multiply_561_0, Add_553_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_8 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_9

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_227_0	type: float	shape: Shape{1, 256}
//	- name: Dot_467_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_285_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_537_0	type: float	shape: Shape{1}
//	- name: Add_438_0	type: float	shape: Shape{1, 256}
//	- name: Dot_225_0	type: float	shape: Shape{1, 256}
//	- name: Dot_465_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_281_0	type: float	shape: Shape{1, 256}
//	- name: Dot_226_0	type: float	shape: Shape{1, 256}
//	- name: Dot_466_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_283_0	type: float	shape: Shape{1, 256}
//	- name: Dot_228_0	type: float	shape: Shape{1, 256}
//	- name: Dot_468_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_287_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_564_0	type: float	shape: Shape{1, 256}
//	- name: Add_556_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_483<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_227_0, Dot_467_0, Add_483_0);
// Add_float_float_float_cuda_Add_514<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_483_0, Reshape_285_0, Add_514_0);
// Broadcast_float_float_cuda_Broadcast_538<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_537_0, Broadcast_538_0);
// Add_float_float_float_cuda_Add_539<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_514_0, Broadcast_538_0, Add_539_0);
// Sigmoid_float_float_cuda_Sigmoid_548<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_539_0, Sigmoid_548_0);
// Multiply_float_float_float_cuda_Multiply_552<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_438_0, Sigmoid_548_0, Multiply_552_0);
// Add_float_float_float_cuda_Add_481<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_225_0, Dot_465_0, Add_481_0);
// Add_float_float_float_cuda_Add_510<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_481_0, Reshape_281_0, Add_510_0);
// Sigmoid_float_float_cuda_Sigmoid_535<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_510_0, Sigmoid_535_0);
// Add_float_float_float_cuda_Add_482<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_226_0, Dot_466_0, Add_482_0);
// Add_float_float_float_cuda_Add_512<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_482_0, Reshape_283_0, Add_512_0);
// Tanh_float_float_cuda_Tanh_536<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_512_0, Tanh_536_0);
// Multiply_float_float_float_cuda_Multiply_547<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_535_0, Tanh_536_0, Multiply_547_0);
// Add_float_float_float_cuda_Add_556<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_552_0, Multiply_547_0, Add_556_0);
// Tanh_float_float_cuda_Tanh_560<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_556_0, Tanh_560_0);
// Add_float_float_float_cuda_Add_484<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_228_0, Dot_468_0, Add_484_0);
// Add_float_float_float_cuda_Add_516<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_484_0, Reshape_287_0, Add_516_0);
// Sigmoid_float_float_cuda_Sigmoid_540<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_516_0, Sigmoid_540_0);
// Multiply_float_float_float_cuda_Multiply_564<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_560_0, Sigmoid_540_0, Multiply_564_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_9_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_463_0	type: float	shape: Shape{1, 256}
//	- name: Dot_459_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_321_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_531_0	type: float	shape: Shape{1}
//	- name: Add_437_0	type: float	shape: Shape{1, 256}
//	- name: Dot_461_0	type: float	shape: Shape{1, 256}
//	- name: Dot_457_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_317_0	type: float	shape: Shape{1, 256}
//	- name: Dot_462_0	type: float	shape: Shape{1, 256}
//	- name: Dot_458_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_319_0	type: float	shape: Shape{1, 256}
//	- name: Dot_464_0	type: float	shape: Shape{1, 256}
//	- name: Dot_460_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_323_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_555_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_563_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_479<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_463_0, Dot_459_0, Add_479_0);
// Add_float_float_float_cuda_Add_506<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_479_0, Reshape_321_0, Add_506_0);
// Broadcast_float_float_cuda_Broadcast_532<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_531_0, Broadcast_532_0);
// Add_float_float_float_cuda_Add_533<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_506_0, Broadcast_532_0, Add_533_0);
// Sigmoid_float_float_cuda_Sigmoid_546<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_533_0, Sigmoid_546_0);
// Multiply_float_float_float_cuda_Multiply_551<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_437_0, Sigmoid_546_0, Multiply_551_0);
// Add_float_float_float_cuda_Add_477<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_461_0, Dot_457_0, Add_477_0);
// Add_float_float_float_cuda_Add_502<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_477_0, Reshape_317_0, Add_502_0);
// Sigmoid_float_float_cuda_Sigmoid_529<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_502_0, Sigmoid_529_0);
// Add_float_float_float_cuda_Add_478<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_462_0, Dot_458_0, Add_478_0);
// Add_float_float_float_cuda_Add_504<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_478_0, Reshape_319_0, Add_504_0);
// Tanh_float_float_cuda_Tanh_530<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_504_0, Tanh_530_0);
// Multiply_float_float_float_cuda_Multiply_545<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_529_0, Tanh_530_0, Multiply_545_0);
// Add_float_float_float_cuda_Add_555<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_551_0, Multiply_545_0, Add_555_0);
// Tanh_float_float_cuda_Tanh_559<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_555_0, Tanh_559_0);
// Add_float_float_float_cuda_Add_480<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_464_0, Dot_460_0, Add_480_0);
// Add_float_float_float_cuda_Add_508<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_480_0, Reshape_323_0, Add_508_0);
// Sigmoid_float_float_cuda_Sigmoid_534<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_508_0, Sigmoid_534_0);
// Multiply_float_float_float_cuda_Multiply_563<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_559_0, Sigmoid_534_0, Multiply_563_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_7_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_447_0	type: float	shape: Shape{1, 256}
//	- name: Dot_259_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_489_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_519_0	type: float	shape: Shape{1}
//	- name: Constant_100_0	type: float	shape: Shape{}
//	- name: Dot_445_0	type: float	shape: Shape{1, 256}
//	- name: Dot_257_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_485_0	type: float	shape: Shape{1, 256}
//	- name: Dot_446_0	type: float	shape: Shape{1, 256}
//	- name: Dot_258_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_487_0	type: float	shape: Shape{1, 256}
//	- name: Dot_448_0	type: float	shape: Shape{1, 256}
//	- name: Dot_260_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_491_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_561_0	type: float	shape: Shape{1, 256}
//	- name: Add_553_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_471<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_447_0, Dot_259_0, Add_471_0);
// Add_float_float_float_cuda_Add_490<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_471_0, Reshape_489_0, Add_490_0);
// Broadcast_float_float_cuda_Broadcast_520<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_519_0, Broadcast_520_0);
// Add_float_float_float_cuda_Add_521<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_490_0, Broadcast_520_0, Add_521_0);
// Sigmoid_float_float_cuda_Sigmoid_542<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_521_0, Sigmoid_542_0);
// Broadcast_float_float_cuda_Broadcast_211<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Constant_100_0, Broadcast_211_0);
// Multiply_float_float_float_cuda_Multiply_549<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Broadcast_211_0, Sigmoid_542_0, Multiply_549_0);
// Add_float_float_float_cuda_Add_469<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_445_0, Dot_257_0, Add_469_0);
// Add_float_float_float_cuda_Add_486<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_469_0, Reshape_485_0, Add_486_0);
// Sigmoid_float_float_cuda_Sigmoid_517<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_486_0, Sigmoid_517_0);
// Add_float_float_float_cuda_Add_470<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_446_0, Dot_258_0, Add_470_0);
// Add_float_float_float_cuda_Add_488<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_470_0, Reshape_487_0, Add_488_0);
// Tanh_float_float_cuda_Tanh_518<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_488_0, Tanh_518_0);
// Multiply_float_float_float_cuda_Multiply_541<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_517_0, Tanh_518_0, Multiply_541_0);
// Add_float_float_float_cuda_Add_553<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_549_0, Multiply_541_0, Add_553_0);
// Tanh_float_float_cuda_Tanh_557<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_553_0, Tanh_557_0);
// Add_float_float_float_cuda_Add_472<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_448_0, Dot_260_0, Add_472_0);
// Add_float_float_float_cuda_Add_492<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_472_0, Reshape_491_0, Add_492_0);
// Sigmoid_float_float_cuda_Sigmoid_522<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_492_0, Sigmoid_522_0);
// Multiply_float_float_float_cuda_Multiply_561<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_557_0, Sigmoid_522_0, Multiply_561_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_6_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = input4[tid / 256];
    float temp6 = mul(temp5, temp4);
    float temp7 = add(input5[tid], input6[tid]);
    float temp8 = add(temp7, input7[tid]);
    float temp9 = sigmoid(temp8);
    float temp10 = add(input8[tid], input9[tid]);
    float temp11 = add(temp10, input10[tid]);
    float temp12 = tanhf(temp11);
    float temp13 = mul(temp9, temp12);
    float temp14 = add(temp6, temp13);
    float temp15 = tanhf(temp14);
    float temp16 = add(input11[tid], input12[tid]);
    float temp17 = add(temp16, input13[tid]);
    float temp18 = sigmoid(temp17);
    float temp19 = mul(temp15, temp18);
    output1[tid] = temp14;
    output0[tid] = temp19;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_8(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_9_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output1, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_7_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output3, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_9_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output5, output4, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_6_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output7, output6, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_8_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_8<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output0, output1, output2, output3, output4, output5, output6, output7);
}
// Node name:	 BlockFusion
// Input:
//	- name: Dot_1971_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1967_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2041_0	type: float	shape: Shape{1}
//	- name: Add_1929_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1969_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1965_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1970_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1966_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1972_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1968_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1963_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1959_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2035_0	type: float	shape: Shape{1}
//	- name: Add_1928_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1961_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1957_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1962_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1958_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1964_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1960_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1947_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1943_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2023_0	type: float	shape: Shape{1}
//	- name: Add_1926_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1945_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1941_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1946_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1942_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1948_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1944_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1955_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1951_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_981_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2029_0	type: float	shape: Shape{1}
//	- name: Add_1927_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1953_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1949_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_977_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1954_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1950_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_979_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1956_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1952_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_983_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2068_0	type: float	shape: Shape{1, 256}
//	- name: Add_2059_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2067_0	type: float	shape: Shape{1, 256}
//	- name: Add_2057_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2065_0	type: float	shape: Shape{1, 256}
//	- name: Add_2058_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2066_0	type: float	shape: Shape{1, 256}
// Fused functions:
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_57<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1971_0, Dot_1967_0, Reshape_621_0, Reshape_2041_0, Add_1929_0, Dot_1969_0, Dot_1965_0, Reshape_617_0, Dot_1970_0, Dot_1966_0, Reshape_619_0, Dot_1972_0, Dot_1968_0, Reshape_623_0, Multiply_2068_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_55<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1963_0, Dot_1959_0, Reshape_785_0, Reshape_2035_0, Add_1928_0, Dot_1961_0, Dot_1957_0, Reshape_781_0, Dot_1962_0, Dot_1958_0, Reshape_783_0, Dot_1964_0, Dot_1960_0, Reshape_787_0, Multiply_2067_0, Add_2059_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_54<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1947_0, Dot_1943_0, Reshape_1209_0, Reshape_2023_0, Add_1926_0, Dot_1945_0, Dot_1941_0, Reshape_1205_0, Dot_1946_0, Dot_1942_0, Reshape_1207_0, Dot_1948_0, Dot_1944_0, Reshape_1211_0, Add_2057_0, Multiply_2065_0);
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_56<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1955_0, Dot_1951_0, Reshape_981_0, Reshape_2029_0, Add_1927_0, Dot_1953_0, Dot_1949_0, Reshape_977_0, Dot_1954_0, Dot_1950_0, Reshape_979_0, Dot_1956_0, Dot_1952_0, Reshape_983_0, Multiply_2066_0, Add_2058_0);
// Deduped function map: <src_function_name : deduped_function_name>
// FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_56 : FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_55

// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1971_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1967_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_621_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2041_0	type: float	shape: Shape{1}
//	- name: Add_1929_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1969_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1965_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1970_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1966_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1972_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1968_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_623_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2068_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1987<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1971_0, Dot_1967_0, Add_1987_0);
// Add_float_float_float_cuda_Add_2018<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1987_0, Reshape_621_0, Add_2018_0);
// Broadcast_float_float_cuda_Broadcast_2042<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2041_0, Broadcast_2042_0);
// Add_float_float_float_cuda_Add_2043<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2018_0, Broadcast_2042_0, Add_2043_0);
// Sigmoid_float_float_cuda_Sigmoid_2052<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2043_0, Sigmoid_2052_0);
// Multiply_float_float_float_cuda_Multiply_2056<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1929_0, Sigmoid_2052_0, Multiply_2056_0);
// Add_float_float_float_cuda_Add_1985<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1969_0, Dot_1965_0, Add_1985_0);
// Add_float_float_float_cuda_Add_2014<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1985_0, Reshape_617_0, Add_2014_0);
// Sigmoid_float_float_cuda_Sigmoid_2039<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2014_0, Sigmoid_2039_0);
// Add_float_float_float_cuda_Add_1986<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1970_0, Dot_1966_0, Add_1986_0);
// Add_float_float_float_cuda_Add_2016<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1986_0, Reshape_619_0, Add_2016_0);
// Tanh_float_float_cuda_Tanh_2040<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2016_0, Tanh_2040_0);
// Multiply_float_float_float_cuda_Multiply_2051<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2039_0, Tanh_2040_0, Multiply_2051_0);
// Add_float_float_float_cuda_Add_2060<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2056_0, Multiply_2051_0, Add_2060_0);
// Tanh_float_float_cuda_Tanh_2064<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2060_0, Tanh_2064_0);
// Add_float_float_float_cuda_Add_1988<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1972_0, Dot_1968_0, Add_1988_0);
// Add_float_float_float_cuda_Add_2020<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1988_0, Reshape_623_0, Add_2020_0);
// Sigmoid_float_float_cuda_Sigmoid_2044<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2020_0, Sigmoid_2044_0);
// Multiply_float_float_float_cuda_Multiply_2068<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2064_0, Sigmoid_2044_0, Multiply_2068_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_57_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1963_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1959_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_785_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2035_0	type: float	shape: Shape{1}
//	- name: Add_1928_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1961_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1957_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_781_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1962_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1958_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_783_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1964_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1960_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_787_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Multiply_2067_0	type: float	shape: Shape{1, 256}
//	- name: Add_2059_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1983<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1963_0, Dot_1959_0, Add_1983_0);
// Add_float_float_float_cuda_Add_2010<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1983_0, Reshape_785_0, Add_2010_0);
// Broadcast_float_float_cuda_Broadcast_2036<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2035_0, Broadcast_2036_0);
// Add_float_float_float_cuda_Add_2037<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2010_0, Broadcast_2036_0, Add_2037_0);
// Sigmoid_float_float_cuda_Sigmoid_2050<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2037_0, Sigmoid_2050_0);
// Multiply_float_float_float_cuda_Multiply_2055<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1928_0, Sigmoid_2050_0, Multiply_2055_0);
// Add_float_float_float_cuda_Add_1981<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1961_0, Dot_1957_0, Add_1981_0);
// Add_float_float_float_cuda_Add_2006<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1981_0, Reshape_781_0, Add_2006_0);
// Sigmoid_float_float_cuda_Sigmoid_2033<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2006_0, Sigmoid_2033_0);
// Add_float_float_float_cuda_Add_1982<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1962_0, Dot_1958_0, Add_1982_0);
// Add_float_float_float_cuda_Add_2008<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1982_0, Reshape_783_0, Add_2008_0);
// Tanh_float_float_cuda_Tanh_2034<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2008_0, Tanh_2034_0);
// Multiply_float_float_float_cuda_Multiply_2049<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2033_0, Tanh_2034_0, Multiply_2049_0);
// Add_float_float_float_cuda_Add_2059<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2055_0, Multiply_2049_0, Add_2059_0);
// Tanh_float_float_cuda_Tanh_2063<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2059_0, Tanh_2063_0);
// Add_float_float_float_cuda_Add_1984<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1964_0, Dot_1960_0, Add_1984_0);
// Add_float_float_float_cuda_Add_2012<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1984_0, Reshape_787_0, Add_2012_0);
// Sigmoid_float_float_cuda_Sigmoid_2038<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2012_0, Sigmoid_2038_0);
// Multiply_float_float_float_cuda_Multiply_2067<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2063_0, Sigmoid_2038_0, Multiply_2067_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_55_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp13;
    output0[tid] = temp18;

}
// Node name:	 Elementwise Kernel Fusion
// Input:
//	- name: Dot_1947_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1943_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1209_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_2023_0	type: float	shape: Shape{1}
//	- name: Add_1926_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1945_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1941_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1205_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1946_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1942_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1207_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1948_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1944_0	type: float	shape: Shape{1, 256}
//	- name: Reshape_1211_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Add_2057_0	type: float	shape: Shape{1, 256}
//	- name: Multiply_2065_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Add_float_float_float_cuda_Add_1975<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1947_0, Dot_1943_0, Add_1975_0);
// Add_float_float_float_cuda_Add_1994<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1975_0, Reshape_1209_0, Add_1994_0);
// Broadcast_float_float_cuda_Broadcast_2024<<<dim3(4, 1, 1), dim3(64, 1, 1), 0, 0>>>(Reshape_2023_0, Broadcast_2024_0);
// Add_float_float_float_cuda_Add_2025<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1994_0, Broadcast_2024_0, Add_2025_0);
// Sigmoid_float_float_cuda_Sigmoid_2046<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2025_0, Sigmoid_2046_0);
// Multiply_float_float_float_cuda_Multiply_2053<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1926_0, Sigmoid_2046_0, Multiply_2053_0);
// Add_float_float_float_cuda_Add_1973<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1945_0, Dot_1941_0, Add_1973_0);
// Add_float_float_float_cuda_Add_1990<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1973_0, Reshape_1205_0, Add_1990_0);
// Sigmoid_float_float_cuda_Sigmoid_2021<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1990_0, Sigmoid_2021_0);
// Add_float_float_float_cuda_Add_1974<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1946_0, Dot_1942_0, Add_1974_0);
// Add_float_float_float_cuda_Add_1992<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1974_0, Reshape_1207_0, Add_1992_0);
// Tanh_float_float_cuda_Tanh_2022<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1992_0, Tanh_2022_0);
// Multiply_float_float_float_cuda_Multiply_2045<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Sigmoid_2021_0, Tanh_2022_0, Multiply_2045_0);
// Add_float_float_float_cuda_Add_2057<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Multiply_2053_0, Multiply_2045_0, Add_2057_0);
// Tanh_float_float_cuda_Tanh_2061<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_2057_0, Tanh_2061_0);
// Add_float_float_float_cuda_Add_1976<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Dot_1948_0, Dot_1944_0, Add_1976_0);
// Add_float_float_float_cuda_Add_1996<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1976_0, Reshape_1211_0, Add_1996_0);
// Sigmoid_float_float_cuda_Sigmoid_2026<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Add_1996_0, Sigmoid_2026_0);
// Multiply_float_float_float_cuda_Multiply_2065<<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(Tanh_2061_0, Sigmoid_2026_0, Multiply_2065_0);
__device__ __noinline__ void FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_54_block_kernel(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* output0, float* output1, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 256){
        return;
    }
    const dim3 blockDim(256, 1, 1);
    const dim3 gridDim(1, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    int tid = threadIdx.x;
    float temp0 = add(input0[tid], input1[tid]);
    float temp1 = add(temp0, input2[tid]);
    float temp2 = input3[tid % 1];
    float temp3 = add(temp1, temp2);
    float temp4 = sigmoid(temp3);
    float temp5 = mul(input4[tid], temp4);
    float temp6 = add(input5[tid], input6[tid]);
    float temp7 = add(temp6, input7[tid]);
    float temp8 = sigmoid(temp7);
    float temp9 = add(input8[tid], input9[tid]);
    float temp10 = add(temp9, input10[tid]);
    float temp11 = tanhf(temp10);
    float temp12 = mul(temp8, temp11);
    float temp13 = add(temp5, temp12);
    float temp14 = tanhf(temp13);
    float temp15 = add(input11[tid], input12[tid]);
    float temp16 = add(temp15, input13[tid]);
    float temp17 = sigmoid(temp16);
    float temp18 = mul(temp14, temp17);
    output1[tid] = temp18;
    output0[tid] = temp13;

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_24(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6)
{

    if (blockIdx.x == 0)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_57_block_kernel(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, output0, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 1)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_55_block_kernel(input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, output2, output1, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 2)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_54_block_kernel(input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, output3, output4, threadIdx.x, 0, NULL);
    }
    else if (blockIdx.x == 3)
    {
        FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_55_block_kernel(input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output6, output5, threadIdx.x, 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_24_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_24<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, output0, output1, output2, output3, output4, output5, output6);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_1364_0	type: float	shape: Shape{1, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1363_0	type: float	shape: Shape{1, 256}
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1362_0	type: float	shape: Shape{1, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1361_0	type: float	shape: Shape{1, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1360_0	type: float	shape: Shape{1, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1357_0	type: float	shape: Shape{1, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1358_0	type: float	shape: Shape{1, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1359_0	type: float	shape: Shape{1, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1420_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1419_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1418_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1417_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1416_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1415_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1414_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1413_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1412_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1411_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1410_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1409_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1405_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1404_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1403_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1402_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1401_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1407_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1406_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1408_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1395_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1394_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1398_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1397_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1396_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1393_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1400_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1399_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1386_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1385_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1392_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1391_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1390_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1389_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1388_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1387_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1366_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1365_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1368_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1367_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1369_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1376_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1375_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1374_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1373_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1372_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1371_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1370_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1379_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1378_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1377_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1380_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1383_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1382_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1381_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1384_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_1420<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1364_0, Constant_21_0, Dot_1420_0);
// Dot_float_float_float_cuda_Dot_1419<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1364_0, Constant_18_0, Dot_1419_0);
// Dot_float_float_float_cuda_Dot_1418<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1364_0, Constant_15_0, Dot_1418_0);
// Dot_float_float_float_cuda_Dot_1417<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1364_0, Constant_12_0, Dot_1417_0);
// Dot_float_float_float_cuda_Dot_1416<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_22_0, Dot_1416_0);
// Dot_float_float_float_cuda_Dot_1415<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_19_0, Dot_1415_0);
// Dot_float_float_float_cuda_Dot_1414<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_16_0, Dot_1414_0);
// Dot_float_float_float_cuda_Dot_1413<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_13_0, Dot_1413_0);
// Dot_float_float_float_cuda_Dot_1412<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_33_0, Dot_1412_0);
// Dot_float_float_float_cuda_Dot_1411<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_30_0, Dot_1411_0);
// Dot_float_float_float_cuda_Dot_1410<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_27_0, Dot_1410_0);
// Dot_float_float_float_cuda_Dot_1409<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1363_0, Constant_24_0, Dot_1409_0);
// Dot_float_float_float_cuda_Dot_1405<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_25_0, Dot_1405_0);
// Dot_float_float_float_cuda_Dot_1404<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_45_0, Dot_1404_0);
// Dot_float_float_float_cuda_Dot_1403<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_42_0, Dot_1403_0);
// Dot_float_float_float_cuda_Dot_1402<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_39_0, Dot_1402_0);
// Dot_float_float_float_cuda_Dot_1401<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_36_0, Dot_1401_0);
// Dot_float_float_float_cuda_Dot_1407<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_31_0, Dot_1407_0);
// Dot_float_float_float_cuda_Dot_1406<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_28_0, Dot_1406_0);
// Dot_float_float_float_cuda_Dot_1408<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1362_0, Constant_34_0, Dot_1408_0);
// Dot_float_float_float_cuda_Dot_1395<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_54_0, Dot_1395_0);
// Dot_float_float_float_cuda_Dot_1394<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_51_0, Dot_1394_0);
// Dot_float_float_float_cuda_Dot_1398<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_40_0, Dot_1398_0);
// Dot_float_float_float_cuda_Dot_1397<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_37_0, Dot_1397_0);
// Dot_float_float_float_cuda_Dot_1396<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_57_0, Dot_1396_0);
// Dot_float_float_float_cuda_Dot_1393<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_48_0, Dot_1393_0);
// Dot_float_float_float_cuda_Dot_1400<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_46_0, Dot_1400_0);
// Dot_float_float_float_cuda_Dot_1399<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1361_0, Constant_43_0, Dot_1399_0);
// Dot_float_float_float_cuda_Dot_1386<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_63_0, Dot_1386_0);
// Dot_float_float_float_cuda_Dot_1385<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_60_0, Dot_1385_0);
// Dot_float_float_float_cuda_Dot_1392<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_58_0, Dot_1392_0);
// Dot_float_float_float_cuda_Dot_1391<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_55_0, Dot_1391_0);
// Dot_float_float_float_cuda_Dot_1390<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_52_0, Dot_1390_0);
// Dot_float_float_float_cuda_Dot_1389<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_49_0, Dot_1389_0);
// Dot_float_float_float_cuda_Dot_1388<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_69_0, Dot_1388_0);
// Dot_float_float_float_cuda_Dot_1387<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1360_0, Constant_66_0, Dot_1387_0);
// Dot_float_float_float_cuda_Dot_1366<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1357_0, Constant_88_0, Dot_1366_0);
// Dot_float_float_float_cuda_Dot_1365<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1357_0, Constant_85_0, Dot_1365_0);
// Dot_float_float_float_cuda_Dot_1368<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1357_0, Constant_94_0, Dot_1368_0);
// Dot_float_float_float_cuda_Dot_1367<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1357_0, Constant_91_0, Dot_1367_0);
// Dot_float_float_float_cuda_Dot_1369<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_84_0, Dot_1369_0);
// Dot_float_float_float_cuda_Dot_1376<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_82_0, Dot_1376_0);
// Dot_float_float_float_cuda_Dot_1375<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_79_0, Dot_1375_0);
// Dot_float_float_float_cuda_Dot_1374<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_76_0, Dot_1374_0);
// Dot_float_float_float_cuda_Dot_1373<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_73_0, Dot_1373_0);
// Dot_float_float_float_cuda_Dot_1372<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_93_0, Dot_1372_0);
// Dot_float_float_float_cuda_Dot_1371<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_90_0, Dot_1371_0);
// Dot_float_float_float_cuda_Dot_1370<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1358_0, Constant_87_0, Dot_1370_0);
// Dot_float_float_float_cuda_Dot_1379<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_78_0, Dot_1379_0);
// Dot_float_float_float_cuda_Dot_1378<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_75_0, Dot_1378_0);
// Dot_float_float_float_cuda_Dot_1377<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_72_0, Dot_1377_0);
// Dot_float_float_float_cuda_Dot_1380<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_81_0, Dot_1380_0);
// Dot_float_float_float_cuda_Dot_1383<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_67_0, Dot_1383_0);
// Dot_float_float_float_cuda_Dot_1382<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_64_0, Dot_1382_0);
// Dot_float_float_float_cuda_Dot_1381<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_61_0, Dot_1381_0);
// Dot_float_float_float_cuda_Dot_1384<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1359_0, Constant_70_0, Dot_1384_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_1419 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1418 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1417 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1416 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1415 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1414 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1413 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1412 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1411 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1410 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1409 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1405 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1404 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1403 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1402 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1401 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1407 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1406 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1408 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1395 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1394 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1398 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1397 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1396 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1393 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1400 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1399 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1386 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1385 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1392 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1391 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1390 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1389 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1388 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1387 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1366 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1365 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1368 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1367 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1369 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1376 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1375 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1374 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1373 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1372 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1371 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1370 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1379 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1378 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1377 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1380 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1383 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1382 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1381 : Dot_float_float_float_cuda_Dot_1420
// Dot_float_float_float_cuda_Dot_1384 : Dot_float_float_float_cuda_Dot_1420

// Node name:	Dot_1420
// Description:	Dot
// Input:
//	- name: Multiply_1364_0	type: float	shape: Shape{1, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1420_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_1420_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_17(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47, float* output48, float* output49, float* output50, float* output51, float* output52, float* output53, float* output54, float* output55)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input5, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input15, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input16, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input17, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input18, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input14, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input24, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input25, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input26, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input27, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input28, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input29, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input30, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input23, input31, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input33, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input34, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input35, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input36, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 256 && (int)blockIdx.x <= 263)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input37, output32, threadIdx.x, blockIdx.x - 256 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 264 && (int)blockIdx.x <= 271)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input38, output33, threadIdx.x, blockIdx.x - 264 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 272 && (int)blockIdx.x <= 279)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input39, output34, threadIdx.x, blockIdx.x - 272 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 280 && (int)blockIdx.x <= 287)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input32, input40, output35, threadIdx.x, blockIdx.x - 280 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 288 && (int)blockIdx.x <= 295)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input41, input42, output36, threadIdx.x, blockIdx.x - 288 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 296 && (int)blockIdx.x <= 303)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input41, input43, output37, threadIdx.x, blockIdx.x - 296 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 304 && (int)blockIdx.x <= 311)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input41, input44, output38, threadIdx.x, blockIdx.x - 304 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 312 && (int)blockIdx.x <= 319)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input41, input45, output39, threadIdx.x, blockIdx.x - 312 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 320 && (int)blockIdx.x <= 327)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input47, output40, threadIdx.x, blockIdx.x - 320 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 328 && (int)blockIdx.x <= 335)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input48, output41, threadIdx.x, blockIdx.x - 328 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 336 && (int)blockIdx.x <= 343)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input49, output42, threadIdx.x, blockIdx.x - 336 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 344 && (int)blockIdx.x <= 351)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input50, output43, threadIdx.x, blockIdx.x - 344 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 352 && (int)blockIdx.x <= 359)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input51, output44, threadIdx.x, blockIdx.x - 352 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 360 && (int)blockIdx.x <= 367)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input52, output45, threadIdx.x, blockIdx.x - 360 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 368 && (int)blockIdx.x <= 375)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input53, output46, threadIdx.x, blockIdx.x - 368 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 376 && (int)blockIdx.x <= 383)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input46, input54, output47, threadIdx.x, blockIdx.x - 376 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 384 && (int)blockIdx.x <= 391)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input56, output48, threadIdx.x, blockIdx.x - 384 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 392 && (int)blockIdx.x <= 399)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input57, output49, threadIdx.x, blockIdx.x - 392 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 400 && (int)blockIdx.x <= 407)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input58, output50, threadIdx.x, blockIdx.x - 400 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 408 && (int)blockIdx.x <= 415)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input59, output51, threadIdx.x, blockIdx.x - 408 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 416 && (int)blockIdx.x <= 423)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input60, output52, threadIdx.x, blockIdx.x - 416 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 424 && (int)blockIdx.x <= 431)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input61, output53, threadIdx.x, blockIdx.x - 424 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 432 && (int)blockIdx.x <= 439)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input62, output54, threadIdx.x, blockIdx.x - 432 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 440 && (int)blockIdx.x <= 447)
    {
        Dot_float_float_float_cuda_Dot_1420_block_kernel(input55, input63, output55, threadIdx.x, blockIdx.x - 440 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_17_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* input55, float* input56, float* input57, float* input58, float* input59, float* input60, float* input61, float* input62, float* input63, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47, float* output48, float* output49, float* output50, float* output51, float* output52, float* output53, float* output54, float* output55) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_17<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, input55, input56, input57, input58, input59, input60, input61, input62, input63, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31, output32, output33, output34, output35, output36, output37, output38, output39, output40, output41, output42, output43, output44, output45, output46, output47, output48, output49, output50, output51, output52, output53, output54, output55);
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_1588_0	type: float	shape: Shape{1, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1587_0	type: float	shape: Shape{1, 256}
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1586_0	type: float	shape: Shape{1, 256}
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
//	- name: Constant_46_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1585_0	type: float	shape: Shape{1, 256}
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1582_0	type: float	shape: Shape{1, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1583_0	type: float	shape: Shape{1, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_1584_0	type: float	shape: Shape{1, 256}
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1633_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1635_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1636_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1634_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1627_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1626_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1632_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1631_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1629_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1625_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1630_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1628_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1620_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1619_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1623_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1618_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1622_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1621_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1617_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1624_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1615_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1614_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1613_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1609_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1612_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1611_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1616_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1610_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1590_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1592_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1591_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1589_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1596_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1595_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1599_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1598_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1594_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1597_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1593_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1600_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1608_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1601_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1604_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1603_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1602_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1607_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1606_0	type: float	shape: Shape{1, 256}
//	- name: Dot_1605_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_1633<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1588_0, Constant_24_0, Dot_1633_0);
// Dot_float_float_float_cuda_Dot_1635<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1588_0, Constant_30_0, Dot_1635_0);
// Dot_float_float_float_cuda_Dot_1636<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1588_0, Constant_33_0, Dot_1636_0);
// Dot_float_float_float_cuda_Dot_1634<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1588_0, Constant_27_0, Dot_1634_0);
// Dot_float_float_float_cuda_Dot_1627<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_42_0, Dot_1627_0);
// Dot_float_float_float_cuda_Dot_1626<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_39_0, Dot_1626_0);
// Dot_float_float_float_cuda_Dot_1632<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_34_0, Dot_1632_0);
// Dot_float_float_float_cuda_Dot_1631<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_31_0, Dot_1631_0);
// Dot_float_float_float_cuda_Dot_1629<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_25_0, Dot_1629_0);
// Dot_float_float_float_cuda_Dot_1625<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_36_0, Dot_1625_0);
// Dot_float_float_float_cuda_Dot_1630<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_28_0, Dot_1630_0);
// Dot_float_float_float_cuda_Dot_1628<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1587_0, Constant_45_0, Dot_1628_0);
// Dot_float_float_float_cuda_Dot_1620<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_57_0, Dot_1620_0);
// Dot_float_float_float_cuda_Dot_1619<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_54_0, Dot_1619_0);
// Dot_float_float_float_cuda_Dot_1623<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_43_0, Dot_1623_0);
// Dot_float_float_float_cuda_Dot_1618<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_51_0, Dot_1618_0);
// Dot_float_float_float_cuda_Dot_1622<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_40_0, Dot_1622_0);
// Dot_float_float_float_cuda_Dot_1621<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_37_0, Dot_1621_0);
// Dot_float_float_float_cuda_Dot_1617<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_48_0, Dot_1617_0);
// Dot_float_float_float_cuda_Dot_1624<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1586_0, Constant_46_0, Dot_1624_0);
// Dot_float_float_float_cuda_Dot_1615<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_55_0, Dot_1615_0);
// Dot_float_float_float_cuda_Dot_1614<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_52_0, Dot_1614_0);
// Dot_float_float_float_cuda_Dot_1613<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_49_0, Dot_1613_0);
// Dot_float_float_float_cuda_Dot_1609<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_60_0, Dot_1609_0);
// Dot_float_float_float_cuda_Dot_1612<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_69_0, Dot_1612_0);
// Dot_float_float_float_cuda_Dot_1611<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_66_0, Dot_1611_0);
// Dot_float_float_float_cuda_Dot_1616<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_58_0, Dot_1616_0);
// Dot_float_float_float_cuda_Dot_1610<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1585_0, Constant_63_0, Dot_1610_0);
// Dot_float_float_float_cuda_Dot_1590<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1582_0, Constant_88_0, Dot_1590_0);
// Dot_float_float_float_cuda_Dot_1592<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1582_0, Constant_94_0, Dot_1592_0);
// Dot_float_float_float_cuda_Dot_1591<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1582_0, Constant_91_0, Dot_1591_0);
// Dot_float_float_float_cuda_Dot_1589<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1582_0, Constant_85_0, Dot_1589_0);
// Dot_float_float_float_cuda_Dot_1596<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_93_0, Dot_1596_0);
// Dot_float_float_float_cuda_Dot_1595<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_90_0, Dot_1595_0);
// Dot_float_float_float_cuda_Dot_1599<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_79_0, Dot_1599_0);
// Dot_float_float_float_cuda_Dot_1598<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_76_0, Dot_1598_0);
// Dot_float_float_float_cuda_Dot_1594<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_87_0, Dot_1594_0);
// Dot_float_float_float_cuda_Dot_1597<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_73_0, Dot_1597_0);
// Dot_float_float_float_cuda_Dot_1593<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_84_0, Dot_1593_0);
// Dot_float_float_float_cuda_Dot_1600<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1583_0, Constant_82_0, Dot_1600_0);
// Dot_float_float_float_cuda_Dot_1608<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_70_0, Dot_1608_0);
// Dot_float_float_float_cuda_Dot_1601<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_72_0, Dot_1601_0);
// Dot_float_float_float_cuda_Dot_1604<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_81_0, Dot_1604_0);
// Dot_float_float_float_cuda_Dot_1603<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_78_0, Dot_1603_0);
// Dot_float_float_float_cuda_Dot_1602<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_75_0, Dot_1602_0);
// Dot_float_float_float_cuda_Dot_1607<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_67_0, Dot_1607_0);
// Dot_float_float_float_cuda_Dot_1606<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_64_0, Dot_1606_0);
// Dot_float_float_float_cuda_Dot_1605<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_1584_0, Constant_61_0, Dot_1605_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_1635 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1636 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1634 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1627 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1626 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1632 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1631 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1629 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1625 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1630 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1628 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1620 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1619 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1623 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1618 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1622 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1621 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1617 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1624 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1615 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1614 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1613 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1609 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1612 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1611 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1616 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1610 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1590 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1592 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1591 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1589 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1596 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1595 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1599 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1598 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1594 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1597 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1593 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1600 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1608 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1601 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1604 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1603 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1602 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1607 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1606 : Dot_float_float_float_cuda_Dot_1633
// Dot_float_float_float_cuda_Dot_1605 : Dot_float_float_float_cuda_Dot_1633

// Node name:	Dot_1633
// Description:	Dot
// Input:
//	- name: Multiply_1588_0	type: float	shape: Shape{1, 256}
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_1633_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_1633_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_19(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input10, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input11, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input12, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input5, input13, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input15, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input16, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input17, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input18, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 128 && (int)blockIdx.x <= 135)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input19, output16, threadIdx.x, blockIdx.x - 128 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 136 && (int)blockIdx.x <= 143)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input20, output17, threadIdx.x, blockIdx.x - 136 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 144 && (int)blockIdx.x <= 151)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input21, output18, threadIdx.x, blockIdx.x - 144 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 152 && (int)blockIdx.x <= 159)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input14, input22, output19, threadIdx.x, blockIdx.x - 152 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 160 && (int)blockIdx.x <= 167)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input24, output20, threadIdx.x, blockIdx.x - 160 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 168 && (int)blockIdx.x <= 175)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input25, output21, threadIdx.x, blockIdx.x - 168 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 176 && (int)blockIdx.x <= 183)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input26, output22, threadIdx.x, blockIdx.x - 176 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 184 && (int)blockIdx.x <= 191)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input27, output23, threadIdx.x, blockIdx.x - 184 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 192 && (int)blockIdx.x <= 199)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input28, output24, threadIdx.x, blockIdx.x - 192 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 200 && (int)blockIdx.x <= 207)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input29, output25, threadIdx.x, blockIdx.x - 200 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 208 && (int)blockIdx.x <= 215)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input30, output26, threadIdx.x, blockIdx.x - 208 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 216 && (int)blockIdx.x <= 223)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input23, input31, output27, threadIdx.x, blockIdx.x - 216 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 224 && (int)blockIdx.x <= 231)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input32, input33, output28, threadIdx.x, blockIdx.x - 224 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 232 && (int)blockIdx.x <= 239)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input32, input34, output29, threadIdx.x, blockIdx.x - 232 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 240 && (int)blockIdx.x <= 247)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input32, input35, output30, threadIdx.x, blockIdx.x - 240 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 248 && (int)blockIdx.x <= 255)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input32, input36, output31, threadIdx.x, blockIdx.x - 248 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 256 && (int)blockIdx.x <= 263)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input38, output32, threadIdx.x, blockIdx.x - 256 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 264 && (int)blockIdx.x <= 271)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input39, output33, threadIdx.x, blockIdx.x - 264 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 272 && (int)blockIdx.x <= 279)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input40, output34, threadIdx.x, blockIdx.x - 272 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 280 && (int)blockIdx.x <= 287)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input41, output35, threadIdx.x, blockIdx.x - 280 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 288 && (int)blockIdx.x <= 295)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input42, output36, threadIdx.x, blockIdx.x - 288 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 296 && (int)blockIdx.x <= 303)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input43, output37, threadIdx.x, blockIdx.x - 296 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 304 && (int)blockIdx.x <= 311)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input44, output38, threadIdx.x, blockIdx.x - 304 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 312 && (int)blockIdx.x <= 319)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input37, input45, output39, threadIdx.x, blockIdx.x - 312 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 320 && (int)blockIdx.x <= 327)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input47, output40, threadIdx.x, blockIdx.x - 320 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 328 && (int)blockIdx.x <= 335)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input48, output41, threadIdx.x, blockIdx.x - 328 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 336 && (int)blockIdx.x <= 343)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input49, output42, threadIdx.x, blockIdx.x - 336 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 344 && (int)blockIdx.x <= 351)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input50, output43, threadIdx.x, blockIdx.x - 344 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 352 && (int)blockIdx.x <= 359)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input51, output44, threadIdx.x, blockIdx.x - 352 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 360 && (int)blockIdx.x <= 367)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input52, output45, threadIdx.x, blockIdx.x - 360 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 368 && (int)blockIdx.x <= 375)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input53, output46, threadIdx.x, blockIdx.x - 368 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 376 && (int)blockIdx.x <= 383)
    {
        Dot_float_float_float_cuda_Dot_1633_block_kernel(input46, input54, output47, threadIdx.x, blockIdx.x - 376 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_19_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* input19, float* input20, float* input21, float* input22, float* input23, float* input24, float* input25, float* input26, float* input27, float* input28, float* input29, float* input30, float* input31, float* input32, float* input33, float* input34, float* input35, float* input36, float* input37, float* input38, float* input39, float* input40, float* input41, float* input42, float* input43, float* input44, float* input45, float* input46, float* input47, float* input48, float* input49, float* input50, float* input51, float* input52, float* input53, float* input54, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15, float* output16, float* output17, float* output18, float* output19, float* output20, float* output21, float* output22, float* output23, float* output24, float* output25, float* output26, float* output27, float* output28, float* output29, float* output30, float* output31, float* output32, float* output33, float* output34, float* output35, float* output36, float* output37, float* output38, float* output39, float* output40, float* output41, float* output42, float* output43, float* output44, float* output45, float* output46, float* output47) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_19<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, input19, input20, input21, input22, input23, input24, input25, input26, input27, input28, input29, input30, input31, input32, input33, input34, input35, input36, input37, input38, input39, input40, input41, input42, input43, input44, input45, input46, input47, input48, input49, input50, input51, input52, input53, input54, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15, output16, output17, output18, output19, output20, output21, output22, output23, output24, output25, output26, output27, output28, output29, output30, output31, output32, output33, output34, output35, output36, output37, output38, output39, output40, output41, output42, output43, output44, output45, output46, output47);
}
// Node name:	Result_2261
// Description:	Result
// Input:
//	- name: Multiply_2260_0	type: float	shape: Shape{1, 256}
// Output:
//	- name: Result_2261_0	type: float	shape: Shape{1, 256}
void Result_float_float_cuda_lib_Result_2261(float* input0, float** output0)
{
    *output0 = input0;
}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_2164_0	type: float	shape: Shape{1, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_2162_0	type: float	shape: Shape{1, 256}
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
//	- name: Multiply_2163_0	type: float	shape: Shape{1, 256}
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_2180_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2179_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2178_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2177_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2167_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2168_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2166_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2165_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2176_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2175_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2170_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2174_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2173_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2169_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2172_0	type: float	shape: Shape{1, 256}
//	- name: Dot_2171_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_2180<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2164_0, Constant_81_0, Dot_2180_0);
// Dot_float_float_float_cuda_Dot_2179<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2164_0, Constant_78_0, Dot_2179_0);
// Dot_float_float_float_cuda_Dot_2178<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2164_0, Constant_75_0, Dot_2178_0);
// Dot_float_float_float_cuda_Dot_2177<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2164_0, Constant_72_0, Dot_2177_0);
// Dot_float_float_float_cuda_Dot_2167<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2162_0, Constant_91_0, Dot_2167_0);
// Dot_float_float_float_cuda_Dot_2168<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2162_0, Constant_94_0, Dot_2168_0);
// Dot_float_float_float_cuda_Dot_2166<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2162_0, Constant_88_0, Dot_2166_0);
// Dot_float_float_float_cuda_Dot_2165<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2162_0, Constant_85_0, Dot_2165_0);
// Dot_float_float_float_cuda_Dot_2176<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_82_0, Dot_2176_0);
// Dot_float_float_float_cuda_Dot_2175<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_79_0, Dot_2175_0);
// Dot_float_float_float_cuda_Dot_2170<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_87_0, Dot_2170_0);
// Dot_float_float_float_cuda_Dot_2174<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_76_0, Dot_2174_0);
// Dot_float_float_float_cuda_Dot_2173<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_73_0, Dot_2173_0);
// Dot_float_float_float_cuda_Dot_2169<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_84_0, Dot_2169_0);
// Dot_float_float_float_cuda_Dot_2172<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_93_0, Dot_2172_0);
// Dot_float_float_float_cuda_Dot_2171<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_2163_0, Constant_90_0, Dot_2171_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_2179 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2178 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2177 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2167 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2168 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2166 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2165 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2176 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2175 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2170 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2174 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2173 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2169 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2172 : Dot_float_float_float_cuda_Dot_2180
// Dot_float_float_float_cuda_Dot_2171 : Dot_float_float_float_cuda_Dot_2180

// Node name:	Dot_2180
// Description:	Dot
// Input:
//	- name: Multiply_2164_0	type: float	shape: Shape{1, 256}
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_2180_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_2180_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_27(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input5, input6, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input5, input7, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input5, input8, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input5, input9, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 64 && (int)blockIdx.x <= 71)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input11, output8, threadIdx.x, blockIdx.x - 64 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 72 && (int)blockIdx.x <= 79)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input12, output9, threadIdx.x, blockIdx.x - 72 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 80 && (int)blockIdx.x <= 87)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input13, output10, threadIdx.x, blockIdx.x - 80 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 88 && (int)blockIdx.x <= 95)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input14, output11, threadIdx.x, blockIdx.x - 88 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 96 && (int)blockIdx.x <= 103)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input15, output12, threadIdx.x, blockIdx.x - 96 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 104 && (int)blockIdx.x <= 111)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input16, output13, threadIdx.x, blockIdx.x - 104 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 112 && (int)blockIdx.x <= 119)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input17, output14, threadIdx.x, blockIdx.x - 112 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 120 && (int)blockIdx.x <= 127)
    {
        Dot_float_float_float_cuda_Dot_2180_block_kernel(input10, input18, output15, threadIdx.x, blockIdx.x - 120 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_27_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* input9, float* input10, float* input11, float* input12, float* input13, float* input14, float* input15, float* input16, float* input17, float* input18, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7, float* output8, float* output9, float* output10, float* output11, float* output12, float* output13, float* output14, float* output15) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_27<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, input9, input10, input11, input12, input13, input14, input15, input16, input17, input18, output0, output1, output2, output3, output4, output5, output6, output7, output8, output9, output10, output11, output12, output13, output14, output15);
}
// Node name:	Constant_120
// Description:	Constant
// Input:
// Output:
//	- name: Constant_120_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_120(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_120_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_120_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_158
// Description:	Constant
// Input:
// Output:
//	- name: Constant_158_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_158(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_158_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_158_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_155
// Description:	Constant
// Input:
// Output:
//	- name: Constant_155_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_155(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_155_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_155_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_24
// Description:	Constant
// Input:
// Output:
//	- name: Constant_24_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_24(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_24_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_24_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_43
// Description:	Constant
// Input:
// Output:
//	- name: Constant_43_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_43(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_43_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_43_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_49
// Description:	Constant
// Input:
// Output:
//	- name: Constant_49_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_49(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_49_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_49_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_109
// Description:	Constant
// Input:
// Output:
//	- name: Constant_109_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_109(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_109_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_109_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_70
// Description:	Constant
// Input:
// Output:
//	- name: Constant_70_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_70(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_70_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_70_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_18
// Description:	Constant
// Input:
// Output:
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_18(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_18_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_18_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_168
// Description:	Constant
// Input:
// Output:
//	- name: Constant_168_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_168(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_168_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_168_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_141
// Description:	Constant
// Input:
// Output:
//	- name: Constant_141_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_141(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_141_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_141_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_25
// Description:	Constant
// Input:
// Output:
//	- name: Constant_25_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_25(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_25_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_25_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_45
// Description:	Constant
// Input:
// Output:
//	- name: Constant_45_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_45(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_45_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_45_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_82
// Description:	Constant
// Input:
// Output:
//	- name: Constant_82_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_82(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_82_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_82_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_32
// Description:	Constant
// Input:
// Output:
//	- name: Constant_32_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_32(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_32_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_32_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_123
// Description:	Constant
// Input:
// Output:
//	- name: Constant_123_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_123(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_123_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_123_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_58
// Description:	Constant
// Input:
// Output:
//	- name: Constant_58_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_58(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_58_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_58_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_144
// Description:	Constant
// Input:
// Output:
//	- name: Constant_144_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_144(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_144_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_144_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_61
// Description:	Constant
// Input:
// Output:
//	- name: Constant_61_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_61(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_61_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_61_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_76
// Description:	Constant
// Input:
// Output:
//	- name: Constant_76_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_76(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_76_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_76_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_40
// Description:	Constant
// Input:
// Output:
//	- name: Constant_40_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_40(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_40_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_40_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_90
// Description:	Constant
// Input:
// Output:
//	- name: Constant_90_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_90(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_90_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_90_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_38
// Description:	Constant
// Input:
// Output:
//	- name: Constant_38_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_38(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_38_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_38_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_131
// Description:	Constant
// Input:
// Output:
//	- name: Constant_131_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_131(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_131_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_131_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_2
// Description:	Constant
// Input:
// Output:
//	- name: Constant_2_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_2(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_2_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_2_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_102
// Description:	Constant
// Input:
// Output:
//	- name: Constant_102_0	type: int32_t	shape: Shape{1}
void Constant_int32_t_cuda_Constant_102(cudaStream_t stream, int32_t* output0)
{
    std::ifstream bin_file("./Constant/Constant_102_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_102_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_3
// Description:	Constant
// Input:
// Output:
//	- name: Constant_3_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_3(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_3_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_3_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_4
// Description:	Constant
// Input:
// Output:
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_4(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_4_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_4_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_57
// Description:	Constant
// Input:
// Output:
//	- name: Constant_57_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_57(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_57_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_57_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_1
// Description:	Constant
// Input:
// Output:
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_1(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_1_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_1_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_94
// Description:	Constant
// Input:
// Output:
//	- name: Constant_94_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_94(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_94_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_94_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_6
// Description:	Constant
// Input:
// Output:
//	- name: Constant_6_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_6(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_6_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_6_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_134
// Description:	Constant
// Input:
// Output:
//	- name: Constant_134_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_134(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_134_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_134_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_64
// Description:	Constant
// Input:
// Output:
//	- name: Constant_64_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_64(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_64_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_64_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_119
// Description:	Constant
// Input:
// Output:
//	- name: Constant_119_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_119(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_119_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_119_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_164
// Description:	Constant
// Input:
// Output:
//	- name: Constant_164_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_164(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_164_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_164_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_50
// Description:	Constant
// Input:
// Output:
//	- name: Constant_50_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_50(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_50_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_50_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_67
// Description:	Constant
// Input:
// Output:
//	- name: Constant_67_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_67(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_67_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_67_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_9
// Description:	Constant
// Input:
// Output:
//	- name: Constant_9_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_9(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_9_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_9_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_170
// Description:	Constant
// Input:
// Output:
//	- name: Constant_170_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_170(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_170_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_170_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_153
// Description:	Constant
// Input:
// Output:
//	- name: Constant_153_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_153(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_153_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_153_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_111
// Description:	Constant
// Input:
// Output:
//	- name: Constant_111_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_111(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_111_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_111_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_42
// Description:	Constant
// Input:
// Output:
//	- name: Constant_42_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_42(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_42_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_42_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_0
// Description:	Constant
// Input:
// Output:
//	- name: Constant_0_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_0(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_0_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_0_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_132
// Description:	Constant
// Input:
// Output:
//	- name: Constant_132_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_132(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_132_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_132_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_187
// Description:	Constant
// Input:
// Output:
//	- name: Constant_187_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_187(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_187_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_187_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_37
// Description:	Constant
// Input:
// Output:
//	- name: Constant_37_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_37(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_37_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_37_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_125
// Description:	Constant
// Input:
// Output:
//	- name: Constant_125_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_125(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_125_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_125_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_92
// Description:	Constant
// Input:
// Output:
//	- name: Constant_92_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_92(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_92_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_92_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_30
// Description:	Constant
// Input:
// Output:
//	- name: Constant_30_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_30(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_30_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_30_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_101
// Description:	Constant
// Input:
// Output:
//	- name: Constant_101_0	type: int32_t	shape: Shape{1}
void Constant_int32_t_cuda_Constant_101(cudaStream_t stream, int32_t* output0)
{
    std::ifstream bin_file("./Constant/Constant_101_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_101_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_91
// Description:	Constant
// Input:
// Output:
//	- name: Constant_91_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_91(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_91_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_91_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_88
// Description:	Constant
// Input:
// Output:
//	- name: Constant_88_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_88(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_88_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_88_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_55
// Description:	Constant
// Input:
// Output:
//	- name: Constant_55_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_55(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_55_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_55_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_136
// Description:	Constant
// Input:
// Output:
//	- name: Constant_136_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_136(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_136_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_136_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_122
// Description:	Constant
// Input:
// Output:
//	- name: Constant_122_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_122(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_122_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_122_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_165
// Description:	Constant
// Input:
// Output:
//	- name: Constant_165_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_165(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_165_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_165_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_190
// Description:	Constant
// Input:
// Output:
//	- name: Constant_190_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_190(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_190_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_190_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_126
// Description:	Constant
// Input:
// Output:
//	- name: Constant_126_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_126(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_126_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_126_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_51
// Description:	Constant
// Input:
// Output:
//	- name: Constant_51_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_51(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_51_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_51_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_12
// Description:	Constant
// Input:
// Output:
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_12(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_12_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_12_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_15
// Description:	Constant
// Input:
// Output:
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_15(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_15_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_15_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_95
// Description:	Constant
// Input:
// Output:
//	- name: Constant_95_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_95(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_95_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_95_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_86
// Description:	Constant
// Input:
// Output:
//	- name: Constant_86_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_86(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_86_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_86_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_191
// Description:	Constant
// Input:
// Output:
//	- name: Constant_191_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_191(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_191_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_191_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_143
// Description:	Constant
// Input:
// Output:
//	- name: Constant_143_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_143(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_143_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_143_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_73
// Description:	Constant
// Input:
// Output:
//	- name: Constant_73_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_73(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_73_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_73_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_186
// Description:	Constant
// Input:
// Output:
//	- name: Constant_186_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_186(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_186_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_186_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_135
// Description:	Constant
// Input:
// Output:
//	- name: Constant_135_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_135(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_135_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_135_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_146
// Description:	Constant
// Input:
// Output:
//	- name: Constant_146_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_146(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_146_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_146_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_177
// Description:	Constant
// Input:
// Output:
//	- name: Constant_177_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_177(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_177_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_177_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_167
// Description:	Constant
// Input:
// Output:
//	- name: Constant_167_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_167(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_167_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_167_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_124
// Description:	Constant
// Input:
// Output:
//	- name: Constant_124_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_124(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_124_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_124_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_110
// Description:	Constant
// Input:
// Output:
//	- name: Constant_110_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_110(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_110_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_110_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_156
// Description:	Constant
// Input:
// Output:
//	- name: Constant_156_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_156(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_156_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_156_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_188
// Description:	Constant
// Input:
// Output:
//	- name: Constant_188_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_188(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_188_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_188_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	 BlockFusion
// Input:
//	- name: Multiply_300_0	type: float	shape: Shape{1, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
//	- name: Constant_1_0	type: float	shape: Shape{256, 256}
//	- name: Constant_4_0	type: float	shape: Shape{256, 256}
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
//	- name: Constant_18_0	type: float	shape: Shape{256, 256}
//	- name: Constant_12_0	type: float	shape: Shape{256, 256}
//	- name: Constant_15_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_308_0	type: float	shape: Shape{1, 256}
//	- name: Dot_307_0	type: float	shape: Shape{1, 256}
//	- name: Dot_305_0	type: float	shape: Shape{1, 256}
//	- name: Dot_306_0	type: float	shape: Shape{1, 256}
//	- name: Dot_304_0	type: float	shape: Shape{1, 256}
//	- name: Dot_303_0	type: float	shape: Shape{1, 256}
//	- name: Dot_301_0	type: float	shape: Shape{1, 256}
//	- name: Dot_302_0	type: float	shape: Shape{1, 256}
// Fused functions:
// Dot_float_float_float_cuda_Dot_308<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_10_0, Dot_308_0);
// Dot_float_float_float_cuda_Dot_307<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_7_0, Dot_307_0);
// Dot_float_float_float_cuda_Dot_305<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_1_0, Dot_305_0);
// Dot_float_float_float_cuda_Dot_306<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_4_0, Dot_306_0);
// Dot_float_float_float_cuda_Dot_304<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_21_0, Dot_304_0);
// Dot_float_float_float_cuda_Dot_303<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_18_0, Dot_303_0);
// Dot_float_float_float_cuda_Dot_301<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_12_0, Dot_301_0);
// Dot_float_float_float_cuda_Dot_302<<<dim3(8, 1, 1), dim3(128, 1, 1), 0, 0>>>(Multiply_300_0, Constant_15_0, Dot_302_0);
// Deduped function map: <src_function_name : deduped_function_name>
// Dot_float_float_float_cuda_Dot_307 : Dot_float_float_float_cuda_Dot_308
// Dot_float_float_float_cuda_Dot_305 : Dot_float_float_float_cuda_Dot_308
// Dot_float_float_float_cuda_Dot_306 : Dot_float_float_float_cuda_Dot_308
// Dot_float_float_float_cuda_Dot_304 : Dot_float_float_float_cuda_Dot_308
// Dot_float_float_float_cuda_Dot_303 : Dot_float_float_float_cuda_Dot_308
// Dot_float_float_float_cuda_Dot_301 : Dot_float_float_float_cuda_Dot_308
// Dot_float_float_float_cuda_Dot_302 : Dot_float_float_float_cuda_Dot_308

// Node name:	Dot_308
// Description:	Dot
// Input:
//	- name: Multiply_300_0	type: float	shape: Shape{1, 256}
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
// Output:
//	- name: Dot_308_0	type: float	shape: Shape{1, 256}
__device__ __noinline__ void Dot_float_float_float_cuda_Dot_308_block_kernel(float* input0, float* input1, float* output0, int thread_id, int block_id, char *shared_buffer)
{
    if (thread_id >= 128){
        return;
    }
    const dim3 blockDim(128, 1, 1);
    const dim3 gridDim(8, 1, 1);
    const dim3 blockIdx(block_id, 0, 0);
    {
        {
            int warp_id = threadIdx.x >> 5;
            int lane_id = threadIdx.x & 31;
            int col_id = blockIdx.x * blockDim.x / 4 + lane_id;
            if (col_id < 256)
            {
                float val = 0;
                int k_start = warp_id * 64;
                int k_end = (warp_id + 1) * 64;
                for (int i = k_start; i < k_end; i++)
                {
                    val = fma(input0[i], input1[i * 256 + col_id], val);
                }
                if (warp_id == 0)
                {
                    output0[col_id]=0;
                }
                __syncthreads();
                atomicAdd(output0 + col_id, val);
            }

        }

    }

}
extern "C" __global__  void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_3(float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7)
{

    if ((int)blockIdx.x >= 0 && (int)blockIdx.x <= 7)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input1, output0, threadIdx.x, blockIdx.x - 0 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 8 && (int)blockIdx.x <= 15)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input2, output1, threadIdx.x, blockIdx.x - 8 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 16 && (int)blockIdx.x <= 23)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input3, output2, threadIdx.x, blockIdx.x - 16 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 24 && (int)blockIdx.x <= 31)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input4, output3, threadIdx.x, blockIdx.x - 24 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 32 && (int)blockIdx.x <= 39)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input5, output4, threadIdx.x, blockIdx.x - 32 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 40 && (int)blockIdx.x <= 47)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input6, output5, threadIdx.x, blockIdx.x - 40 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 48 && (int)blockIdx.x <= 55)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input7, output6, threadIdx.x, blockIdx.x - 48 + 0, NULL);
    }
    else if ((int)blockIdx.x >= 56 && (int)blockIdx.x <= 63)
    {
        Dot_float_float_float_cuda_Dot_308_block_kernel(input0, input8, output7, threadIdx.x, blockIdx.x - 56 + 0, NULL);
    }

}
extern void BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_3_Call(const dim3 &grids, const dim3 &blocks, unsigned mem, cudaStream_t stream, float* input0, float* input1, float* input2, float* input3, float* input4, float* input5, float* input6, float* input7, float* input8, float* output0, float* output1, float* output2, float* output3, float* output4, float* output5, float* output6, float* output7) {
    BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_3<<<grids, blocks, mem, stream>>>(input0, input1, input2, input3, input4, input5, input6, input7, input8, output0, output1, output2, output3, output4, output5, output6, output7);
}
// Node name:	Constant_60
// Description:	Constant
// Input:
// Output:
//	- name: Constant_60_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_60(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_60_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_60_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_115
// Description:	Constant
// Input:
// Output:
//	- name: Constant_115_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_115(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_115_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_115_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_16
// Description:	Constant
// Input:
// Output:
//	- name: Constant_16_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_16(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_16_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_16_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_19
// Description:	Constant
// Input:
// Output:
//	- name: Constant_19_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_19(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_19_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_19_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_52
// Description:	Constant
// Input:
// Output:
//	- name: Constant_52_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_52(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_52_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_52_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_157
// Description:	Constant
// Input:
// Output:
//	- name: Constant_157_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_157(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_157_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_157_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_23
// Description:	Constant
// Input:
// Output:
//	- name: Constant_23_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_23(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_23_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_23_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_181
// Description:	Constant
// Input:
// Output:
//	- name: Constant_181_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_181(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_181_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_181_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_29
// Description:	Constant
// Input:
// Output:
//	- name: Constant_29_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_29(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_29_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_29_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_33
// Description:	Constant
// Input:
// Output:
//	- name: Constant_33_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_33(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_33_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_33_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_47
// Description:	Constant
// Input:
// Output:
//	- name: Constant_47_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_47(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_47_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_47_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_192
// Description:	Constant
// Input:
// Output:
//	- name: Constant_192_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_192(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_192_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_192_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_174
// Description:	Constant
// Input:
// Output:
//	- name: Constant_174_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_174(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_174_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_174_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_22
// Description:	Constant
// Input:
// Output:
//	- name: Constant_22_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_22(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_22_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_22_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_20
// Description:	Constant
// Input:
// Output:
//	- name: Constant_20_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_20(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_20_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_20_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_137
// Description:	Constant
// Input:
// Output:
//	- name: Constant_137_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_137(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_137_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_137_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_8
// Description:	Constant
// Input:
// Output:
//	- name: Constant_8_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_8(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_8_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_8_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_178
// Description:	Constant
// Input:
// Output:
//	- name: Constant_178_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_178(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_178_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_178_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_180
// Description:	Constant
// Input:
// Output:
//	- name: Constant_180_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_180(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_180_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_180_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_63
// Description:	Constant
// Input:
// Output:
//	- name: Constant_63_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_63(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_63_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_63_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_147
// Description:	Constant
// Input:
// Output:
//	- name: Constant_147_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_147(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_147_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_147_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_98
// Description:	Constant
// Input:
// Output:
//	- name: Constant_98_0	type: int32_t	shape: Shape{1}
void Constant_int32_t_cuda_Constant_98(cudaStream_t stream, int32_t* output0)
{
    std::ifstream bin_file("./Constant/Constant_98_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_98_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_89
// Description:	Constant
// Input:
// Output:
//	- name: Constant_89_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_89(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_89_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_89_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_10
// Description:	Constant
// Input:
// Output:
//	- name: Constant_10_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_10(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_10_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_10_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_148
// Description:	Constant
// Input:
// Output:
//	- name: Constant_148_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_148(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_148_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_148_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_72
// Description:	Constant
// Input:
// Output:
//	- name: Constant_72_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_72(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_72_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_72_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_5
// Description:	Constant
// Input:
// Output:
//	- name: Constant_5_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_5(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_5_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_5_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_104
// Description:	Constant
// Input:
// Output:
//	- name: Constant_104_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_104(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_104_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_104_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_108
// Description:	Constant
// Input:
// Output:
//	- name: Constant_108_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_108(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_108_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_108_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_79
// Description:	Constant
// Input:
// Output:
//	- name: Constant_79_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_79(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_79_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_79_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_36
// Description:	Constant
// Input:
// Output:
//	- name: Constant_36_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_36(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_36_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_36_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_14
// Description:	Constant
// Input:
// Output:
//	- name: Constant_14_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_14(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_14_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_14_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_179
// Description:	Constant
// Input:
// Output:
//	- name: Constant_179_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_179(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_179_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_179_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_169
// Description:	Constant
// Input:
// Output:
//	- name: Constant_169_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_169(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_169_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_169_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_17
// Description:	Constant
// Input:
// Output:
//	- name: Constant_17_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_17(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_17_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_17_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_35
// Description:	Constant
// Input:
// Output:
//	- name: Constant_35_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_35(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_35_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_35_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_189
// Description:	Constant
// Input:
// Output:
//	- name: Constant_189_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_189(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_189_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_189_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_21
// Description:	Constant
// Input:
// Output:
//	- name: Constant_21_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_21(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_21_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_21_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_78
// Description:	Constant
// Input:
// Output:
//	- name: Constant_78_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_78(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_78_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_78_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_166
// Description:	Constant
// Input:
// Output:
//	- name: Constant_166_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_166(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_166_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_166_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_145
// Description:	Constant
// Input:
// Output:
//	- name: Constant_145_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_145(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_145_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_145_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_159
// Description:	Constant
// Input:
// Output:
//	- name: Constant_159_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_159(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_159_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_159_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_28
// Description:	Constant
// Input:
// Output:
//	- name: Constant_28_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_28(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_28_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_28_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_13
// Description:	Constant
// Input:
// Output:
//	- name: Constant_13_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_13(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_13_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_13_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_31
// Description:	Constant
// Input:
// Output:
//	- name: Constant_31_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_31(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_31_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_31_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_7
// Description:	Constant
// Input:
// Output:
//	- name: Constant_7_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_7(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_7_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_7_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_34
// Description:	Constant
// Input:
// Output:
//	- name: Constant_34_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_34(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_34_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_34_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_39
// Description:	Constant
// Input:
// Output:
//	- name: Constant_39_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_39(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_39_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_39_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_121
// Description:	Constant
// Input:
// Output:
//	- name: Constant_121_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_121(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_121_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_121_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_44
// Description:	Constant
// Input:
// Output:
//	- name: Constant_44_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_44(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_44_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_44_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_81
// Description:	Constant
// Input:
// Output:
//	- name: Constant_81_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_81(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_81_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_81_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_41
// Description:	Constant
// Input:
// Output:
//	- name: Constant_41_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_41(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_41_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_41_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_54
// Description:	Constant
// Input:
// Output:
//	- name: Constant_54_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_54(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_54_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_54_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_176
// Description:	Constant
// Input:
// Output:
//	- name: Constant_176_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_176(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_176_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_176_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_152
// Description:	Constant
// Input:
// Output:
//	- name: Constant_152_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_152(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_152_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_152_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_27
// Description:	Constant
// Input:
// Output:
//	- name: Constant_27_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_27(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_27_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_27_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_142
// Description:	Constant
// Input:
// Output:
//	- name: Constant_142_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_142(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_142_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_142_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_112
// Description:	Constant
// Input:
// Output:
//	- name: Constant_112_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_112(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_112_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_112_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_59
// Description:	Constant
// Input:
// Output:
//	- name: Constant_59_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_59(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_59_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_59_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_56
// Description:	Constant
// Input:
// Output:
//	- name: Constant_56_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_56(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_56_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_56_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_53
// Description:	Constant
// Input:
// Output:
//	- name: Constant_53_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_53(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_53_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_53_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_130
// Description:	Constant
// Input:
// Output:
//	- name: Constant_130_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_130(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_130_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_130_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_69
// Description:	Constant
// Input:
// Output:
//	- name: Constant_69_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_69(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_69_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_69_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_80
// Description:	Constant
// Input:
// Output:
//	- name: Constant_80_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_80(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_80_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_80_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_133
// Description:	Constant
// Input:
// Output:
//	- name: Constant_133_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_133(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_133_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_133_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_113
// Description:	Constant
// Input:
// Output:
//	- name: Constant_113_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_113(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_113_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_113_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_85
// Description:	Constant
// Input:
// Output:
//	- name: Constant_85_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_85(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_85_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_85_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_77
// Description:	Constant
// Input:
// Output:
//	- name: Constant_77_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_77(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_77_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_77_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_71
// Description:	Constant
// Input:
// Output:
//	- name: Constant_71_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_71(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_71_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_71_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_26
// Description:	Constant
// Input:
// Output:
//	- name: Constant_26_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_26(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_26_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_26_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_48
// Description:	Constant
// Input:
// Output:
//	- name: Constant_48_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_48(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_48_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_48_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_84
// Description:	Constant
// Input:
// Output:
//	- name: Constant_84_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_84(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_84_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_84_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_11
// Description:	Constant
// Input:
// Output:
//	- name: Constant_11_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_11(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_11_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_11_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_68
// Description:	Constant
// Input:
// Output:
//	- name: Constant_68_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_68(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_68_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_68_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_65
// Description:	Constant
// Input:
// Output:
//	- name: Constant_65_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_65(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_65_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_65_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_62
// Description:	Constant
// Input:
// Output:
//	- name: Constant_62_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_62(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_62_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_62_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_66
// Description:	Constant
// Input:
// Output:
//	- name: Constant_66_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_66(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_66_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_66_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_75
// Description:	Constant
// Input:
// Output:
//	- name: Constant_75_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_75(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_75_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_75_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_74
// Description:	Constant
// Input:
// Output:
//	- name: Constant_74_0	type: float	shape: Shape{256}
void Constant_float_cuda_Constant_74(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_74_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_74_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[1024];
    bin_file.read(tmp_mem, 1024);
    cudaMemcpyAsync(output0, tmp_mem, 1024, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_154
// Description:	Constant
// Input:
// Output:
//	- name: Constant_154_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_154(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_154_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_154_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_100
// Description:	Constant
// Input:
// Output:
//	- name: Constant_100_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_100(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_100_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_100_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_114
// Description:	Constant
// Input:
// Output:
//	- name: Constant_114_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_114(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_114_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_114_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_175
// Description:	Constant
// Input:
// Output:
//	- name: Constant_175_0	type: float	shape: Shape{}
void Constant_float_cuda_Constant_175(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_175_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_175_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[4];
    bin_file.read(tmp_mem, 4);
    cudaMemcpyAsync(output0, tmp_mem, 4, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}

#ifndef __NNFUSION_GRAPH_CONFIG__
#define __NNFUSION_GRAPH_CONFIG__
#define NNFUSION_GRAPH_INPUT_NUM 1
#define NNFUSION_GRAPH_OUTPUT_NUM 1
#define NNFUSION_GRAPH_INPUT_DTYPE_0 float
#define NNFUSION_GRAPH_INPUT_SHAPE_0 {8, 1, 256}
#define NNFUSION_GRAPH_OUTPUT_DTYPE_0 float
#define NNFUSION_GRAPH_OUTPUT_SHAPE_0 {1, 256}
#endif

// Node name:	Constant_93
// Description:	Constant
// Input:
// Output:
//	- name: Constant_93_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_93(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_93_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_93_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}
// Node name:	Constant_87
// Description:	Constant
// Input:
// Output:
//	- name: Constant_87_0	type: float	shape: Shape{256, 256}
void Constant_float_cuda_Constant_87(cudaStream_t stream, float* output0)
{
    std::ifstream bin_file("./Constant/Constant_87_0.bin" , std::ios::in | std::ios::binary);
    if(bin_file.fail())
    {
    	printf("Load Constant_87_0 failed.\n");
    	exit(1);
    }
    char* tmp_mem = new char[262144];
    bin_file.read(tmp_mem, 262144);
    cudaMemcpyAsync(output0, tmp_mem, 262144, cudaMemcpyHostToDevice, stream);
    bin_file.close();

}

__device__ char* d_group_0_CUDA_GPU0_allocator_memory_pool;
__device__ float* d_Broadcast_212_0;
__device__ int32_t* d_Concat_194_0;
__device__ int32_t* d_Concat_193_0;
__device__ float* d_Slice_205_0;
__device__ float* d_Slice_207_0;
__device__ float* d_Slice_203_0;
__device__ float* d_Slice_209_0;
__device__ float* d_Slice_201_0;
__device__ float* d_Slice_197_0;
__device__ float* d_Slice_199_0;
__device__ float* d_Slice_195_0;
__device__ float* d_Reshape_210_0;
__device__ float* d_Reshape_208_0;
__device__ float* d_Reshape_206_0;
__device__ float* d_Reshape_204_0;
__device__ float* d_Reshape_202_0;
__device__ float* d_Reshape_200_0;
__device__ float* d_Reshape_198_0;
__device__ float* d_Reshape_196_0;
__device__ float* d_Dot_239_0;
__device__ float* d_Dot_234_0;
__device__ float* d_Dot_231_0;
__device__ float* d_Dot_219_0;
__device__ float* d_Dot_230_0;
__device__ float* d_Dot_240_0;
__device__ float* d_Dot_229_0;
__device__ float* d_Dot_232_0;
__device__ float* d_Dot_244_0;
__device__ float* d_Dot_220_0;
__device__ float* d_Dot_243_0;
__device__ float* d_Dot_242_0;
__device__ float* d_Dot_228_0;
__device__ float* d_Dot_226_0;
__device__ float* d_Dot_224_0;
__device__ float* d_Dot_214_0;
__device__ float* d_Dot_213_0;
__device__ float* d_Dot_233_0;
__device__ float* d_Dot_218_0;
__device__ float* d_Dot_236_0;
__device__ float* d_Dot_222_0;
__device__ float* d_Dot_215_0;
__device__ float* d_Dot_235_0;
__device__ float* d_Dot_225_0;
__device__ float* d_Dot_237_0;
__device__ float* d_Dot_221_0;
__device__ float* d_Dot_223_0;
__device__ float* d_Dot_217_0;
__device__ float* d_Dot_216_0;
__device__ float* d_Dot_227_0;
__device__ float* d_Dot_238_0;
__device__ float* d_Dot_241_0;
__device__ float* d_Dot_263_0;
__device__ float* d_Dot_267_0;
__device__ float* d_Dot_261_0;
__device__ float* d_Dot_260_0;
__device__ float* d_Dot_259_0;
__device__ float* d_Dot_254_0;
__device__ float* d_Dot_255_0;
__device__ float* d_Dot_262_0;
__device__ float* d_Dot_258_0;
__device__ float* d_Dot_272_0;
__device__ float* d_Dot_249_0;
__device__ float* d_Dot_256_0;
__device__ float* d_Dot_273_0;
__device__ float* d_Dot_250_0;
__device__ float* d_Dot_276_0;
__device__ float* d_Dot_253_0;
__device__ float* d_Dot_275_0;
__device__ float* d_Dot_252_0;
__device__ float* d_Dot_257_0;
__device__ float* d_Dot_246_0;
__device__ float* d_Dot_269_0;
__device__ float* d_Dot_274_0;
__device__ float* d_Dot_251_0;
__device__ float* d_Dot_245_0;
__device__ float* d_Dot_268_0;
__device__ float* d_Dot_271_0;
__device__ float* d_Dot_248_0;
__device__ float* d_Dot_270_0;
__device__ float* d_Dot_247_0;
__device__ float* d_Dot_264_0;
__device__ float* d_Dot_265_0;
__device__ float* d_Dot_266_0;
__device__ float* d_Add_298_0;
__device__ float* d_Multiply_300_0;
__device__ float* d_Dot_302_0;
__device__ float* d_Dot_301_0;
__device__ float* d_Dot_303_0;
__device__ float* d_Dot_304_0;
__device__ float* d_Dot_306_0;
__device__ float* d_Dot_305_0;
__device__ float* d_Dot_307_0;
__device__ float* d_Dot_308_0;
__device__ float* d_Multiply_355_0;
__device__ float* d_Add_351_0;
__device__ float* d_Multiply_356_0;
__device__ float* d_Add_352_0;
__device__ float* d_Dot_372_0;
__device__ float* d_Dot_357_0;
__device__ float* d_Dot_370_0;
__device__ float* d_Dot_365_0;
__device__ float* d_Dot_358_0;
__device__ float* d_Dot_371_0;
__device__ float* d_Dot_367_0;
__device__ float* d_Dot_366_0;
__device__ float* d_Dot_368_0;
__device__ float* d_Dot_369_0;
__device__ float* d_Dot_363_0;
__device__ float* d_Dot_362_0;
__device__ float* d_Dot_360_0;
__device__ float* d_Dot_359_0;
__device__ float* d_Dot_361_0;
__device__ float* d_Dot_364_0;
__device__ float* d_Multiply_442_0;
__device__ float* d_Add_436_0;
__device__ float* d_Multiply_443_0;
__device__ float* d_Add_437_0;
__device__ float* d_Multiply_444_0;
__device__ float* d_Add_438_0;
__device__ float* d_Dot_454_0;
__device__ float* d_Dot_453_0;
__device__ float* d_Dot_457_0;
__device__ float* d_Dot_465_0;
__device__ float* d_Dot_452_0;
__device__ float* d_Dot_450_0;
__device__ float* d_Dot_464_0;
__device__ float* d_Dot_451_0;
__device__ float* d_Dot_445_0;
__device__ float* d_Dot_446_0;
__device__ float* d_Dot_449_0;
__device__ float* d_Dot_448_0;
__device__ float* d_Dot_447_0;
__device__ float* d_Dot_462_0;
__device__ float* d_Dot_463_0;
__device__ float* d_Dot_461_0;
__device__ float* d_Dot_467_0;
__device__ float* d_Dot_466_0;
__device__ float* d_Dot_468_0;
__device__ float* d_Dot_455_0;
__device__ float* d_Dot_459_0;
__device__ float* d_Dot_460_0;
__device__ float* d_Dot_458_0;
__device__ float* d_Dot_456_0;
__device__ float* d_Multiply_561_0;
__device__ float* d_Add_553_0;
__device__ float* d_Multiply_562_0;
__device__ float* d_Add_554_0;
__device__ float* d_Multiply_563_0;
__device__ float* d_Add_555_0;
__device__ float* d_Multiply_564_0;
__device__ float* d_Add_556_0;
__device__ float* d_Dot_580_0;
__device__ float* d_Dot_573_0;
__device__ float* d_Dot_575_0;
__device__ float* d_Dot_574_0;
__device__ float* d_Dot_577_0;
__device__ float* d_Dot_576_0;
__device__ float* d_Dot_578_0;
__device__ float* d_Dot_579_0;
__device__ float* d_Dot_582_0;
__device__ float* d_Dot_581_0;
__device__ float* d_Dot_587_0;
__device__ float* d_Dot_592_0;
__device__ float* d_Dot_591_0;
__device__ float* d_Dot_567_0;
__device__ float* d_Dot_596_0;
__device__ float* d_Dot_583_0;
__device__ float* d_Dot_568_0;
__device__ float* d_Dot_565_0;
__device__ float* d_Dot_594_0;
__device__ float* d_Dot_569_0;
__device__ float* d_Dot_584_0;
__device__ float* d_Dot_588_0;
__device__ float* d_Dot_586_0;
__device__ float* d_Dot_585_0;
__device__ float* d_Dot_589_0;
__device__ float* d_Dot_590_0;
__device__ float* d_Dot_593_0;
__device__ float* d_Dot_595_0;
__device__ float* d_Dot_566_0;
__device__ float* d_Dot_572_0;
__device__ float* d_Dot_571_0;
__device__ float* d_Dot_570_0;
__device__ float* d_Multiply_712_0;
__device__ float* d_Add_702_0;
__device__ float* d_Multiply_713_0;
__device__ float* d_Add_703_0;
__device__ float* d_Multiply_714_0;
__device__ float* d_Add_704_0;
__device__ float* d_Multiply_715_0;
__device__ float* d_Add_705_0;
__device__ float* d_Multiply_716_0;
__device__ float* d_Add_706_0;
__device__ float* d_Dot_737_0;
__device__ float* d_Dot_741_0;
__device__ float* d_Dot_742_0;
__device__ float* d_Dot_743_0;
__device__ float* d_Dot_725_0;
__device__ float* d_Dot_754_0;
__device__ float* d_Dot_746_0;
__device__ float* d_Dot_717_0;
__device__ float* d_Dot_730_0;
__device__ float* d_Dot_748_0;
__device__ float* d_Dot_719_0;
__device__ float* d_Dot_745_0;
__device__ float* d_Dot_750_0;
__device__ float* d_Dot_721_0;
__device__ float* d_Dot_749_0;
__device__ float* d_Dot_720_0;
__device__ float* d_Dot_747_0;
__device__ float* d_Dot_718_0;
__device__ float* d_Dot_744_0;
__device__ float* d_Dot_752_0;
__device__ float* d_Dot_723_0;
__device__ float* d_Dot_751_0;
__device__ float* d_Dot_722_0;
__device__ float* d_Dot_753_0;
__device__ float* d_Dot_724_0;
__device__ float* d_Dot_755_0;
__device__ float* d_Dot_726_0;
__device__ float* d_Dot_756_0;
__device__ float* d_Dot_727_0;
__device__ float* d_Dot_736_0;
__device__ float* d_Dot_735_0;
__device__ float* d_Dot_734_0;
__device__ float* d_Dot_733_0;
__device__ float* d_Dot_740_0;
__device__ float* d_Dot_739_0;
__device__ float* d_Dot_738_0;
__device__ float* d_Dot_729_0;
__device__ float* d_Dot_728_0;
__device__ float* d_Dot_732_0;
__device__ float* d_Dot_731_0;
__device__ float* d_Multiply_895_0;
__device__ float* d_Add_883_0;
__device__ float* d_Multiply_896_0;
__device__ float* d_Add_884_0;
__device__ float* d_Multiply_897_0;
__device__ float* d_Add_885_0;
__device__ float* d_Multiply_898_0;
__device__ float* d_Add_886_0;
__device__ float* d_Multiply_899_0;
__device__ float* d_Add_887_0;
__device__ float* d_Multiply_900_0;
__device__ float* d_Add_888_0;
__device__ float* d_Dot_917_0;
__device__ float* d_Dot_946_0;
__device__ float* d_Dot_920_0;
__device__ float* d_Dot_919_0;
__device__ float* d_Dot_924_0;
__device__ float* d_Dot_945_0;
__device__ float* d_Dot_916_0;
__device__ float* d_Dot_944_0;
__device__ float* d_Dot_915_0;
__device__ float* d_Dot_943_0;
__device__ float* d_Dot_914_0;
__device__ float* d_Dot_934_0;
__device__ float* d_Dot_905_0;
__device__ float* d_Dot_906_0;
__device__ float* d_Dot_901_0;
__device__ float* d_Dot_903_0;
__device__ float* d_Dot_902_0;
__device__ float* d_Dot_937_0;
__device__ float* d_Dot_908_0;
__device__ float* d_Dot_904_0;
__device__ float* d_Dot_907_0;
__device__ float* d_Dot_938_0;
__device__ float* d_Dot_909_0;
__device__ float* d_Dot_910_0;
__device__ float* d_Dot_940_0;
__device__ float* d_Dot_911_0;
__device__ float* d_Dot_912_0;
__device__ float* d_Dot_942_0;
__device__ float* d_Dot_913_0;
__device__ float* d_Dot_947_0;
__device__ float* d_Dot_918_0;
__device__ float* d_Dot_941_0;
__device__ float* d_Dot_935_0;
__device__ float* d_Dot_948_0;
__device__ float* d_Dot_939_0;
__device__ float* d_Dot_936_0;
__device__ float* d_Dot_933_0;
__device__ float* d_Dot_932_0;
__device__ float* d_Dot_931_0;
__device__ float* d_Dot_930_0;
__device__ float* d_Dot_929_0;
__device__ float* d_Dot_928_0;
__device__ float* d_Dot_927_0;
__device__ float* d_Dot_926_0;
__device__ float* d_Dot_925_0;
__device__ float* d_Dot_923_0;
__device__ float* d_Dot_922_0;
__device__ float* d_Dot_921_0;
__device__ float* d_Multiply_1113_0;
__device__ float* d_Add_1097_0;
__device__ float* d_Add_1096_0;
__device__ float* d_Add_1098_0;
__device__ float* d_Multiply_1114_0;
__device__ float* d_Add_1099_0;
__device__ float* d_Multiply_1115_0;
__device__ float* d_Multiply_1116_0;
__device__ float* d_Add_1100_0;
__device__ float* d_Multiply_1110_0;
__device__ float* d_Multiply_1112_0;
__device__ float* d_Add_1102_0;
__device__ float* d_Add_1101_0;
__device__ float* d_Multiply_1111_0;
__device__ float* d_Dot_1144_0;
__device__ float* d_Dot_1142_0;
__device__ float* d_Dot_1141_0;
__device__ float* d_Dot_1164_0;
__device__ float* d_Dot_1135_0;
__device__ float* d_Dot_1137_0;
__device__ float* d_Dot_1139_0;
__device__ float* d_Dot_1140_0;
__device__ float* d_Dot_1138_0;
__device__ float* d_Dot_1136_0;
__device__ float* d_Dot_1134_0;
__device__ float* d_Dot_1133_0;
__device__ float* d_Dot_1124_0;
__device__ float* d_Dot_1123_0;
__device__ float* d_Dot_1121_0;
__device__ float* d_Dot_1132_0;
__device__ float* d_Dot_1119_0;
__device__ float* d_Dot_1125_0;
__device__ float* d_Dot_1127_0;
__device__ float* d_Dot_1126_0;
__device__ float* d_Dot_1129_0;
__device__ float* d_Dot_1128_0;
__device__ float* d_Dot_1130_0;
__device__ float* d_Dot_1117_0;
__device__ float* d_Dot_1160_0;
__device__ float* d_Dot_1131_0;
__device__ float* d_Dot_1118_0;
__device__ float* d_Dot_1120_0;
__device__ float* d_Dot_1122_0;
__device__ float* d_Dot_1161_0;
__device__ float* d_Dot_1163_0;
__device__ float* d_Dot_1169_0;
__device__ float* d_Dot_1166_0;
__device__ float* d_Dot_1168_0;
__device__ float* d_Dot_1171_0;
__device__ float* d_Dot_1170_0;
__device__ float* d_Dot_1167_0;
__device__ float* d_Dot_1159_0;
__device__ float* d_Dot_1172_0;
__device__ float* d_Dot_1143_0;
__device__ float* d_Dot_1165_0;
__device__ float* d_Dot_1162_0;
__device__ float* d_Dot_1158_0;
__device__ float* d_Dot_1157_0;
__device__ float* d_Dot_1149_0;
__device__ float* d_Dot_1154_0;
__device__ float* d_Dot_1153_0;
__device__ float* d_Dot_1151_0;
__device__ float* d_Dot_1152_0;
__device__ float* d_Dot_1150_0;
__device__ float* d_Dot_1156_0;
__device__ float* d_Dot_1155_0;
__device__ float* d_Dot_1148_0;
__device__ float* d_Dot_1147_0;
__device__ float* d_Dot_1146_0;
__device__ float* d_Dot_1145_0;
__device__ float* d_Multiply_1360_0;
__device__ float* d_Add_1344_0;
__device__ float* d_Multiply_1361_0;
__device__ float* d_Add_1345_0;
__device__ float* d_Multiply_1362_0;
__device__ float* d_Multiply_1357_0;
__device__ float* d_Add_1347_0;
__device__ float* d_Add_1346_0;
__device__ float* d_Multiply_1363_0;
__device__ float* d_Multiply_1358_0;
__device__ float* d_Multiply_1364_0;
__device__ float* d_Add_1343_0;
__device__ float* d_Multiply_1359_0;
__device__ float* d_Add_1341_0;
__device__ float* d_Add_1342_0;
__device__ float* d_Dot_1385_0;
__device__ float* d_Dot_1392_0;
__device__ float* d_Dot_1391_0;
__device__ float* d_Dot_1390_0;
__device__ float* d_Dot_1389_0;
__device__ float* d_Dot_1388_0;
__device__ float* d_Dot_1387_0;
__device__ float* d_Dot_1366_0;
__device__ float* d_Dot_1365_0;
__device__ float* d_Dot_1368_0;
__device__ float* d_Dot_1367_0;
__device__ float* d_Dot_1369_0;
__device__ float* d_Dot_1376_0;
__device__ float* d_Dot_1375_0;
__device__ float* d_Dot_1384_0;
__device__ float* d_Dot_1371_0;
__device__ float* d_Dot_1410_0;
__device__ float* d_Dot_1381_0;
__device__ float* d_Dot_1382_0;
__device__ float* d_Dot_1383_0;
__device__ float* d_Dot_1370_0;
__device__ float* d_Dot_1409_0;
__device__ float* d_Dot_1380_0;
__device__ float* d_Dot_1377_0;
__device__ float* d_Dot_1378_0;
__device__ float* d_Dot_1379_0;
__device__ float* d_Dot_1372_0;
__device__ float* d_Dot_1373_0;
__device__ float* d_Dot_1374_0;
__device__ float* d_Dot_1411_0;
__device__ float* d_Dot_1412_0;
__device__ float* d_Dot_1413_0;
__device__ float* d_Dot_1414_0;
__device__ float* d_Dot_1415_0;
__device__ float* d_Dot_1386_0;
__device__ float* d_Dot_1416_0;
__device__ float* d_Dot_1417_0;
__device__ float* d_Dot_1405_0;
__device__ float* d_Dot_1418_0;
__device__ float* d_Dot_1419_0;
__device__ float* d_Dot_1420_0;
__device__ float* d_Dot_1404_0;
__device__ float* d_Dot_1403_0;
__device__ float* d_Dot_1402_0;
__device__ float* d_Dot_1401_0;
__device__ float* d_Dot_1407_0;
__device__ float* d_Dot_1406_0;
__device__ float* d_Dot_1408_0;
__device__ float* d_Dot_1395_0;
__device__ float* d_Dot_1394_0;
__device__ float* d_Dot_1398_0;
__device__ float* d_Dot_1397_0;
__device__ float* d_Dot_1396_0;
__device__ float* d_Dot_1393_0;
__device__ float* d_Dot_1400_0;
__device__ float* d_Dot_1399_0;
__device__ float* d_Multiply_1584_0;
__device__ float* d_Add_1570_0;
__device__ float* d_Add_1569_0;
__device__ float* d_Add_1568_0;
__device__ float* d_Multiply_1585_0;
__device__ float* d_Add_1571_0;
__device__ float* d_Multiply_1586_0;
__device__ float* d_Multiply_1582_0;
__device__ float* d_Add_1572_0;
__device__ float* d_Multiply_1587_0;
__device__ float* d_Multiply_1583_0;
__device__ float* d_Add_1573_0;
__device__ float* d_Multiply_1588_0;
__device__ float* d_Dot_1592_0;
__device__ float* d_Dot_1591_0;
__device__ float* d_Dot_1589_0;
__device__ float* d_Dot_1625_0;
__device__ float* d_Dot_1596_0;
__device__ float* d_Dot_1595_0;
__device__ float* d_Dot_1628_0;
__device__ float* d_Dot_1599_0;
__device__ float* d_Dot_1634_0;
__device__ float* d_Dot_1605_0;
__device__ float* d_Dot_1606_0;
__device__ float* d_Dot_1593_0;
__device__ float* d_Dot_1636_0;
__device__ float* d_Dot_1607_0;
__device__ float* d_Dot_1594_0;
__device__ float* d_Dot_1631_0;
__device__ float* d_Dot_1602_0;
__device__ float* d_Dot_1632_0;
__device__ float* d_Dot_1603_0;
__device__ float* d_Dot_1604_0;
__device__ float* d_Dot_1630_0;
__device__ float* d_Dot_1601_0;
__device__ float* d_Dot_1608_0;
__device__ float* d_Dot_1629_0;
__device__ float* d_Dot_1600_0;
__device__ float* d_Dot_1626_0;
__device__ float* d_Dot_1597_0;
__device__ float* d_Dot_1627_0;
__device__ float* d_Dot_1598_0;
__device__ float* d_Dot_1635_0;
__device__ float* d_Dot_1620_0;
__device__ float* d_Dot_1633_0;
__device__ float* d_Dot_1619_0;
__device__ float* d_Dot_1590_0;
__device__ float* d_Dot_1623_0;
__device__ float* d_Dot_1618_0;
__device__ float* d_Dot_1622_0;
__device__ float* d_Dot_1621_0;
__device__ float* d_Dot_1617_0;
__device__ float* d_Dot_1624_0;
__device__ float* d_Dot_1615_0;
__device__ float* d_Dot_1614_0;
__device__ float* d_Dot_1613_0;
__device__ float* d_Dot_1609_0;
__device__ float* d_Dot_1612_0;
__device__ float* d_Dot_1611_0;
__device__ float* d_Dot_1616_0;
__device__ float* d_Dot_1610_0;
__device__ float* d_Multiply_1777_0;
__device__ float* d_Add_1765_0;
__device__ float* d_Multiply_1776_0;
__device__ float* d_Add_1764_0;
__device__ float* d_Multiply_1775_0;
__device__ float* d_Add_1763_0;
__device__ float* d_Multiply_1778_0;
__device__ float* d_Add_1766_0;
__device__ float* d_Multiply_1779_0;
__device__ float* d_Add_1767_0;
__device__ float* d_Multiply_1780_0;
__device__ float* d_Dot_1787_0;
__device__ float* d_Dot_1816_0;
__device__ float* d_Dot_1786_0;
__device__ float* d_Dot_1815_0;
__device__ float* d_Dot_1785_0;
__device__ float* d_Dot_1814_0;
__device__ float* d_Dot_1784_0;
__device__ float* d_Dot_1813_0;
__device__ float* d_Dot_1783_0;
__device__ float* d_Dot_1812_0;
__device__ float* d_Dot_1782_0;
__device__ float* d_Dot_1811_0;
__device__ float* d_Dot_1781_0;
__device__ float* d_Dot_1810_0;
__device__ float* d_Dot_1794_0;
__device__ float* d_Dot_1793_0;
__device__ float* d_Dot_1795_0;
__device__ float* d_Dot_1808_0;
__device__ float* d_Dot_1796_0;
__device__ float* d_Dot_1809_0;
__device__ float* d_Dot_1799_0;
__device__ float* d_Dot_1797_0;
__device__ float* d_Dot_1798_0;
__device__ float* d_Dot_1800_0;
__device__ float* d_Dot_1817_0;
__device__ float* d_Dot_1788_0;
__device__ float* d_Dot_1791_0;
__device__ float* d_Dot_1818_0;
__device__ float* d_Dot_1789_0;
__device__ float* d_Dot_1819_0;
__device__ float* d_Dot_1790_0;
__device__ float* d_Dot_1820_0;
__device__ float* d_Dot_1804_0;
__device__ float* d_Dot_1803_0;
__device__ float* d_Dot_1806_0;
__device__ float* d_Dot_1807_0;
__device__ float* d_Dot_1802_0;
__device__ float* d_Dot_1805_0;
__device__ float* d_Dot_1801_0;
__device__ float* d_Dot_1792_0;
__device__ float* d_Multiply_1937_0;
__device__ float* d_Add_1927_0;
__device__ float* d_Multiply_1938_0;
__device__ float* d_Add_1928_0;
__device__ float* d_Multiply_1936_0;
__device__ float* d_Add_1926_0;
__device__ float* d_Multiply_1939_0;
__device__ float* d_Add_1929_0;
__device__ float* d_Multiply_1940_0;
__device__ float* d_Dot_1949_0;
__device__ float* d_Dot_1946_0;
__device__ float* d_Dot_1953_0;
__device__ float* d_Dot_1954_0;
__device__ float* d_Dot_1955_0;
__device__ float* d_Dot_1956_0;
__device__ float* d_Dot_1957_0;
__device__ float* d_Dot_1958_0;
__device__ float* d_Dot_1959_0;
__device__ float* d_Dot_1960_0;
__device__ float* d_Dot_1944_0;
__device__ float* d_Dot_1943_0;
__device__ float* d_Dot_1972_0;
__device__ float* d_Dot_1941_0;
__device__ float* d_Dot_1970_0;
__device__ float* d_Dot_1969_0;
__device__ float* d_Dot_1950_0;
__device__ float* d_Dot_1963_0;
__device__ float* d_Dot_1951_0;
__device__ float* d_Dot_1964_0;
__device__ float* d_Dot_1952_0;
__device__ float* d_Dot_1965_0;
__device__ float* d_Dot_1967_0;
__device__ float* d_Dot_1968_0;
__device__ float* d_Dot_1942_0;
__device__ float* d_Dot_1971_0;
__device__ float* d_Dot_1962_0;
__device__ float* d_Dot_1961_0;
__device__ float* d_Dot_1966_0;
__device__ float* d_Dot_1948_0;
__device__ float* d_Dot_1945_0;
__device__ float* d_Dot_1947_0;
__device__ float* d_Multiply_2066_0;
__device__ float* d_Add_2058_0;
__device__ float* d_Multiply_2065_0;
__device__ float* d_Add_2057_0;
__device__ float* d_Multiply_2067_0;
__device__ float* d_Add_2059_0;
__device__ float* d_Multiply_2068_0;
__device__ float* d_Dot_2072_0;
__device__ float* d_Dot_2071_0;
__device__ float* d_Dot_2070_0;
__device__ float* d_Dot_2080_0;
__device__ float* d_Dot_2073_0;
__device__ float* d_Dot_2089_0;
__device__ float* d_Dot_2076_0;
__device__ float* d_Dot_2075_0;
__device__ float* d_Dot_2079_0;
__device__ float* d_Dot_2074_0;
__device__ float* d_Dot_2091_0;
__device__ float* d_Dot_2078_0;
__device__ float* d_Dot_2077_0;
__device__ float* d_Dot_2090_0;
__device__ float* d_Dot_2092_0;
__device__ float* d_Dot_2081_0;
__device__ float* d_Dot_2088_0;
__device__ float* d_Dot_2086_0;
__device__ float* d_Dot_2087_0;
__device__ float* d_Dot_2084_0;
__device__ float* d_Dot_2085_0;
__device__ float* d_Dot_2083_0;
__device__ float* d_Dot_2082_0;
__device__ float* d_Dot_2069_0;
__device__ float* d_Multiply_2163_0;
__device__ float* d_Add_2157_0;
__device__ float* d_Multiply_2162_0;
__device__ float* d_Add_2156_0;
__device__ float* d_Multiply_2164_0;
__device__ float* d_Dot_2175_0;
__device__ float* d_Dot_2176_0;
__device__ float* d_Dot_2168_0;
__device__ float* d_Dot_2177_0;
__device__ float* d_Dot_2165_0;
__device__ float* d_Dot_2178_0;
__device__ float* d_Dot_2166_0;
__device__ float* d_Dot_2179_0;
__device__ float* d_Dot_2167_0;
__device__ float* d_Dot_2180_0;
__device__ float* d_Dot_2169_0;
__device__ float* d_Dot_2172_0;
__device__ float* d_Dot_2171_0;
__device__ float* d_Dot_2170_0;
__device__ float* d_Dot_2174_0;
__device__ float* d_Dot_2173_0;
__device__ float* d_Multiply_2227_0;
__device__ float* d_Add_2223_0;
__device__ float* d_Multiply_2228_0;
__device__ float* d_Dot_2231_0;
__device__ float* d_Dot_2229_0;
__device__ float* d_Dot_2232_0;
__device__ float* d_Dot_2230_0;
__device__ float* d_Dot_2236_0;
__device__ float* d_Dot_2234_0;
__device__ float* d_Dot_2235_0;
__device__ float* d_Dot_2233_0;
__device__ float* d_Multiply_2260_0;

__device__ char* d_group_persist_CUDA_GPU0_allocator_memory_pool;
__device__ float* d_Constant_104_0;
__device__ int32_t* d_Constant_102_0;
__device__ int32_t* d_Constant_101_0;
__device__ int32_t* d_Constant_98_0;
__device__ int32_t* d_Constant_97_0;
__device__ float* d_Constant_9_0;
__device__ float* d_Constant_6_0;
__device__ float* d_Constant_3_0;
__device__ float* d_Constant_0_0;
__device__ float* d_Constant_94_0;
__device__ float* d_Constant_91_0;
__device__ float* d_Constant_88_0;
__device__ float* d_Constant_85_0;
__device__ float* d_Constant_82_0;
__device__ float* d_Constant_79_0;
__device__ float* d_Constant_76_0;
__device__ float* d_Constant_73_0;
__device__ float* d_Constant_70_0;
__device__ float* d_Constant_67_0;
__device__ float* d_Constant_64_0;
__device__ float* d_Constant_61_0;
__device__ float* d_Constant_58_0;
__device__ float* d_Constant_55_0;
__device__ float* d_Constant_52_0;
__device__ float* d_Constant_49_0;
__device__ float* d_Constant_46_0;
__device__ float* d_Constant_43_0;
__device__ float* d_Constant_40_0;
__device__ float* d_Constant_37_0;
__device__ float* d_Constant_34_0;
__device__ float* d_Constant_31_0;
__device__ float* d_Constant_28_0;
__device__ float* d_Constant_25_0;
__device__ float* d_Constant_22_0;
__device__ float* d_Constant_19_0;
__device__ float* d_Constant_16_0;
__device__ float* d_Constant_13_0;
__device__ float* d_Constant_10_0;
__device__ float* d_Constant_7_0;
__device__ float* d_Constant_4_0;
__device__ float* d_Constant_1_0;
__device__ float* d_Constant_108_0;
__device__ float* d_Reshape_291_0;
__device__ float* d_Constant_11_0;
__device__ float* d_Reshape_287_0;
__device__ float* d_Constant_8_0;
__device__ float* d_Reshape_285_0;
__device__ float* d_Constant_5_0;
__device__ float* d_Reshape_283_0;
__device__ float* d_Constant_2_0;
__device__ float* d_Reshape_281_0;
__device__ float* d_Constant_100_0;
__device__ float* d_Constant_21_0;
__device__ float* d_Constant_18_0;
__device__ float* d_Constant_15_0;
__device__ float* d_Constant_12_0;
__device__ float* d_Constant_119_0;
__device__ float* d_Reshape_341_0;
__device__ float* d_Constant_109_0;
__device__ float* d_Reshape_335_0;
__device__ float* d_Constant_23_0;
__device__ float* d_Reshape_323_0;
__device__ float* d_Constant_20_0;
__device__ float* d_Reshape_321_0;
__device__ float* d_Constant_17_0;
__device__ float* d_Reshape_319_0;
__device__ float* d_Constant_14_0;
__device__ float* d_Reshape_317_0;
__device__ float* d_Constant_33_0;
__device__ float* d_Constant_30_0;
__device__ float* d_Constant_27_0;
__device__ float* d_Constant_24_0;
__device__ float* d_Constant_130_0;
__device__ float* d_Reshape_423_0;
__device__ float* d_Constant_120_0;
__device__ float* d_Reshape_417_0;
__device__ float* d_Constant_110_0;
__device__ float* d_Reshape_411_0;
__device__ float* d_Constant_35_0;
__device__ float* d_Reshape_391_0;
__device__ float* d_Constant_32_0;
__device__ float* d_Reshape_389_0;
__device__ float* d_Constant_29_0;
__device__ float* d_Reshape_387_0;
__device__ float* d_Constant_26_0;
__device__ float* d_Reshape_385_0;
__device__ float* d_Constant_45_0;
__device__ float* d_Constant_42_0;
__device__ float* d_Constant_39_0;
__device__ float* d_Constant_36_0;
__device__ float* d_Constant_141_0;
__device__ float* d_Reshape_537_0;
__device__ float* d_Constant_131_0;
__device__ float* d_Reshape_531_0;
__device__ float* d_Constant_121_0;
__device__ float* d_Reshape_525_0;
__device__ float* d_Constant_111_0;
__device__ float* d_Reshape_519_0;
__device__ float* d_Constant_47_0;
__device__ float* d_Reshape_491_0;
__device__ float* d_Constant_44_0;
__device__ float* d_Reshape_489_0;
__device__ float* d_Constant_41_0;
__device__ float* d_Reshape_487_0;
__device__ float* d_Constant_38_0;
__device__ float* d_Reshape_485_0;
__device__ float* d_Constant_57_0;
__device__ float* d_Constant_54_0;
__device__ float* d_Constant_51_0;
__device__ float* d_Constant_48_0;
__device__ float* d_Constant_152_0;
__device__ float* d_Reshape_683_0;
__device__ float* d_Constant_142_0;
__device__ float* d_Reshape_677_0;
__device__ float* d_Constant_132_0;
__device__ float* d_Reshape_671_0;
__device__ float* d_Constant_122_0;
__device__ float* d_Reshape_665_0;
__device__ float* d_Constant_112_0;
__device__ float* d_Reshape_659_0;
__device__ float* d_Constant_59_0;
__device__ float* d_Reshape_623_0;
__device__ float* d_Constant_56_0;
__device__ float* d_Reshape_621_0;
__device__ float* d_Constant_53_0;
__device__ float* d_Reshape_619_0;
__device__ float* d_Constant_50_0;
__device__ float* d_Reshape_617_0;
__device__ float* d_Constant_69_0;
__device__ float* d_Constant_66_0;
__device__ float* d_Constant_63_0;
__device__ float* d_Constant_60_0;
__device__ float* d_Constant_163_0;
__device__ float* d_Reshape_861_0;
__device__ float* d_Constant_153_0;
__device__ float* d_Reshape_855_0;
__device__ float* d_Constant_143_0;
__device__ float* d_Reshape_849_0;
__device__ float* d_Constant_133_0;
__device__ float* d_Reshape_843_0;
__device__ float* d_Constant_123_0;
__device__ float* d_Reshape_837_0;
__device__ float* d_Constant_113_0;
__device__ float* d_Reshape_831_0;
__device__ float* d_Constant_71_0;
__device__ float* d_Reshape_787_0;
__device__ float* d_Constant_68_0;
__device__ float* d_Reshape_785_0;
__device__ float* d_Constant_65_0;
__device__ float* d_Reshape_783_0;
__device__ float* d_Constant_62_0;
__device__ float* d_Reshape_781_0;
__device__ float* d_Constant_81_0;
__device__ float* d_Constant_78_0;
__device__ float* d_Constant_75_0;
__device__ float* d_Constant_72_0;
__device__ float* d_Constant_83_0;
__device__ float* d_Reshape_983_0;
__device__ float* d_Constant_80_0;
__device__ float* d_Reshape_981_0;
__device__ float* d_Constant_77_0;
__device__ float* d_Reshape_979_0;
__device__ float* d_Constant_74_0;
__device__ float* d_Reshape_977_0;
__device__ float* d_Constant_174_0;
__device__ float* d_Reshape_1071_0;
__device__ float* d_Constant_164_0;
__device__ float* d_Reshape_1065_0;
__device__ float* d_Constant_154_0;
__device__ float* d_Reshape_1059_0;
__device__ float* d_Constant_144_0;
__device__ float* d_Reshape_1053_0;
__device__ float* d_Constant_134_0;
__device__ float* d_Reshape_1047_0;
__device__ float* d_Constant_124_0;
__device__ float* d_Reshape_1041_0;
__device__ float* d_Constant_114_0;
__device__ float* d_Reshape_1035_0;
__device__ float* d_Constant_93_0;
__device__ float* d_Constant_90_0;
__device__ float* d_Constant_87_0;
__device__ float* d_Constant_84_0;
__device__ float* d_Constant_185_0;
__device__ float* d_Reshape_1313_0;
__device__ float* d_Constant_175_0;
__device__ float* d_Reshape_1307_0;
__device__ float* d_Constant_165_0;
__device__ float* d_Reshape_1301_0;
__device__ float* d_Constant_155_0;
__device__ float* d_Reshape_1295_0;
__device__ float* d_Constant_145_0;
__device__ float* d_Reshape_1289_0;
__device__ float* d_Constant_135_0;
__device__ float* d_Reshape_1283_0;
__device__ float* d_Constant_125_0;
__device__ float* d_Reshape_1277_0;
__device__ float* d_Constant_115_0;
__device__ float* d_Reshape_1271_0;
__device__ float* d_Constant_95_0;
__device__ float* d_Reshape_1211_0;
__device__ float* d_Constant_92_0;
__device__ float* d_Reshape_1209_0;
__device__ float* d_Constant_89_0;
__device__ float* d_Reshape_1207_0;
__device__ float* d_Constant_86_0;
__device__ float* d_Reshape_1205_0;
__device__ float* d_Constant_186_0;
__device__ float* d_Reshape_1543_0;
__device__ float* d_Constant_176_0;
__device__ float* d_Reshape_1537_0;
__device__ float* d_Constant_166_0;
__device__ float* d_Reshape_1531_0;
__device__ float* d_Constant_156_0;
__device__ float* d_Reshape_1525_0;
__device__ float* d_Constant_146_0;
__device__ float* d_Reshape_1519_0;
__device__ float* d_Constant_136_0;
__device__ float* d_Reshape_1513_0;
__device__ float* d_Constant_126_0;
__device__ float* d_Reshape_1507_0;
__device__ float* d_Constant_187_0;
__device__ float* d_Reshape_1741_0;
__device__ float* d_Constant_177_0;
__device__ float* d_Reshape_1735_0;
__device__ float* d_Constant_167_0;
__device__ float* d_Reshape_1729_0;
__device__ float* d_Constant_157_0;
__device__ float* d_Reshape_1723_0;
__device__ float* d_Constant_147_0;
__device__ float* d_Reshape_1717_0;
__device__ float* d_Constant_137_0;
__device__ float* d_Reshape_1711_0;
__device__ float* d_Constant_188_0;
__device__ float* d_Reshape_1907_0;
__device__ float* d_Constant_178_0;
__device__ float* d_Reshape_1901_0;
__device__ float* d_Constant_168_0;
__device__ float* d_Reshape_1895_0;
__device__ float* d_Constant_158_0;
__device__ float* d_Reshape_1889_0;
__device__ float* d_Constant_148_0;
__device__ float* d_Reshape_1883_0;
__device__ float* d_Constant_189_0;
__device__ float* d_Reshape_2041_0;
__device__ float* d_Constant_179_0;
__device__ float* d_Reshape_2035_0;
__device__ float* d_Constant_169_0;
__device__ float* d_Reshape_2029_0;
__device__ float* d_Constant_159_0;
__device__ float* d_Reshape_2023_0;
__device__ float* d_Constant_190_0;
__device__ float* d_Reshape_2143_0;
__device__ float* d_Constant_180_0;
__device__ float* d_Reshape_2137_0;
__device__ float* d_Constant_170_0;
__device__ float* d_Reshape_2131_0;
__device__ float* d_Constant_191_0;
__device__ float* d_Reshape_2213_0;
__device__ float* d_Constant_181_0;
__device__ float* d_Reshape_2207_0;
__device__ float* d_Constant_192_0;
__device__ float* d_Reshape_2251_0;


__global__ void init_global_vars(char* group_persist_CUDA_GPU0_allocator_memory_pool, char *group_0_CUDA_GPU0_allocator_memory_pool)
{
  d_group_0_CUDA_GPU0_allocator_memory_pool = group_0_CUDA_GPU0_allocator_memory_pool;
  d_group_persist_CUDA_GPU0_allocator_memory_pool = group_persist_CUDA_GPU0_allocator_memory_pool;
  d_Broadcast_212_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Concat_194_0 = (int32_t*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Concat_193_0 = (int32_t*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1088);
  d_Slice_205_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1152);
  d_Slice_207_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2176);
  d_Slice_203_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3200);
  d_Slice_209_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4224);
  d_Slice_201_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5248);
  d_Slice_197_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6272);
  d_Slice_199_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7296);
  d_Slice_195_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8320);
  d_Reshape_210_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4224);
  d_Reshape_208_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2176);
  d_Reshape_206_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1152);
  d_Reshape_204_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3200);
  d_Reshape_202_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5248);
  d_Reshape_200_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7296);
  d_Reshape_198_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6272);
  d_Reshape_196_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8320);
  d_Dot_239_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9344);
  d_Dot_234_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10368);
  d_Dot_231_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11392);
  d_Dot_219_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12416);
  d_Dot_230_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13440);
  d_Dot_240_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14464);
  d_Dot_229_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15488);
  d_Dot_232_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16512);
  d_Dot_244_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17536);
  d_Dot_220_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_243_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+19584);
  d_Dot_242_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+20608);
  d_Dot_228_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21632);
  d_Dot_226_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22656);
  d_Dot_224_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23680);
  d_Dot_214_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_213_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_233_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26752);
  d_Dot_218_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_236_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28800);
  d_Dot_222_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29824);
  d_Dot_215_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_235_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31872);
  d_Dot_225_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32896);
  d_Dot_237_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+33920);
  d_Dot_221_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34944);
  d_Dot_223_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35968);
  d_Dot_217_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_216_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_227_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39040);
  d_Dot_238_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+40064);
  d_Dot_241_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+41088);
  d_Dot_263_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_267_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_261_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_260_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_259_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_254_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_255_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_262_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_258_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+42112);
  d_Dot_272_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+43136);
  d_Dot_249_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_256_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45184);
  d_Dot_273_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+46208);
  d_Dot_250_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_276_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+48256);
  d_Dot_253_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49280);
  d_Dot_275_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+50304);
  d_Dot_252_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_257_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52352);
  d_Dot_246_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_269_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+54400);
  d_Dot_274_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+55424);
  d_Dot_251_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_245_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_268_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+58496);
  d_Dot_271_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+59520);
  d_Dot_248_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Dot_270_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+61568);
  d_Dot_247_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Dot_264_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+63616);
  d_Dot_265_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+64640);
  d_Dot_266_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+65664);
  d_Add_298_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Multiply_300_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+66688);
  d_Dot_302_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_301_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_303_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_304_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_306_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_305_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_307_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Dot_308_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Multiply_355_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+66688);
  d_Add_351_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+67712);
  d_Multiply_356_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_352_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+69760);
  d_Dot_372_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_357_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12416);
  d_Dot_370_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_365_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_358_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_371_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_367_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_366_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_368_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_369_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_363_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_362_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_360_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_359_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_361_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_364_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Multiply_442_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Add_436_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+66688);
  d_Multiply_443_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_437_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+70784);
  d_Multiply_444_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+71808);
  d_Add_438_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+72832);
  d_Dot_454_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_453_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_457_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_465_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12416);
  d_Dot_452_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_450_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23680);
  d_Dot_464_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_451_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_445_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_446_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29824);
  d_Dot_449_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_448_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34944);
  d_Dot_447_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35968);
  d_Dot_462_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_463_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_461_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_467_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45184);
  d_Dot_466_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_468_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49280);
  d_Dot_455_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_459_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_460_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_458_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_456_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Multiply_561_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Add_553_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+67712);
  d_Multiply_562_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_554_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+69760);
  d_Multiply_563_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+71808);
  d_Add_555_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+73856);
  d_Multiply_564_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+74880);
  d_Add_556_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+75904);
  d_Dot_580_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_573_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_575_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_574_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_577_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_576_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12416);
  d_Dot_578_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_579_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21632);
  d_Dot_582_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22656);
  d_Dot_581_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23680);
  d_Dot_587_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_592_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_591_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_567_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29824);
  d_Dot_596_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_583_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32896);
  d_Dot_568_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34944);
  d_Dot_565_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35968);
  d_Dot_594_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_569_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_584_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39040);
  d_Dot_588_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+42112);
  d_Dot_586_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_585_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45184);
  d_Dot_589_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_590_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49280);
  d_Dot_593_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_595_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52352);
  d_Dot_566_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_572_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_571_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_570_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Multiply_712_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Add_702_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+66688);
  d_Multiply_713_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_703_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+70784);
  d_Multiply_714_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+71808);
  d_Add_704_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+72832);
  d_Multiply_715_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+74880);
  d_Add_705_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+76928);
  d_Multiply_716_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+77952);
  d_Add_706_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+78976);
  d_Dot_737_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_741_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_742_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_743_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_725_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_754_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_746_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_717_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_730_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11392);
  d_Dot_748_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12416);
  d_Dot_719_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13440);
  d_Dot_745_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15488);
  d_Dot_750_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16512);
  d_Dot_721_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_749_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21632);
  d_Dot_720_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22656);
  d_Dot_747_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23680);
  d_Dot_718_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_744_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_752_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_723_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29824);
  d_Dot_751_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_722_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32896);
  d_Dot_753_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34944);
  d_Dot_724_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35968);
  d_Dot_755_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_726_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_756_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39040);
  d_Dot_727_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+42112);
  d_Dot_736_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_735_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45184);
  d_Dot_734_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_733_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49280);
  d_Dot_740_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_739_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52352);
  d_Dot_738_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_729_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_728_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_732_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Dot_731_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+63616);
  d_Multiply_895_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Add_883_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+67712);
  d_Multiply_896_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_884_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+69760);
  d_Multiply_897_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+71808);
  d_Add_885_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+73856);
  d_Multiply_898_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+74880);
  d_Add_886_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+75904);
  d_Multiply_899_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+77952);
  d_Add_887_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+80000);
  d_Multiply_900_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+81024);
  d_Add_888_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+82048);
  d_Dot_917_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_946_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_920_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_919_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_924_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_945_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_916_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_944_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_915_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_943_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10368);
  d_Dot_914_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11392);
  d_Dot_934_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12416);
  d_Dot_905_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13440);
  d_Dot_906_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15488);
  d_Dot_901_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16512);
  d_Dot_903_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_902_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21632);
  d_Dot_937_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22656);
  d_Dot_908_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23680);
  d_Dot_904_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_907_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_938_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26752);
  d_Dot_909_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_910_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28800);
  d_Dot_940_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29824);
  d_Dot_911_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_912_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31872);
  d_Dot_942_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32896);
  d_Dot_913_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34944);
  d_Dot_947_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35968);
  d_Dot_918_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_941_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_935_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39040);
  d_Dot_948_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+42112);
  d_Dot_939_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_936_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45184);
  d_Dot_933_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_932_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49280);
  d_Dot_931_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_930_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52352);
  d_Dot_929_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_928_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_927_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_926_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+58496);
  d_Dot_925_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Dot_923_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+63616);
  d_Dot_922_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+64640);
  d_Dot_921_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+65664);
  d_Multiply_1113_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Add_1097_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+66688);
  d_Add_1096_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_1098_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+70784);
  d_Multiply_1114_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+71808);
  d_Add_1099_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+72832);
  d_Multiply_1115_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+74880);
  d_Multiply_1116_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+76928);
  d_Add_1100_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+77952);
  d_Multiply_1110_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+78976);
  d_Multiply_1112_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+81024);
  d_Add_1102_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+83072);
  d_Add_1101_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+84096);
  d_Multiply_1111_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+85120);
  d_Dot_1144_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_1142_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_1141_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_1164_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_1135_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_1137_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_1139_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_1140_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_1138_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_1136_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_1134_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_1133_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_1124_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_1123_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_1121_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_1132_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Dot_1119_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Dot_1125_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18560);
  d_Dot_1127_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21632);
  d_Dot_1126_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22656);
  d_Dot_1129_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23680);
  d_Dot_1128_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24704);
  d_Dot_1130_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25728);
  d_Dot_1117_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26752);
  d_Dot_1160_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27776);
  d_Dot_1131_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28800);
  d_Dot_1118_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29824);
  d_Dot_1120_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30848);
  d_Dot_1122_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31872);
  d_Dot_1161_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32896);
  d_Dot_1163_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+33920);
  d_Dot_1169_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34944);
  d_Dot_1166_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35968);
  d_Dot_1168_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36992);
  d_Dot_1171_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38016);
  d_Dot_1170_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39040);
  d_Dot_1167_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+40064);
  d_Dot_1159_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+42112);
  d_Dot_1172_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+43136);
  d_Dot_1143_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44160);
  d_Dot_1165_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45184);
  d_Dot_1162_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47232);
  d_Dot_1158_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49280);
  d_Dot_1157_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51328);
  d_Dot_1149_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52352);
  d_Dot_1154_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53376);
  d_Dot_1153_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+54400);
  d_Dot_1151_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56448);
  d_Dot_1152_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57472);
  d_Dot_1150_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+58496);
  d_Dot_1156_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+59520);
  d_Dot_1155_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60544);
  d_Dot_1148_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+61568);
  d_Dot_1147_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+63616);
  d_Dot_1146_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+64640);
  d_Dot_1145_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+65664);
  d_Multiply_1360_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62592);
  d_Add_1344_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+67712);
  d_Multiply_1361_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+69760);
  d_Add_1345_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+71808);
  d_Multiply_1362_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+73856);
  d_Multiply_1357_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+74880);
  d_Add_1347_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+75904);
  d_Add_1346_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+76928);
  d_Multiply_1363_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+78976);
  d_Multiply_1358_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+80000);
  d_Multiply_1364_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+81024);
  d_Add_1343_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+82048);
  d_Multiply_1359_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+85120);
  d_Add_1341_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+86144);
  d_Add_1342_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+87168);
  d_Dot_1385_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_1392_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_1391_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_1390_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_1389_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_1388_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_1387_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_1366_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_1365_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_1368_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_1367_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_1369_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_1376_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_1375_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_1384_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_1371_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Dot_1410_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Dot_1381_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17408);
  d_Dot_1382_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18432);
  d_Dot_1383_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+19456);
  d_Dot_1370_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+20480);
  d_Dot_1409_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21504);
  d_Dot_1380_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22528);
  d_Dot_1377_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23552);
  d_Dot_1378_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24576);
  d_Dot_1379_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25600);
  d_Dot_1372_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26624);
  d_Dot_1373_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27648);
  d_Dot_1374_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28672);
  d_Dot_1411_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29696);
  d_Dot_1412_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30720);
  d_Dot_1413_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31744);
  d_Dot_1414_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32768);
  d_Dot_1415_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+33792);
  d_Dot_1386_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34816);
  d_Dot_1416_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35840);
  d_Dot_1417_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36864);
  d_Dot_1405_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+37888);
  d_Dot_1418_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38912);
  d_Dot_1419_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39936);
  d_Dot_1420_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+40960);
  d_Dot_1404_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+41984);
  d_Dot_1403_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+43008);
  d_Dot_1402_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44032);
  d_Dot_1401_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45056);
  d_Dot_1407_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+46080);
  d_Dot_1406_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47104);
  d_Dot_1408_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+48128);
  d_Dot_1395_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49152);
  d_Dot_1394_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+50176);
  d_Dot_1398_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51200);
  d_Dot_1397_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52224);
  d_Dot_1396_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53248);
  d_Dot_1393_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+54272);
  d_Dot_1400_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+55296);
  d_Dot_1399_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56320);
  d_Multiply_1584_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57344);
  d_Add_1570_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+58368);
  d_Add_1569_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+59392);
  d_Add_1568_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+60416);
  d_Multiply_1585_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+61440);
  d_Add_1571_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+62464);
  d_Multiply_1586_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+63488);
  d_Multiply_1582_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+64512);
  d_Add_1572_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+65536);
  d_Multiply_1587_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+66560);
  d_Multiply_1583_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+68736);
  d_Add_1573_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+69760);
  d_Multiply_1588_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+70784);
  d_Dot_1592_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_1591_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_1589_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_1625_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_1596_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_1595_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_1628_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_1599_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_1634_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_1605_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_1606_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_1593_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_1636_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_1607_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_1594_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_1631_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Dot_1602_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Dot_1632_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17408);
  d_Dot_1603_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18432);
  d_Dot_1604_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+19456);
  d_Dot_1630_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+20480);
  d_Dot_1601_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21504);
  d_Dot_1608_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22528);
  d_Dot_1629_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23552);
  d_Dot_1600_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24576);
  d_Dot_1626_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25600);
  d_Dot_1597_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26624);
  d_Dot_1627_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27648);
  d_Dot_1598_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28672);
  d_Dot_1635_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29696);
  d_Dot_1620_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30720);
  d_Dot_1633_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31744);
  d_Dot_1619_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32768);
  d_Dot_1590_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+33792);
  d_Dot_1623_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34816);
  d_Dot_1618_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35840);
  d_Dot_1622_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36864);
  d_Dot_1621_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+37888);
  d_Dot_1617_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38912);
  d_Dot_1624_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39936);
  d_Dot_1615_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+40960);
  d_Dot_1614_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+41984);
  d_Dot_1613_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+43008);
  d_Dot_1609_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44032);
  d_Dot_1612_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45056);
  d_Dot_1611_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+46080);
  d_Dot_1616_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47104);
  d_Dot_1610_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+48128);
  d_Multiply_1777_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49152);
  d_Add_1765_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+50176);
  d_Multiply_1776_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+51200);
  d_Add_1764_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+52224);
  d_Multiply_1775_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+53248);
  d_Add_1763_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+54272);
  d_Multiply_1778_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+55296);
  d_Add_1766_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+56320);
  d_Multiply_1779_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+57344);
  d_Add_1767_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+61440);
  d_Multiply_1780_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+63488);
  d_Dot_1787_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_1816_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_1786_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_1815_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_1785_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_1814_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_1784_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_1813_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_1783_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_1812_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_1782_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_1811_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_1781_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_1810_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_1794_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_1793_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Dot_1795_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Dot_1808_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17408);
  d_Dot_1796_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18432);
  d_Dot_1809_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+19456);
  d_Dot_1799_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+20480);
  d_Dot_1797_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21504);
  d_Dot_1798_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22528);
  d_Dot_1800_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23552);
  d_Dot_1817_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24576);
  d_Dot_1788_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25600);
  d_Dot_1791_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26624);
  d_Dot_1818_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27648);
  d_Dot_1789_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28672);
  d_Dot_1819_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29696);
  d_Dot_1790_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30720);
  d_Dot_1820_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31744);
  d_Dot_1804_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32768);
  d_Dot_1803_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+33792);
  d_Dot_1806_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34816);
  d_Dot_1807_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35840);
  d_Dot_1802_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36864);
  d_Dot_1805_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+37888);
  d_Dot_1801_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38912);
  d_Dot_1792_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+39936);
  d_Multiply_1937_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+40960);
  d_Add_1927_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+41984);
  d_Multiply_1938_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+43008);
  d_Add_1928_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+44032);
  d_Multiply_1936_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+45056);
  d_Add_1926_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+46080);
  d_Multiply_1939_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+47104);
  d_Add_1929_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+48128);
  d_Multiply_1940_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+49152);
  d_Dot_1949_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_1946_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_1953_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_1954_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_1955_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_1956_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_1957_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_1958_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_1959_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_1960_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_1944_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_1943_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_1972_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_1941_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_1970_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_1969_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Dot_1950_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Dot_1963_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17408);
  d_Dot_1951_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18432);
  d_Dot_1964_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+19456);
  d_Dot_1952_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+20480);
  d_Dot_1965_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21504);
  d_Dot_1967_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22528);
  d_Dot_1968_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23552);
  d_Dot_1942_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24576);
  d_Dot_1971_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25600);
  d_Dot_1962_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26624);
  d_Dot_1961_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27648);
  d_Dot_1966_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28672);
  d_Dot_1948_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+29696);
  d_Dot_1945_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+30720);
  d_Dot_1947_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+31744);
  d_Multiply_2066_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+32768);
  d_Add_2058_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+33792);
  d_Multiply_2065_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+34816);
  d_Add_2057_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+35840);
  d_Multiply_2067_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+36864);
  d_Add_2059_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+37888);
  d_Multiply_2068_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+38912);
  d_Dot_2072_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_2071_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_2070_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_2080_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_2073_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_2089_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_2076_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_2075_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_2079_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_2074_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_2091_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_2078_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_2077_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_2090_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_2092_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_2081_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Dot_2088_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Dot_2086_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17408);
  d_Dot_2087_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18432);
  d_Dot_2084_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+19456);
  d_Dot_2085_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+20480);
  d_Dot_2083_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+21504);
  d_Dot_2082_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+22528);
  d_Dot_2069_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+23552);
  d_Multiply_2163_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+24576);
  d_Add_2157_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+25600);
  d_Multiply_2162_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+26624);
  d_Add_2156_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+27648);
  d_Multiply_2164_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+28672);
  d_Dot_2175_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_2176_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_2168_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_2177_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_2165_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_2178_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_2166_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_2179_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Dot_2167_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);
  d_Dot_2180_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+9216);
  d_Dot_2169_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+10240);
  d_Dot_2172_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+11264);
  d_Dot_2171_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+12288);
  d_Dot_2170_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+13312);
  d_Dot_2174_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+14336);
  d_Dot_2173_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+15360);
  d_Multiply_2227_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+16384);
  d_Add_2223_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+17408);
  d_Multiply_2228_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+18432);
  d_Dot_2231_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+0);
  d_Dot_2229_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+1024);
  d_Dot_2232_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+2048);
  d_Dot_2230_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+3072);
  d_Dot_2236_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+4096);
  d_Dot_2234_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+5120);
  d_Dot_2235_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+6144);
  d_Dot_2233_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+7168);
  d_Multiply_2260_0 = (float*)(d_group_0_CUDA_GPU0_allocator_memory_pool+8192);

  d_Constant_104_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+0);
  d_Constant_102_0 = (int32_t*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+64);
  d_Constant_101_0 = (int32_t*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+128);
  d_Constant_98_0 = (int32_t*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+192);
  d_Constant_97_0 = (int32_t*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+256);
  d_Constant_9_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+320);
  d_Constant_6_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+262464);
  d_Constant_3_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+524608);
  d_Constant_0_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+786752);
  d_Constant_94_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+1048896);
  d_Constant_91_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+1311040);
  d_Constant_88_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+1573184);
  d_Constant_85_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+1835328);
  d_Constant_82_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+2097472);
  d_Constant_79_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+2359616);
  d_Constant_76_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+2621760);
  d_Constant_73_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+2883904);
  d_Constant_70_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+3146048);
  d_Constant_67_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+3408192);
  d_Constant_64_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+3670336);
  d_Constant_61_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+3932480);
  d_Constant_58_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+4194624);
  d_Constant_55_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+4456768);
  d_Constant_52_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+4718912);
  d_Constant_49_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+4981056);
  d_Constant_46_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+5243200);
  d_Constant_43_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+5505344);
  d_Constant_40_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+5767488);
  d_Constant_37_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+6029632);
  d_Constant_34_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+6291776);
  d_Constant_31_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+6553920);
  d_Constant_28_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+6816064);
  d_Constant_25_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+7078208);
  d_Constant_22_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+7340352);
  d_Constant_19_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+7602496);
  d_Constant_16_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+7864640);
  d_Constant_13_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+8126784);
  d_Constant_10_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+8388928);
  d_Constant_7_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+8651072);
  d_Constant_4_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+8913216);
  d_Constant_1_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9175360);
  d_Constant_108_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9437504);
  d_Reshape_291_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9437504);
  d_Constant_11_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9437568);
  d_Reshape_287_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9437568);
  d_Constant_8_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9438592);
  d_Reshape_285_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9438592);
  d_Constant_5_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9439616);
  d_Reshape_283_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9439616);
  d_Constant_2_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9440640);
  d_Reshape_281_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9440640);
  d_Constant_100_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9441664);
  d_Constant_21_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9441728);
  d_Constant_18_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9703872);
  d_Constant_15_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+9966016);
  d_Constant_12_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10228160);
  d_Constant_119_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10490304);
  d_Reshape_341_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10490304);
  d_Constant_109_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10490368);
  d_Reshape_335_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10490368);
  d_Constant_23_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10490432);
  d_Reshape_323_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10490432);
  d_Constant_20_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10491456);
  d_Reshape_321_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10491456);
  d_Constant_17_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10492480);
  d_Reshape_319_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10492480);
  d_Constant_14_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10493504);
  d_Reshape_317_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10493504);
  d_Constant_33_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10494528);
  d_Constant_30_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+10756672);
  d_Constant_27_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11018816);
  d_Constant_24_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11280960);
  d_Constant_130_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543104);
  d_Reshape_423_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543104);
  d_Constant_120_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543168);
  d_Reshape_417_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543168);
  d_Constant_110_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543232);
  d_Reshape_411_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543232);
  d_Constant_35_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543296);
  d_Reshape_391_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11543296);
  d_Constant_32_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11544320);
  d_Reshape_389_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11544320);
  d_Constant_29_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11545344);
  d_Reshape_387_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11545344);
  d_Constant_26_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11546368);
  d_Reshape_385_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11546368);
  d_Constant_45_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11547392);
  d_Constant_42_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+11809536);
  d_Constant_39_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12071680);
  d_Constant_36_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12333824);
  d_Constant_141_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12595968);
  d_Reshape_537_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12595968);
  d_Constant_131_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596032);
  d_Reshape_531_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596032);
  d_Constant_121_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596096);
  d_Reshape_525_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596096);
  d_Constant_111_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596160);
  d_Reshape_519_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596160);
  d_Constant_47_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596224);
  d_Reshape_491_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12596224);
  d_Constant_44_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12597248);
  d_Reshape_489_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12597248);
  d_Constant_41_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12598272);
  d_Reshape_487_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12598272);
  d_Constant_38_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12599296);
  d_Reshape_485_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12599296);
  d_Constant_57_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12600320);
  d_Constant_54_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+12862464);
  d_Constant_51_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13124608);
  d_Constant_48_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13386752);
  d_Constant_152_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13648896);
  d_Reshape_683_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13648896);
  d_Constant_142_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13648960);
  d_Reshape_677_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13648960);
  d_Constant_132_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649024);
  d_Reshape_671_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649024);
  d_Constant_122_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649088);
  d_Reshape_665_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649088);
  d_Constant_112_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649152);
  d_Reshape_659_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649152);
  d_Constant_59_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649216);
  d_Reshape_623_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13649216);
  d_Constant_56_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13650240);
  d_Reshape_621_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13650240);
  d_Constant_53_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13651264);
  d_Reshape_619_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13651264);
  d_Constant_50_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13652288);
  d_Reshape_617_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13652288);
  d_Constant_69_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13653312);
  d_Constant_66_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+13915456);
  d_Constant_63_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14177600);
  d_Constant_60_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14439744);
  d_Constant_163_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14701888);
  d_Reshape_861_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14701888);
  d_Constant_153_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14701952);
  d_Reshape_855_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14701952);
  d_Constant_143_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702016);
  d_Reshape_849_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702016);
  d_Constant_133_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702080);
  d_Reshape_843_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702080);
  d_Constant_123_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702144);
  d_Reshape_837_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702144);
  d_Constant_113_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702208);
  d_Reshape_831_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702208);
  d_Constant_71_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702272);
  d_Reshape_787_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14702272);
  d_Constant_68_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14703296);
  d_Reshape_785_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14703296);
  d_Constant_65_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14704320);
  d_Reshape_783_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14704320);
  d_Constant_62_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14705344);
  d_Reshape_781_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14705344);
  d_Constant_81_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14706368);
  d_Constant_78_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+14968512);
  d_Constant_75_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15230656);
  d_Constant_72_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15492800);
  d_Constant_83_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15754944);
  d_Reshape_983_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15754944);
  d_Constant_80_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15755968);
  d_Reshape_981_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15755968);
  d_Constant_77_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15756992);
  d_Reshape_979_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15756992);
  d_Constant_74_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15758016);
  d_Reshape_977_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15758016);
  d_Constant_174_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759040);
  d_Reshape_1071_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759040);
  d_Constant_164_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759104);
  d_Reshape_1065_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759104);
  d_Constant_154_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759168);
  d_Reshape_1059_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759168);
  d_Constant_144_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759232);
  d_Reshape_1053_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759232);
  d_Constant_134_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759296);
  d_Reshape_1047_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759296);
  d_Constant_124_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759360);
  d_Reshape_1041_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759360);
  d_Constant_114_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759424);
  d_Reshape_1035_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759424);
  d_Constant_93_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+15759488);
  d_Constant_90_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16021632);
  d_Constant_87_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16283776);
  d_Constant_84_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16545920);
  d_Constant_185_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808064);
  d_Reshape_1313_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808064);
  d_Constant_175_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808128);
  d_Reshape_1307_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808128);
  d_Constant_165_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808192);
  d_Reshape_1301_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808192);
  d_Constant_155_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808256);
  d_Reshape_1295_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808256);
  d_Constant_145_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808320);
  d_Reshape_1289_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808320);
  d_Constant_135_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808384);
  d_Reshape_1283_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808384);
  d_Constant_125_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808448);
  d_Reshape_1277_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808448);
  d_Constant_115_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808512);
  d_Reshape_1271_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808512);
  d_Constant_95_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808576);
  d_Reshape_1211_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16808576);
  d_Constant_92_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16809600);
  d_Reshape_1209_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16809600);
  d_Constant_89_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16810624);
  d_Reshape_1207_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16810624);
  d_Constant_86_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16811648);
  d_Reshape_1205_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16811648);
  d_Constant_186_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812672);
  d_Reshape_1543_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812672);
  d_Constant_176_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812736);
  d_Reshape_1537_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812736);
  d_Constant_166_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812800);
  d_Reshape_1531_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812800);
  d_Constant_156_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812864);
  d_Reshape_1525_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812864);
  d_Constant_146_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812928);
  d_Reshape_1519_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812928);
  d_Constant_136_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812992);
  d_Reshape_1513_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16812992);
  d_Constant_126_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813056);
  d_Reshape_1507_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813056);
  d_Constant_187_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813120);
  d_Reshape_1741_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813120);
  d_Constant_177_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813184);
  d_Reshape_1735_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813184);
  d_Constant_167_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813248);
  d_Reshape_1729_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813248);
  d_Constant_157_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813312);
  d_Reshape_1723_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813312);
  d_Constant_147_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813376);
  d_Reshape_1717_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813376);
  d_Constant_137_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813440);
  d_Reshape_1711_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813440);
  d_Constant_188_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813504);
  d_Reshape_1907_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813504);
  d_Constant_178_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813568);
  d_Reshape_1901_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813568);
  d_Constant_168_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813632);
  d_Reshape_1895_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813632);
  d_Constant_158_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813696);
  d_Reshape_1889_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813696);
  d_Constant_148_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813760);
  d_Reshape_1883_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813760);
  d_Constant_189_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813824);
  d_Reshape_2041_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813824);
  d_Constant_179_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813888);
  d_Reshape_2035_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813888);
  d_Constant_169_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813952);
  d_Reshape_2029_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16813952);
  d_Constant_159_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814016);
  d_Reshape_2023_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814016);
  d_Constant_190_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814080);
  d_Reshape_2143_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814080);
  d_Constant_180_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814144);
  d_Reshape_2137_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814144);
  d_Constant_170_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814208);
  d_Reshape_2131_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814208);
  d_Constant_191_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814272);
  d_Reshape_2213_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814272);
  d_Constant_181_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814336);
  d_Reshape_2207_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814336);
  d_Constant_192_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814400);
  d_Reshape_2251_0 = (float*)(d_group_persist_CUDA_GPU0_allocator_memory_pool+16814400);
}

extern "C" void cuda_init()
{
//CUDA_SAFE_CALL(cudaDeviceReset());
// total memory:16902656
//CUDA_SAFE_CALL(cudaSetDevice(0));
CUDA_SAFE_CALL(cudaMalloc((void**)&group_0_CUDA_GPU0_allocator_memory_pool,88192));
CUDA_SAFE_CALL(cudaMemset((void*)group_0_CUDA_GPU0_allocator_memory_pool, 0, 88192));
Broadcast_212_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Concat_194_0 = (int32_t*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Concat_193_0 = (int32_t*)(group_0_CUDA_GPU0_allocator_memory_pool+1088);
Slice_205_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1152);
Slice_207_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2176);
Slice_203_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3200);
Slice_209_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4224);
Slice_201_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5248);
Slice_197_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6272);
Slice_199_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7296);
Slice_195_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8320);
Reshape_210_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4224);
Reshape_208_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2176);
Reshape_206_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1152);
Reshape_204_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3200);
Reshape_202_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5248);
Reshape_200_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7296);
Reshape_198_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6272);
Reshape_196_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8320);
Dot_239_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9344);
Dot_234_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10368);
Dot_231_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11392);
Dot_219_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12416);
Dot_230_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13440);
Dot_240_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14464);
Dot_229_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15488);
Dot_232_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16512);
Dot_244_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17536);
Dot_220_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_243_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+19584);
Dot_242_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+20608);
Dot_228_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21632);
Dot_226_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22656);
Dot_224_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23680);
Dot_214_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_213_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_233_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26752);
Dot_218_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_236_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28800);
Dot_222_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29824);
Dot_215_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_235_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31872);
Dot_225_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32896);
Dot_237_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+33920);
Dot_221_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34944);
Dot_223_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35968);
Dot_217_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_216_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_227_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39040);
Dot_238_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+40064);
Dot_241_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+41088);
Dot_263_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_267_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_261_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_260_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_259_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_254_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_255_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_262_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_258_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+42112);
Dot_272_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+43136);
Dot_249_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_256_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45184);
Dot_273_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+46208);
Dot_250_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_276_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+48256);
Dot_253_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49280);
Dot_275_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+50304);
Dot_252_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_257_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52352);
Dot_246_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_269_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+54400);
Dot_274_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+55424);
Dot_251_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_245_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_268_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+58496);
Dot_271_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+59520);
Dot_248_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Dot_270_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+61568);
Dot_247_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Dot_264_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+63616);
Dot_265_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+64640);
Dot_266_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+65664);
Add_298_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Multiply_300_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+66688);
Dot_302_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_301_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_303_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_304_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_306_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_305_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_307_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Dot_308_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Multiply_355_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+66688);
Add_351_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+67712);
Multiply_356_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_352_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+69760);
Dot_372_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_357_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12416);
Dot_370_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_365_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_358_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_371_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_367_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_366_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_368_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_369_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_363_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_362_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_360_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_359_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_361_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_364_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Multiply_442_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Add_436_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+66688);
Multiply_443_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_437_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+70784);
Multiply_444_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+71808);
Add_438_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+72832);
Dot_454_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_453_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_457_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_465_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12416);
Dot_452_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_450_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23680);
Dot_464_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_451_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_445_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_446_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29824);
Dot_449_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_448_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34944);
Dot_447_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35968);
Dot_462_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_463_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_461_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_467_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45184);
Dot_466_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_468_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49280);
Dot_455_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_459_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_460_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_458_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_456_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Multiply_561_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Add_553_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+67712);
Multiply_562_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_554_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+69760);
Multiply_563_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+71808);
Add_555_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+73856);
Multiply_564_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+74880);
Add_556_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+75904);
Dot_580_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_573_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_575_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_574_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_577_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_576_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12416);
Dot_578_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_579_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21632);
Dot_582_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22656);
Dot_581_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23680);
Dot_587_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_592_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_591_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_567_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29824);
Dot_596_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_583_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32896);
Dot_568_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34944);
Dot_565_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35968);
Dot_594_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_569_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_584_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39040);
Dot_588_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+42112);
Dot_586_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_585_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45184);
Dot_589_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_590_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49280);
Dot_593_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_595_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52352);
Dot_566_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_572_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_571_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_570_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Multiply_712_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Add_702_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+66688);
Multiply_713_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_703_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+70784);
Multiply_714_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+71808);
Add_704_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+72832);
Multiply_715_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+74880);
Add_705_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+76928);
Multiply_716_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+77952);
Add_706_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+78976);
Dot_737_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_741_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_742_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_743_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_725_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_754_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_746_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_717_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_730_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11392);
Dot_748_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12416);
Dot_719_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13440);
Dot_745_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15488);
Dot_750_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16512);
Dot_721_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_749_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21632);
Dot_720_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22656);
Dot_747_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23680);
Dot_718_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_744_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_752_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_723_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29824);
Dot_751_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_722_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32896);
Dot_753_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34944);
Dot_724_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35968);
Dot_755_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_726_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_756_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39040);
Dot_727_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+42112);
Dot_736_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_735_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45184);
Dot_734_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_733_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49280);
Dot_740_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_739_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52352);
Dot_738_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_729_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_728_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_732_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Dot_731_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+63616);
Multiply_895_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Add_883_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+67712);
Multiply_896_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_884_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+69760);
Multiply_897_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+71808);
Add_885_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+73856);
Multiply_898_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+74880);
Add_886_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+75904);
Multiply_899_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+77952);
Add_887_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+80000);
Multiply_900_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+81024);
Add_888_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+82048);
Dot_917_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_946_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_920_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_919_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_924_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_945_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_916_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_944_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_915_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_943_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10368);
Dot_914_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11392);
Dot_934_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12416);
Dot_905_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13440);
Dot_906_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15488);
Dot_901_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16512);
Dot_903_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_902_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21632);
Dot_937_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22656);
Dot_908_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23680);
Dot_904_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_907_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_938_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26752);
Dot_909_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_910_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28800);
Dot_940_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29824);
Dot_911_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_912_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31872);
Dot_942_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32896);
Dot_913_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34944);
Dot_947_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35968);
Dot_918_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_941_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_935_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39040);
Dot_948_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+42112);
Dot_939_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_936_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45184);
Dot_933_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_932_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49280);
Dot_931_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_930_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52352);
Dot_929_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_928_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_927_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_926_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+58496);
Dot_925_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Dot_923_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+63616);
Dot_922_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+64640);
Dot_921_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+65664);
Multiply_1113_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Add_1097_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+66688);
Add_1096_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_1098_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+70784);
Multiply_1114_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+71808);
Add_1099_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+72832);
Multiply_1115_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+74880);
Multiply_1116_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+76928);
Add_1100_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+77952);
Multiply_1110_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+78976);
Multiply_1112_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+81024);
Add_1102_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+83072);
Add_1101_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+84096);
Multiply_1111_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+85120);
Dot_1144_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_1142_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_1141_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_1164_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_1135_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_1137_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_1139_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_1140_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_1138_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_1136_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_1134_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_1133_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_1124_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_1123_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_1121_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_1132_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Dot_1119_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Dot_1125_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18560);
Dot_1127_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21632);
Dot_1126_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22656);
Dot_1129_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23680);
Dot_1128_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24704);
Dot_1130_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25728);
Dot_1117_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26752);
Dot_1160_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27776);
Dot_1131_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28800);
Dot_1118_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29824);
Dot_1120_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30848);
Dot_1122_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31872);
Dot_1161_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32896);
Dot_1163_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+33920);
Dot_1169_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34944);
Dot_1166_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35968);
Dot_1168_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36992);
Dot_1171_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38016);
Dot_1170_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39040);
Dot_1167_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+40064);
Dot_1159_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+42112);
Dot_1172_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+43136);
Dot_1143_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44160);
Dot_1165_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45184);
Dot_1162_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47232);
Dot_1158_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49280);
Dot_1157_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51328);
Dot_1149_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52352);
Dot_1154_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53376);
Dot_1153_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+54400);
Dot_1151_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56448);
Dot_1152_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57472);
Dot_1150_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+58496);
Dot_1156_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+59520);
Dot_1155_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60544);
Dot_1148_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+61568);
Dot_1147_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+63616);
Dot_1146_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+64640);
Dot_1145_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+65664);
Multiply_1360_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62592);
Add_1344_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+67712);
Multiply_1361_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+69760);
Add_1345_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+71808);
Multiply_1362_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+73856);
Multiply_1357_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+74880);
Add_1347_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+75904);
Add_1346_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+76928);
Multiply_1363_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+78976);
Multiply_1358_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+80000);
Multiply_1364_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+81024);
Add_1343_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+82048);
Multiply_1359_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+85120);
Add_1341_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+86144);
Add_1342_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+87168);
Dot_1385_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_1392_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_1391_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_1390_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_1389_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_1388_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_1387_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_1366_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_1365_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_1368_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_1367_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_1369_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_1376_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_1375_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_1384_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_1371_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Dot_1410_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Dot_1381_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17408);
Dot_1382_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18432);
Dot_1383_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+19456);
Dot_1370_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+20480);
Dot_1409_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21504);
Dot_1380_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22528);
Dot_1377_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23552);
Dot_1378_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24576);
Dot_1379_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25600);
Dot_1372_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26624);
Dot_1373_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27648);
Dot_1374_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28672);
Dot_1411_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29696);
Dot_1412_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30720);
Dot_1413_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31744);
Dot_1414_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32768);
Dot_1415_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+33792);
Dot_1386_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34816);
Dot_1416_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35840);
Dot_1417_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36864);
Dot_1405_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+37888);
Dot_1418_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38912);
Dot_1419_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39936);
Dot_1420_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+40960);
Dot_1404_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+41984);
Dot_1403_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+43008);
Dot_1402_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44032);
Dot_1401_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45056);
Dot_1407_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+46080);
Dot_1406_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47104);
Dot_1408_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+48128);
Dot_1395_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49152);
Dot_1394_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+50176);
Dot_1398_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51200);
Dot_1397_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52224);
Dot_1396_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53248);
Dot_1393_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+54272);
Dot_1400_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+55296);
Dot_1399_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56320);
Multiply_1584_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57344);
Add_1570_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+58368);
Add_1569_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+59392);
Add_1568_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+60416);
Multiply_1585_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+61440);
Add_1571_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+62464);
Multiply_1586_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+63488);
Multiply_1582_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+64512);
Add_1572_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+65536);
Multiply_1587_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+66560);
Multiply_1583_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+68736);
Add_1573_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+69760);
Multiply_1588_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+70784);
Dot_1592_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_1591_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_1589_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_1625_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_1596_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_1595_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_1628_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_1599_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_1634_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_1605_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_1606_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_1593_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_1636_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_1607_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_1594_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_1631_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Dot_1602_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Dot_1632_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17408);
Dot_1603_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18432);
Dot_1604_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+19456);
Dot_1630_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+20480);
Dot_1601_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21504);
Dot_1608_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22528);
Dot_1629_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23552);
Dot_1600_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24576);
Dot_1626_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25600);
Dot_1597_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26624);
Dot_1627_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27648);
Dot_1598_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28672);
Dot_1635_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29696);
Dot_1620_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30720);
Dot_1633_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31744);
Dot_1619_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32768);
Dot_1590_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+33792);
Dot_1623_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34816);
Dot_1618_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35840);
Dot_1622_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36864);
Dot_1621_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+37888);
Dot_1617_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38912);
Dot_1624_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39936);
Dot_1615_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+40960);
Dot_1614_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+41984);
Dot_1613_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+43008);
Dot_1609_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44032);
Dot_1612_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45056);
Dot_1611_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+46080);
Dot_1616_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47104);
Dot_1610_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+48128);
Multiply_1777_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49152);
Add_1765_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+50176);
Multiply_1776_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+51200);
Add_1764_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+52224);
Multiply_1775_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+53248);
Add_1763_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+54272);
Multiply_1778_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+55296);
Add_1766_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+56320);
Multiply_1779_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+57344);
Add_1767_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+61440);
Multiply_1780_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+63488);
Dot_1787_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_1816_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_1786_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_1815_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_1785_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_1814_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_1784_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_1813_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_1783_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_1812_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_1782_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_1811_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_1781_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_1810_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_1794_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_1793_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Dot_1795_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Dot_1808_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17408);
Dot_1796_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18432);
Dot_1809_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+19456);
Dot_1799_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+20480);
Dot_1797_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21504);
Dot_1798_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22528);
Dot_1800_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23552);
Dot_1817_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24576);
Dot_1788_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25600);
Dot_1791_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26624);
Dot_1818_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27648);
Dot_1789_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28672);
Dot_1819_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29696);
Dot_1790_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30720);
Dot_1820_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31744);
Dot_1804_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32768);
Dot_1803_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+33792);
Dot_1806_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34816);
Dot_1807_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35840);
Dot_1802_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36864);
Dot_1805_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+37888);
Dot_1801_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38912);
Dot_1792_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+39936);
Multiply_1937_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+40960);
Add_1927_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+41984);
Multiply_1938_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+43008);
Add_1928_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+44032);
Multiply_1936_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+45056);
Add_1926_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+46080);
Multiply_1939_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+47104);
Add_1929_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+48128);
Multiply_1940_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+49152);
Dot_1949_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_1946_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_1953_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_1954_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_1955_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_1956_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_1957_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_1958_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_1959_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_1960_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_1944_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_1943_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_1972_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_1941_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_1970_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_1969_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Dot_1950_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Dot_1963_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17408);
Dot_1951_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18432);
Dot_1964_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+19456);
Dot_1952_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+20480);
Dot_1965_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21504);
Dot_1967_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22528);
Dot_1968_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23552);
Dot_1942_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24576);
Dot_1971_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25600);
Dot_1962_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26624);
Dot_1961_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27648);
Dot_1966_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28672);
Dot_1948_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+29696);
Dot_1945_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+30720);
Dot_1947_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+31744);
Multiply_2066_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+32768);
Add_2058_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+33792);
Multiply_2065_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+34816);
Add_2057_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+35840);
Multiply_2067_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+36864);
Add_2059_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+37888);
Multiply_2068_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+38912);
Dot_2072_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_2071_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_2070_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_2080_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_2073_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_2089_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_2076_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_2075_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_2079_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_2074_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_2091_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_2078_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_2077_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_2090_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_2092_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_2081_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Dot_2088_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Dot_2086_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17408);
Dot_2087_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18432);
Dot_2084_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+19456);
Dot_2085_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+20480);
Dot_2083_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+21504);
Dot_2082_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+22528);
Dot_2069_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+23552);
Multiply_2163_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+24576);
Add_2157_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+25600);
Multiply_2162_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+26624);
Add_2156_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+27648);
Multiply_2164_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+28672);
Dot_2175_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_2176_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_2168_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_2177_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_2165_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_2178_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_2166_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_2179_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Dot_2167_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
Dot_2180_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+9216);
Dot_2169_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+10240);
Dot_2172_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+11264);
Dot_2171_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+12288);
Dot_2170_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+13312);
Dot_2174_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+14336);
Dot_2173_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+15360);
Multiply_2227_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+16384);
Add_2223_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+17408);
Multiply_2228_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+18432);
Dot_2231_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+0);
Dot_2229_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+1024);
Dot_2232_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+2048);
Dot_2230_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+3072);
Dot_2236_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+4096);
Dot_2234_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+5120);
Dot_2235_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+6144);
Dot_2233_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+7168);
Multiply_2260_0 = (float*)(group_0_CUDA_GPU0_allocator_memory_pool+8192);
//CUDA_SAFE_CALL(cudaSetDevice(0));
CUDA_SAFE_CALL(cudaMalloc((void**)&group_persist_CUDA_GPU0_allocator_memory_pool,16814464));
CUDA_SAFE_CALL(cudaMemset((void*)group_persist_CUDA_GPU0_allocator_memory_pool, 0, 16814464));
Constant_104_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+0);
Constant_102_0 = (int32_t*)(group_persist_CUDA_GPU0_allocator_memory_pool+64);
Constant_101_0 = (int32_t*)(group_persist_CUDA_GPU0_allocator_memory_pool+128);
Constant_98_0 = (int32_t*)(group_persist_CUDA_GPU0_allocator_memory_pool+192);
Constant_97_0 = (int32_t*)(group_persist_CUDA_GPU0_allocator_memory_pool+256);
Constant_9_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+320);
Constant_6_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+262464);
Constant_3_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+524608);
Constant_0_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+786752);
Constant_94_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+1048896);
Constant_91_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+1311040);
Constant_88_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+1573184);
Constant_85_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+1835328);
Constant_82_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+2097472);
Constant_79_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+2359616);
Constant_76_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+2621760);
Constant_73_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+2883904);
Constant_70_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+3146048);
Constant_67_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+3408192);
Constant_64_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+3670336);
Constant_61_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+3932480);
Constant_58_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+4194624);
Constant_55_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+4456768);
Constant_52_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+4718912);
Constant_49_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+4981056);
Constant_46_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+5243200);
Constant_43_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+5505344);
Constant_40_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+5767488);
Constant_37_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+6029632);
Constant_34_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+6291776);
Constant_31_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+6553920);
Constant_28_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+6816064);
Constant_25_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+7078208);
Constant_22_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+7340352);
Constant_19_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+7602496);
Constant_16_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+7864640);
Constant_13_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+8126784);
Constant_10_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+8388928);
Constant_7_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+8651072);
Constant_4_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+8913216);
Constant_1_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9175360);
Constant_108_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9437504);
Reshape_291_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9437504);
Constant_11_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9437568);
Reshape_287_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9437568);
Constant_8_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9438592);
Reshape_285_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9438592);
Constant_5_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9439616);
Reshape_283_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9439616);
Constant_2_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9440640);
Reshape_281_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9440640);
Constant_100_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9441664);
Constant_21_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9441728);
Constant_18_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9703872);
Constant_15_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+9966016);
Constant_12_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10228160);
Constant_119_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10490304);
Reshape_341_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10490304);
Constant_109_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10490368);
Reshape_335_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10490368);
Constant_23_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10490432);
Reshape_323_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10490432);
Constant_20_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10491456);
Reshape_321_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10491456);
Constant_17_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10492480);
Reshape_319_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10492480);
Constant_14_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10493504);
Reshape_317_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10493504);
Constant_33_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10494528);
Constant_30_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+10756672);
Constant_27_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11018816);
Constant_24_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11280960);
Constant_130_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543104);
Reshape_423_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543104);
Constant_120_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543168);
Reshape_417_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543168);
Constant_110_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543232);
Reshape_411_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543232);
Constant_35_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543296);
Reshape_391_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11543296);
Constant_32_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11544320);
Reshape_389_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11544320);
Constant_29_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11545344);
Reshape_387_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11545344);
Constant_26_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11546368);
Reshape_385_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11546368);
Constant_45_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11547392);
Constant_42_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+11809536);
Constant_39_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12071680);
Constant_36_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12333824);
Constant_141_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12595968);
Reshape_537_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12595968);
Constant_131_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596032);
Reshape_531_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596032);
Constant_121_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596096);
Reshape_525_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596096);
Constant_111_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596160);
Reshape_519_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596160);
Constant_47_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596224);
Reshape_491_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12596224);
Constant_44_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12597248);
Reshape_489_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12597248);
Constant_41_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12598272);
Reshape_487_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12598272);
Constant_38_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12599296);
Reshape_485_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12599296);
Constant_57_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12600320);
Constant_54_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+12862464);
Constant_51_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13124608);
Constant_48_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13386752);
Constant_152_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13648896);
Reshape_683_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13648896);
Constant_142_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13648960);
Reshape_677_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13648960);
Constant_132_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649024);
Reshape_671_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649024);
Constant_122_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649088);
Reshape_665_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649088);
Constant_112_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649152);
Reshape_659_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649152);
Constant_59_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649216);
Reshape_623_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13649216);
Constant_56_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13650240);
Reshape_621_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13650240);
Constant_53_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13651264);
Reshape_619_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13651264);
Constant_50_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13652288);
Reshape_617_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13652288);
Constant_69_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13653312);
Constant_66_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+13915456);
Constant_63_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14177600);
Constant_60_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14439744);
Constant_163_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14701888);
Reshape_861_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14701888);
Constant_153_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14701952);
Reshape_855_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14701952);
Constant_143_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702016);
Reshape_849_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702016);
Constant_133_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702080);
Reshape_843_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702080);
Constant_123_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702144);
Reshape_837_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702144);
Constant_113_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702208);
Reshape_831_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702208);
Constant_71_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702272);
Reshape_787_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14702272);
Constant_68_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14703296);
Reshape_785_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14703296);
Constant_65_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14704320);
Reshape_783_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14704320);
Constant_62_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14705344);
Reshape_781_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14705344);
Constant_81_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14706368);
Constant_78_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+14968512);
Constant_75_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15230656);
Constant_72_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15492800);
Constant_83_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15754944);
Reshape_983_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15754944);
Constant_80_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15755968);
Reshape_981_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15755968);
Constant_77_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15756992);
Reshape_979_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15756992);
Constant_74_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15758016);
Reshape_977_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15758016);
Constant_174_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759040);
Reshape_1071_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759040);
Constant_164_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759104);
Reshape_1065_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759104);
Constant_154_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759168);
Reshape_1059_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759168);
Constant_144_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759232);
Reshape_1053_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759232);
Constant_134_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759296);
Reshape_1047_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759296);
Constant_124_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759360);
Reshape_1041_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759360);
Constant_114_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759424);
Reshape_1035_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759424);
Constant_93_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+15759488);
Constant_90_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16021632);
Constant_87_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16283776);
Constant_84_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16545920);
Constant_185_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808064);
Reshape_1313_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808064);
Constant_175_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808128);
Reshape_1307_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808128);
Constant_165_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808192);
Reshape_1301_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808192);
Constant_155_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808256);
Reshape_1295_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808256);
Constant_145_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808320);
Reshape_1289_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808320);
Constant_135_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808384);
Reshape_1283_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808384);
Constant_125_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808448);
Reshape_1277_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808448);
Constant_115_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808512);
Reshape_1271_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808512);
Constant_95_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808576);
Reshape_1211_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16808576);
Constant_92_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16809600);
Reshape_1209_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16809600);
Constant_89_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16810624);
Reshape_1207_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16810624);
Constant_86_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16811648);
Reshape_1205_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16811648);
Constant_186_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812672);
Reshape_1543_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812672);
Constant_176_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812736);
Reshape_1537_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812736);
Constant_166_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812800);
Reshape_1531_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812800);
Constant_156_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812864);
Reshape_1525_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812864);
Constant_146_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812928);
Reshape_1519_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812928);
Constant_136_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812992);
Reshape_1513_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16812992);
Constant_126_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813056);
Reshape_1507_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813056);
Constant_187_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813120);
Reshape_1741_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813120);
Constant_177_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813184);
Reshape_1735_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813184);
Constant_167_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813248);
Reshape_1729_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813248);
Constant_157_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813312);
Reshape_1723_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813312);
Constant_147_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813376);
Reshape_1717_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813376);
Constant_137_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813440);
Reshape_1711_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813440);
Constant_188_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813504);
Reshape_1907_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813504);
Constant_178_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813568);
Reshape_1901_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813568);
Constant_168_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813632);
Reshape_1895_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813632);
Constant_158_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813696);
Reshape_1889_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813696);
Constant_148_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813760);
Reshape_1883_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813760);
Constant_189_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813824);
Reshape_2041_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813824);
Constant_179_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813888);
Reshape_2035_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813888);
Constant_169_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813952);
Reshape_2029_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16813952);
Constant_159_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814016);
Reshape_2023_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814016);
Constant_190_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814080);
Reshape_2143_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814080);
Constant_180_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814144);
Reshape_2137_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814144);
Constant_170_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814208);
Reshape_2131_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814208);
Constant_191_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814272);
Reshape_2213_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814272);
Constant_181_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814336);
Reshape_2207_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814336);
Constant_192_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814400);
Reshape_2251_0 = (float*)(group_persist_CUDA_GPU0_allocator_memory_pool+16814400);
// create streams/handles
 // name=BasicLSTMCellZeroState/zeros_1/Const
Constant_float_cuda_Constant_104(0, Constant_104_0);
 // name=BasicLSTMCellZeroState/Const_5
Constant_int32_t_cuda_Constant_102(0, Constant_102_0);
 // name=BasicLSTMCellZeroState/Const_4
Constant_int32_t_cuda_Constant_101(0, Constant_101_0);
 // name=BasicLSTMCellZeroState/Const_1
Constant_int32_t_cuda_Constant_98(0, Constant_98_0);
 // name=BasicLSTMCellZeroState/Const
Constant_int32_t_cuda_Constant_97(0, Constant_97_0);
 // name=LSTMLayer0/W3
Constant_float_cuda_Constant_9(0, Constant_9_0);
 // name=LSTMLayer0/W2
Constant_float_cuda_Constant_6(0, Constant_6_0);
 // name=LSTMLayer0/W1
Constant_float_cuda_Constant_3(0, Constant_3_0);
 // name=LSTMLayer0/W0
Constant_float_cuda_Constant_0(0, Constant_0_0);
 // name=LSTMLayer7/U3
Constant_float_cuda_Constant_94(0, Constant_94_0);
 // name=LSTMLayer7/U2
Constant_float_cuda_Constant_91(0, Constant_91_0);
 // name=LSTMLayer7/U1
Constant_float_cuda_Constant_88(0, Constant_88_0);
 // name=LSTMLayer7/U0
Constant_float_cuda_Constant_85(0, Constant_85_0);
 // name=LSTMLayer6/U3
Constant_float_cuda_Constant_82(0, Constant_82_0);
 // name=LSTMLayer6/U2
Constant_float_cuda_Constant_79(0, Constant_79_0);
 // name=LSTMLayer6/U1
Constant_float_cuda_Constant_76(0, Constant_76_0);
 // name=LSTMLayer6/U0
Constant_float_cuda_Constant_73(0, Constant_73_0);
 // name=LSTMLayer5/U3
Constant_float_cuda_Constant_70(0, Constant_70_0);
 // name=LSTMLayer5/U2
Constant_float_cuda_Constant_67(0, Constant_67_0);
 // name=LSTMLayer5/U1
Constant_float_cuda_Constant_64(0, Constant_64_0);
 // name=LSTMLayer5/U0
Constant_float_cuda_Constant_61(0, Constant_61_0);
 // name=LSTMLayer4/U3
Constant_float_cuda_Constant_58(0, Constant_58_0);
 // name=LSTMLayer4/U2
Constant_float_cuda_Constant_55(0, Constant_55_0);
 // name=LSTMLayer4/U1
Constant_float_cuda_Constant_52(0, Constant_52_0);
 // name=LSTMLayer4/U0
Constant_float_cuda_Constant_49(0, Constant_49_0);
 // name=LSTMLayer3/U3
Constant_float_cuda_Constant_46(0, Constant_46_0);
 // name=LSTMLayer3/U2
Constant_float_cuda_Constant_43(0, Constant_43_0);
 // name=LSTMLayer3/U1
Constant_float_cuda_Constant_40(0, Constant_40_0);
 // name=LSTMLayer3/U0
Constant_float_cuda_Constant_37(0, Constant_37_0);
 // name=LSTMLayer2/U3
Constant_float_cuda_Constant_34(0, Constant_34_0);
 // name=LSTMLayer2/U2
Constant_float_cuda_Constant_31(0, Constant_31_0);
 // name=LSTMLayer2/U1
Constant_float_cuda_Constant_28(0, Constant_28_0);
 // name=LSTMLayer2/U0
Constant_float_cuda_Constant_25(0, Constant_25_0);
 // name=LSTMLayer1/U3
Constant_float_cuda_Constant_22(0, Constant_22_0);
 // name=LSTMLayer1/U2
Constant_float_cuda_Constant_19(0, Constant_19_0);
 // name=LSTMLayer1/U1
Constant_float_cuda_Constant_16(0, Constant_16_0);
 // name=LSTMLayer1/U0
Constant_float_cuda_Constant_13(0, Constant_13_0);
 // name=LSTMLayer0/U3
Constant_float_cuda_Constant_10(0, Constant_10_0);
 // name=LSTMLayer0/U2
Constant_float_cuda_Constant_7(0, Constant_7_0);
 // name=LSTMLayer0/U1
Constant_float_cuda_Constant_4(0, Constant_4_0);
 // name=LSTMLayer0/U0
Constant_float_cuda_Constant_1(0, Constant_1_0);
 // name=add_8/y
Constant_float_cuda_Constant_108(0, Constant_108_0);
 // name=LSTMLayer0/bias3
Constant_float_cuda_Constant_11(0, Constant_11_0);
 // name=LSTMLayer0/bias2
Constant_float_cuda_Constant_8(0, Constant_8_0);
 // name=LSTMLayer0/bias1
Constant_float_cuda_Constant_5(0, Constant_5_0);
 // name=LSTMLayer0/bias0
Constant_float_cuda_Constant_2(0, Constant_2_0);
 // name=BasicLSTMCellZeroState/zeros/Const
Constant_float_cuda_Constant_100(0, Constant_100_0);
 // name=LSTMLayer1/W3
Constant_float_cuda_Constant_21(0, Constant_21_0);
 // name=LSTMLayer1/W2
Constant_float_cuda_Constant_18(0, Constant_18_0);
 // name=LSTMLayer1/W1
Constant_float_cuda_Constant_15(0, Constant_15_0);
 // name=LSTMLayer1/W0
Constant_float_cuda_Constant_12(0, Constant_12_0);
 // name=add_88/y
Constant_float_cuda_Constant_119(0, Constant_119_0);
 // name=add_18/y
Constant_float_cuda_Constant_109(0, Constant_109_0);
 // name=LSTMLayer1/bias3
Constant_float_cuda_Constant_23(0, Constant_23_0);
 // name=LSTMLayer1/bias2
Constant_float_cuda_Constant_20(0, Constant_20_0);
 // name=LSTMLayer1/bias1
Constant_float_cuda_Constant_17(0, Constant_17_0);
 // name=LSTMLayer1/bias0
Constant_float_cuda_Constant_14(0, Constant_14_0);
 // name=LSTMLayer2/W3
Constant_float_cuda_Constant_33(0, Constant_33_0);
 // name=LSTMLayer2/W2
Constant_float_cuda_Constant_30(0, Constant_30_0);
 // name=LSTMLayer2/W1
Constant_float_cuda_Constant_27(0, Constant_27_0);
 // name=LSTMLayer2/W0
Constant_float_cuda_Constant_24(0, Constant_24_0);
 // name=add_168/y
Constant_float_cuda_Constant_130(0, Constant_130_0);
 // name=add_98/y
Constant_float_cuda_Constant_120(0, Constant_120_0);
 // name=add_28/y
Constant_float_cuda_Constant_110(0, Constant_110_0);
 // name=LSTMLayer2/bias3
Constant_float_cuda_Constant_35(0, Constant_35_0);
 // name=LSTMLayer2/bias2
Constant_float_cuda_Constant_32(0, Constant_32_0);
 // name=LSTMLayer2/bias1
Constant_float_cuda_Constant_29(0, Constant_29_0);
 // name=LSTMLayer2/bias0
Constant_float_cuda_Constant_26(0, Constant_26_0);
 // name=LSTMLayer3/W3
Constant_float_cuda_Constant_45(0, Constant_45_0);
 // name=LSTMLayer3/W2
Constant_float_cuda_Constant_42(0, Constant_42_0);
 // name=LSTMLayer3/W1
Constant_float_cuda_Constant_39(0, Constant_39_0);
 // name=LSTMLayer3/W0
Constant_float_cuda_Constant_36(0, Constant_36_0);
 // name=add_248/y
Constant_float_cuda_Constant_141(0, Constant_141_0);
 // name=add_178/y
Constant_float_cuda_Constant_131(0, Constant_131_0);
 // name=add_108/y
Constant_float_cuda_Constant_121(0, Constant_121_0);
 // name=add_38/y
Constant_float_cuda_Constant_111(0, Constant_111_0);
 // name=LSTMLayer3/bias3
Constant_float_cuda_Constant_47(0, Constant_47_0);
 // name=LSTMLayer3/bias2
Constant_float_cuda_Constant_44(0, Constant_44_0);
 // name=LSTMLayer3/bias1
Constant_float_cuda_Constant_41(0, Constant_41_0);
 // name=LSTMLayer3/bias0
Constant_float_cuda_Constant_38(0, Constant_38_0);
 // name=LSTMLayer4/W3
Constant_float_cuda_Constant_57(0, Constant_57_0);
 // name=LSTMLayer4/W2
Constant_float_cuda_Constant_54(0, Constant_54_0);
 // name=LSTMLayer4/W1
Constant_float_cuda_Constant_51(0, Constant_51_0);
 // name=LSTMLayer4/W0
Constant_float_cuda_Constant_48(0, Constant_48_0);
 // name=add_328/y
Constant_float_cuda_Constant_152(0, Constant_152_0);
 // name=add_258/y
Constant_float_cuda_Constant_142(0, Constant_142_0);
 // name=add_188/y
Constant_float_cuda_Constant_132(0, Constant_132_0);
 // name=add_118/y
Constant_float_cuda_Constant_122(0, Constant_122_0);
 // name=add_48/y
Constant_float_cuda_Constant_112(0, Constant_112_0);
 // name=LSTMLayer4/bias3
Constant_float_cuda_Constant_59(0, Constant_59_0);
 // name=LSTMLayer4/bias2
Constant_float_cuda_Constant_56(0, Constant_56_0);
 // name=LSTMLayer4/bias1
Constant_float_cuda_Constant_53(0, Constant_53_0);
 // name=LSTMLayer4/bias0
Constant_float_cuda_Constant_50(0, Constant_50_0);
 // name=LSTMLayer5/W3
Constant_float_cuda_Constant_69(0, Constant_69_0);
 // name=LSTMLayer5/W2
Constant_float_cuda_Constant_66(0, Constant_66_0);
 // name=LSTMLayer5/W1
Constant_float_cuda_Constant_63(0, Constant_63_0);
 // name=LSTMLayer5/W0
Constant_float_cuda_Constant_60(0, Constant_60_0);
 // name=add_408/y
Constant_float_cuda_Constant_163(0, Constant_163_0);
 // name=add_338/y
Constant_float_cuda_Constant_153(0, Constant_153_0);
 // name=add_268/y
Constant_float_cuda_Constant_143(0, Constant_143_0);
 // name=add_198/y
Constant_float_cuda_Constant_133(0, Constant_133_0);
 // name=add_128/y
Constant_float_cuda_Constant_123(0, Constant_123_0);
 // name=add_58/y
Constant_float_cuda_Constant_113(0, Constant_113_0);
 // name=LSTMLayer5/bias3
Constant_float_cuda_Constant_71(0, Constant_71_0);
 // name=LSTMLayer5/bias2
Constant_float_cuda_Constant_68(0, Constant_68_0);
 // name=LSTMLayer5/bias1
Constant_float_cuda_Constant_65(0, Constant_65_0);
 // name=LSTMLayer5/bias0
Constant_float_cuda_Constant_62(0, Constant_62_0);
 // name=LSTMLayer6/W3
Constant_float_cuda_Constant_81(0, Constant_81_0);
 // name=LSTMLayer6/W2
Constant_float_cuda_Constant_78(0, Constant_78_0);
 // name=LSTMLayer6/W1
Constant_float_cuda_Constant_75(0, Constant_75_0);
 // name=LSTMLayer6/W0
Constant_float_cuda_Constant_72(0, Constant_72_0);
 // name=LSTMLayer6/bias3
Constant_float_cuda_Constant_83(0, Constant_83_0);
 // name=LSTMLayer6/bias2
Constant_float_cuda_Constant_80(0, Constant_80_0);
 // name=LSTMLayer6/bias1
Constant_float_cuda_Constant_77(0, Constant_77_0);
 // name=LSTMLayer6/bias0
Constant_float_cuda_Constant_74(0, Constant_74_0);
 // name=add_488/y
Constant_float_cuda_Constant_174(0, Constant_174_0);
 // name=add_418/y
Constant_float_cuda_Constant_164(0, Constant_164_0);
 // name=add_348/y
Constant_float_cuda_Constant_154(0, Constant_154_0);
 // name=add_278/y
Constant_float_cuda_Constant_144(0, Constant_144_0);
 // name=add_208/y
Constant_float_cuda_Constant_134(0, Constant_134_0);
 // name=add_138/y
Constant_float_cuda_Constant_124(0, Constant_124_0);
 // name=add_68/y
Constant_float_cuda_Constant_114(0, Constant_114_0);
 // name=LSTMLayer7/W3
Constant_float_cuda_Constant_93(0, Constant_93_0);
 // name=LSTMLayer7/W2
Constant_float_cuda_Constant_90(0, Constant_90_0);
 // name=LSTMLayer7/W1
Constant_float_cuda_Constant_87(0, Constant_87_0);
 // name=LSTMLayer7/W0
Constant_float_cuda_Constant_84(0, Constant_84_0);
 // name=add_568/y
Constant_float_cuda_Constant_185(0, Constant_185_0);
 // name=add_498/y
Constant_float_cuda_Constant_175(0, Constant_175_0);
 // name=add_428/y
Constant_float_cuda_Constant_165(0, Constant_165_0);
 // name=add_358/y
Constant_float_cuda_Constant_155(0, Constant_155_0);
 // name=add_288/y
Constant_float_cuda_Constant_145(0, Constant_145_0);
 // name=add_218/y
Constant_float_cuda_Constant_135(0, Constant_135_0);
 // name=add_148/y
Constant_float_cuda_Constant_125(0, Constant_125_0);
 // name=add_78/y
Constant_float_cuda_Constant_115(0, Constant_115_0);
 // name=LSTMLayer7/bias3
Constant_float_cuda_Constant_95(0, Constant_95_0);
 // name=LSTMLayer7/bias2
Constant_float_cuda_Constant_92(0, Constant_92_0);
 // name=LSTMLayer7/bias1
Constant_float_cuda_Constant_89(0, Constant_89_0);
 // name=LSTMLayer7/bias0
Constant_float_cuda_Constant_86(0, Constant_86_0);
 // name=add_578/y
Constant_float_cuda_Constant_186(0, Constant_186_0);
 // name=add_508/y
Constant_float_cuda_Constant_176(0, Constant_176_0);
 // name=add_438/y
Constant_float_cuda_Constant_166(0, Constant_166_0);
 // name=add_368/y
Constant_float_cuda_Constant_156(0, Constant_156_0);
 // name=add_298/y
Constant_float_cuda_Constant_146(0, Constant_146_0);
 // name=add_228/y
Constant_float_cuda_Constant_136(0, Constant_136_0);
 // name=add_158/y
Constant_float_cuda_Constant_126(0, Constant_126_0);
 // name=add_588/y
Constant_float_cuda_Constant_187(0, Constant_187_0);
 // name=add_518/y
Constant_float_cuda_Constant_177(0, Constant_177_0);
 // name=add_448/y
Constant_float_cuda_Constant_167(0, Constant_167_0);
 // name=add_378/y
Constant_float_cuda_Constant_157(0, Constant_157_0);
 // name=add_308/y
Constant_float_cuda_Constant_147(0, Constant_147_0);
 // name=add_238/y
Constant_float_cuda_Constant_137(0, Constant_137_0);
 // name=add_598/y
Constant_float_cuda_Constant_188(0, Constant_188_0);
 // name=add_528/y
Constant_float_cuda_Constant_178(0, Constant_178_0);
 // name=add_458/y
Constant_float_cuda_Constant_168(0, Constant_168_0);
 // name=add_388/y
Constant_float_cuda_Constant_158(0, Constant_158_0);
 // name=add_318/y
Constant_float_cuda_Constant_148(0, Constant_148_0);
 // name=add_608/y
Constant_float_cuda_Constant_189(0, Constant_189_0);
 // name=add_538/y
Constant_float_cuda_Constant_179(0, Constant_179_0);
 // name=add_468/y
Constant_float_cuda_Constant_169(0, Constant_169_0);
 // name=add_398/y
Constant_float_cuda_Constant_159(0, Constant_159_0);
 // name=add_618/y
Constant_float_cuda_Constant_190(0, Constant_190_0);
 // name=add_548/y
Constant_float_cuda_Constant_180(0, Constant_180_0);
 // name=add_478/y
Constant_float_cuda_Constant_170(0, Constant_170_0);
 // name=add_628/y
Constant_float_cuda_Constant_191(0, Constant_191_0);
 // name=add_558/y
Constant_float_cuda_Constant_181(0, Constant_181_0);
 // name=add_638/y
Constant_float_cuda_Constant_192(0, Constant_192_0);

printf("LSTM: initialized local vars. launching kernel to initialize device vars\n");
// Initialize device vars
init_global_vars<<<1, 1, 0, 0>>>(group_persist_CUDA_GPU0_allocator_memory_pool,
    group_0_CUDA_GPU0_allocator_memory_pool);
cudaDeviceSynchronize();
}

//extern "C" int kernel_entry(float* Parameter_96_0, float** Result_2261_0, cudaStream_t stream)
extern "C" void 
//kernel_entry(float* inp, float* out, cudaStream_t stream)
kernel_entry(AppCtx *app_ctx)
{
  float *Parameter_96_0 = (float*)app_ctx->h_stub->req;
  Multiply_2260_0 = (float*)app_ctx->h_stub->resp;
  cudaStream_t stream = app_ctx->work_stream;
// kernel_entry_init
 // name=blockfusion_kernel_2326
BlockFusionKernel_float_int32_t_int32_t_int32_t_int32_t_float_float_float_float_float_float_float_float_float_int32_t_int32_t_float_cuda_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Concat_Concat_Broadcast_0_Call(dim3(38, 1, 1), dim3(512, 1, 1), 0, stream, Parameter_96_0, Constant_97_0, Constant_98_0, Constant_101_0, Constant_102_0, Constant_104_0, Slice_195_0, Slice_197_0, Slice_199_0, Slice_201_0, Slice_203_0, Slice_205_0, Slice_207_0, Slice_209_0, Concat_193_0, Concat_194_0, Broadcast_212_0);
 // name=strided_slice_7
// eliminated
 // name=strided_slice_6
// eliminated
 // name=strided_slice_5
// eliminated
 // name=strided_slice_4
// eliminated
 // name=strided_slice_3
// eliminated
 // name=strided_slice_2
// eliminated
 // name=strided_slice_1
// eliminated
 // name=strided_slice
// eliminated
 // name=blockfusion_kernel_2328
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_2_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, stream, Reshape_196_0, Constant_6_0, Constant_3_0, Constant_9_0, Constant_0_0, Reshape_198_0, Reshape_200_0, Reshape_202_0, Reshape_204_0, Reshape_206_0, Reshape_208_0, Reshape_210_0, Dot_215_0, Dot_214_0, Dot_216_0, Dot_213_0, Dot_217_0, Dot_218_0, Dot_220_0, Dot_219_0, Dot_221_0, Dot_224_0, Dot_223_0, Dot_222_0, Dot_227_0, Dot_226_0, Dot_228_0, Dot_225_0, Dot_232_0, Dot_230_0, Dot_231_0, Dot_229_0, Dot_233_0, Dot_234_0, Dot_235_0, Dot_236_0, Dot_237_0, Dot_238_0, Dot_239_0, Dot_240_0, Dot_241_0, Dot_242_0, Dot_243_0, Dot_244_0);
 // name=blockfusion_kernel_2327
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_1_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, stream, Broadcast_212_0, Constant_37_0, Constant_40_0, Constant_34_0, Constant_67_0, Constant_1_0, Constant_4_0, Constant_7_0, Constant_10_0, Constant_13_0, Constant_16_0, Constant_19_0, Constant_22_0, Constant_25_0, Constant_28_0, Constant_31_0, Constant_43_0, Constant_46_0, Constant_49_0, Constant_52_0, Constant_55_0, Constant_58_0, Constant_61_0, Constant_64_0, Constant_70_0, Constant_73_0, Constant_76_0, Constant_79_0, Constant_82_0, Constant_85_0, Constant_88_0, Constant_91_0, Constant_94_0, Dot_257_0, Dot_258_0, Dot_256_0, Dot_267_0, Dot_245_0, Dot_246_0, Dot_247_0, Dot_248_0, Dot_249_0, Dot_250_0, Dot_251_0, Dot_252_0, Dot_253_0, Dot_254_0, Dot_255_0, Dot_259_0, Dot_260_0, Dot_261_0, Dot_262_0, Dot_263_0, Dot_264_0, Dot_265_0, Dot_266_0, Dot_268_0, Dot_269_0, Dot_270_0, Dot_271_0, Dot_272_0, Dot_273_0, Dot_274_0, Dot_275_0, Dot_276_0);
 // name=Reshape_291
// eliminated
 // name=Reshape_287
// eliminated
 // name=Reshape_285
// eliminated
 // name=Reshape_283
// eliminated
 // name=Reshape_281
// eliminated
 // name=fused_kernel_2262
FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_0_Call(dim3(1, 1, 1), dim3(256, 1, 1), 0, stream, Dot_215_0, Dot_247_0, Reshape_285_0, Reshape_291_0, Constant_100_0, Dot_213_0, Dot_245_0, Reshape_281_0, Dot_214_0, Dot_246_0, Reshape_283_0, Dot_216_0, Dot_248_0, Reshape_287_0, Multiply_300_0, Add_298_0);
 // name=blockfusion_kernel_2329
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_3_Call(dim3(64, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_300_0, Constant_10_0, Constant_7_0, Constant_1_0, Constant_4_0, Constant_21_0, Constant_18_0, Constant_12_0, Constant_15_0, Dot_308_0, Dot_307_0, Dot_305_0, Dot_306_0, Dot_304_0, Dot_303_0, Dot_301_0, Dot_302_0);
 // name=Reshape_341
// eliminated
 // name=Reshape_335
// eliminated
 // name=Reshape_323
// eliminated
 // name=Reshape_321
// eliminated
 // name=Reshape_319
// eliminated
 // name=Reshape_317
// eliminated
 // name=blockfusion_kernel_2330
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_4_Call(dim3(2, 1, 1), dim3(256, 1, 1), 0, stream, Dot_219_0, Dot_307_0, Reshape_285_0, Reshape_341_0, Add_298_0, Dot_217_0, Dot_305_0, Reshape_281_0, Dot_218_0, Dot_306_0, Reshape_283_0, Dot_220_0, Dot_308_0, Reshape_287_0, Dot_303_0, Dot_251_0, Reshape_321_0, Reshape_335_0, Constant_100_0, Dot_301_0, Dot_249_0, Reshape_317_0, Dot_302_0, Dot_250_0, Reshape_319_0, Dot_304_0, Dot_252_0, Reshape_323_0, Add_352_0, Multiply_356_0, Add_351_0, Multiply_355_0);
 // name=blockfusion_kernel_2331
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_5_Call(dim3(128, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_356_0, Constant_1_0, Constant_21_0, Constant_15_0, Constant_18_0, Constant_7_0, Constant_12_0, Constant_4_0, Constant_10_0, Multiply_355_0, Constant_30_0, Constant_24_0, Constant_27_0, Constant_13_0, Constant_22_0, Constant_19_0, Constant_16_0, Constant_33_0, Dot_369_0, Dot_368_0, Dot_366_0, Dot_367_0, Dot_371_0, Dot_365_0, Dot_370_0, Dot_372_0, Dot_359_0, Dot_357_0, Dot_358_0, Dot_361_0, Dot_364_0, Dot_363_0, Dot_362_0, Dot_360_0);
 // name=Reshape_423
// eliminated
 // name=Reshape_417
// eliminated
 // name=Reshape_411
// eliminated
 // name=Reshape_391
// eliminated
 // name=Reshape_389
// eliminated
 // name=Reshape_387
// eliminated
 // name=Reshape_385
// eliminated
 // name=blockfusion_kernel_2332
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_6_Call(dim3(3, 1, 1), dim3(256, 1, 1), 0, stream, Dot_223_0, Dot_371_0, Reshape_285_0, Reshape_423_0, Add_352_0, Dot_221_0, Dot_369_0, Reshape_281_0, Dot_222_0, Dot_370_0, Reshape_283_0, Dot_224_0, Dot_372_0, Reshape_287_0, Dot_367_0, Dot_363_0, Reshape_321_0, Reshape_417_0, Add_351_0, Dot_365_0, Dot_361_0, Reshape_317_0, Dot_366_0, Dot_362_0, Reshape_319_0, Dot_368_0, Dot_364_0, Reshape_323_0, Dot_359_0, Dot_255_0, Reshape_389_0, Reshape_411_0, Constant_100_0, Dot_357_0, Dot_253_0, Reshape_385_0, Dot_358_0, Dot_254_0, Reshape_387_0, Dot_360_0, Dot_256_0, Reshape_391_0, Add_438_0, Multiply_444_0, Add_437_0, Multiply_443_0, Add_436_0, Multiply_442_0);
 // name=blockfusion_kernel_2333
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_7_Call(dim3(192, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_444_0, Constant_21_0, Constant_1_0, Constant_15_0, Constant_18_0, Constant_12_0, Constant_7_0, Constant_4_0, Constant_10_0, Multiply_443_0, Constant_19_0, Constant_22_0, Constant_16_0, Constant_33_0, Constant_30_0, Constant_27_0, Constant_24_0, Constant_13_0, Multiply_442_0, Constant_34_0, Constant_28_0, Constant_31_0, Constant_36_0, Constant_39_0, Constant_25_0, Constant_45_0, Constant_42_0, Dot_464_0, Dot_465_0, Dot_462_0, Dot_463_0, Dot_461_0, Dot_467_0, Dot_466_0, Dot_468_0, Dot_459_0, Dot_460_0, Dot_458_0, Dot_456_0, Dot_455_0, Dot_454_0, Dot_453_0, Dot_457_0, Dot_452_0, Dot_450_0, Dot_451_0, Dot_445_0, Dot_446_0, Dot_449_0, Dot_448_0, Dot_447_0);
 // name=Reshape_537
// eliminated
 // name=Reshape_531
// eliminated
 // name=Reshape_525
// eliminated
 // name=Reshape_519
// eliminated
 // name=Reshape_491
// eliminated
 // name=Reshape_489
// eliminated
 // name=Reshape_487
// eliminated
 // name=Reshape_485
// eliminated
 // name=blockfusion_kernel_2334
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_8_Call(dim3(4, 1, 1), dim3(256, 1, 1), 0, stream, Dot_227_0, Dot_467_0, Reshape_285_0, Reshape_537_0, Add_438_0, Dot_225_0, Dot_465_0, Reshape_281_0, Dot_226_0, Dot_466_0, Reshape_283_0, Dot_228_0, Dot_468_0, Reshape_287_0, Dot_463_0, Dot_459_0, Reshape_321_0, Reshape_531_0, Add_437_0, Dot_461_0, Dot_457_0, Reshape_317_0, Dot_462_0, Dot_458_0, Reshape_319_0, Dot_464_0, Dot_460_0, Reshape_323_0, Dot_455_0, Dot_451_0, Reshape_389_0, Reshape_525_0, Add_436_0, Dot_453_0, Dot_449_0, Reshape_385_0, Dot_454_0, Dot_450_0, Reshape_387_0, Dot_456_0, Dot_452_0, Reshape_391_0, Dot_447_0, Dot_259_0, Reshape_489_0, Reshape_519_0, Constant_100_0, Dot_445_0, Dot_257_0, Reshape_485_0, Dot_446_0, Dot_258_0, Reshape_487_0, Dot_448_0, Dot_260_0, Reshape_491_0, Add_556_0, Multiply_564_0, Add_555_0, Multiply_563_0, Add_554_0, Multiply_562_0, Add_553_0, Multiply_561_0);
 // name=blockfusion_kernel_2335
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_9_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_564_0, Constant_21_0, Constant_18_0, Constant_10_0, Constant_4_0, Constant_7_0, Constant_1_0, Constant_15_0, Constant_12_0, Multiply_563_0, Constant_30_0, Constant_13_0, Constant_16_0, Constant_22_0, Constant_33_0, Constant_19_0, Constant_24_0, Constant_27_0, Multiply_562_0, Constant_31_0, Constant_28_0, Constant_45_0, Constant_25_0, Constant_39_0, Constant_42_0, Constant_36_0, Constant_34_0, Multiply_561_0, Constant_46_0, Constant_43_0, Constant_40_0, Constant_54_0, Constant_51_0, Constant_37_0, Constant_57_0, Constant_48_0, Dot_592_0, Dot_591_0, Dot_596_0, Dot_594_0, Dot_595_0, Dot_593_0, Dot_590_0, Dot_589_0, Dot_583_0, Dot_585_0, Dot_586_0, Dot_588_0, Dot_584_0, Dot_587_0, Dot_581_0, Dot_582_0, Dot_579_0, Dot_578_0, Dot_576_0, Dot_577_0, Dot_574_0, Dot_575_0, Dot_573_0, Dot_580_0, Dot_572_0, Dot_571_0, Dot_570_0, Dot_567_0, Dot_566_0, Dot_569_0, Dot_568_0, Dot_565_0);
 // name=Reshape_683
// eliminated
 // name=Reshape_677
// eliminated
 // name=Reshape_671
// eliminated
 // name=Reshape_665
// eliminated
 // name=Reshape_659
// eliminated
 // name=Reshape_623
// eliminated
 // name=Reshape_621
// eliminated
 // name=Reshape_619
// eliminated
 // name=Reshape_617
// eliminated
 // name=blockfusion_kernel_2336
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_10_Call(dim3(5, 1, 1), dim3(256, 1, 1), 0, stream, Dot_231_0, Dot_595_0, Reshape_285_0, Reshape_683_0, Add_556_0, Dot_229_0, Dot_593_0, Reshape_281_0, Dot_230_0, Dot_594_0, Reshape_283_0, Dot_232_0, Dot_596_0, Reshape_287_0, Dot_591_0, Dot_587_0, Reshape_321_0, Reshape_677_0, Add_555_0, Dot_589_0, Dot_585_0, Reshape_317_0, Dot_590_0, Dot_586_0, Reshape_319_0, Dot_592_0, Dot_588_0, Reshape_323_0, Dot_583_0, Dot_579_0, Reshape_389_0, Reshape_671_0, Add_554_0, Dot_581_0, Dot_577_0, Reshape_385_0, Dot_582_0, Dot_578_0, Reshape_387_0, Dot_584_0, Dot_580_0, Reshape_391_0, Dot_575_0, Dot_571_0, Reshape_489_0, Reshape_665_0, Add_553_0, Dot_573_0, Dot_569_0, Reshape_485_0, Dot_574_0, Dot_570_0, Reshape_487_0, Dot_576_0, Dot_572_0, Reshape_491_0, Dot_567_0, Dot_263_0, Reshape_621_0, Reshape_659_0, Constant_100_0, Dot_565_0, Dot_261_0, Reshape_617_0, Dot_566_0, Dot_262_0, Reshape_619_0, Dot_568_0, Dot_264_0, Reshape_623_0, Add_706_0, Multiply_716_0, Add_705_0, Multiply_715_0, Add_704_0, Multiply_714_0, Add_703_0, Multiply_713_0, Add_702_0, Multiply_712_0);
 // name=blockfusion_kernel_2337
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_11_Call(dim3(320, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_716_0, Constant_7_0, Constant_10_0, Constant_4_0, Constant_15_0, Constant_1_0, Constant_12_0, Constant_21_0, Constant_18_0, Multiply_715_0, Constant_16_0, Constant_33_0, Constant_13_0, Constant_30_0, Constant_27_0, Constant_24_0, Constant_22_0, Constant_19_0, Multiply_714_0, Constant_25_0, Constant_45_0, Constant_42_0, Constant_39_0, Constant_36_0, Constant_34_0, Constant_31_0, Constant_28_0, Multiply_713_0, Constant_37_0, Constant_57_0, Constant_48_0, Constant_46_0, Constant_43_0, Constant_40_0, Constant_54_0, Constant_51_0, Multiply_712_0, Constant_58_0, Constant_52_0, Constant_55_0, Constant_63_0, Constant_69_0, Constant_49_0, Constant_66_0, Constant_60_0, Dot_755_0, Dot_756_0, Dot_754_0, Dot_750_0, Dot_753_0, Dot_749_0, Dot_752_0, Dot_751_0, Dot_746_0, Dot_744_0, Dot_745_0, Dot_743_0, Dot_742_0, Dot_741_0, Dot_748_0, Dot_747_0, Dot_737_0, Dot_736_0, Dot_735_0, Dot_734_0, Dot_733_0, Dot_740_0, Dot_739_0, Dot_738_0, Dot_729_0, Dot_728_0, Dot_725_0, Dot_732_0, Dot_731_0, Dot_730_0, Dot_727_0, Dot_726_0, Dot_724_0, Dot_722_0, Dot_723_0, Dot_718_0, Dot_720_0, Dot_721_0, Dot_719_0, Dot_717_0);
 // name=Reshape_861
// eliminated
 // name=Reshape_855
// eliminated
 // name=Reshape_849
// eliminated
 // name=Reshape_843
// eliminated
 // name=Reshape_837
// eliminated
 // name=Reshape_831
// eliminated
 // name=Reshape_787
// eliminated
 // name=Reshape_785
// eliminated
 // name=Reshape_783
// eliminated
 // name=Reshape_781
// eliminated
 // name=blockfusion_kernel_2338
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_12_Call(dim3(6, 1, 1), dim3(256, 1, 1), 0, stream, Dot_235_0, Dot_755_0, Reshape_285_0, Reshape_861_0, Add_706_0, Dot_233_0, Dot_753_0, Reshape_281_0, Dot_234_0, Dot_754_0, Reshape_283_0, Dot_236_0, Dot_756_0, Reshape_287_0, Dot_751_0, Dot_747_0, Reshape_321_0, Reshape_855_0, Add_705_0, Dot_749_0, Dot_745_0, Reshape_317_0, Dot_750_0, Dot_746_0, Reshape_319_0, Dot_752_0, Dot_748_0, Reshape_323_0, Dot_743_0, Dot_739_0, Reshape_389_0, Reshape_849_0, Add_704_0, Dot_741_0, Dot_737_0, Reshape_385_0, Dot_742_0, Dot_738_0, Reshape_387_0, Dot_744_0, Dot_740_0, Reshape_391_0, Dot_735_0, Dot_731_0, Reshape_489_0, Reshape_843_0, Add_703_0, Dot_733_0, Dot_729_0, Reshape_485_0, Dot_734_0, Dot_730_0, Reshape_487_0, Dot_736_0, Dot_732_0, Reshape_491_0, Dot_727_0, Dot_723_0, Reshape_621_0, Reshape_837_0, Add_702_0, Dot_725_0, Dot_721_0, Reshape_617_0, Dot_726_0, Dot_722_0, Reshape_619_0, Dot_728_0, Dot_724_0, Reshape_623_0, Dot_719_0, Dot_267_0, Reshape_785_0, Reshape_831_0, Constant_100_0, Dot_717_0, Dot_265_0, Reshape_781_0, Dot_718_0, Dot_266_0, Reshape_783_0, Dot_720_0, Dot_268_0, Reshape_787_0, Add_888_0, Multiply_900_0, Add_887_0, Multiply_899_0, Add_886_0, Multiply_898_0, Add_885_0, Multiply_897_0, Add_884_0, Multiply_896_0, Add_883_0, Multiply_895_0);
 // name=blockfusion_kernel_2339
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_13_Call(dim3(384, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_900_0, Constant_10_0, Constant_12_0, Constant_7_0, Constant_4_0, Constant_21_0, Constant_18_0, Constant_1_0, Constant_15_0, Multiply_899_0, Constant_16_0, Constant_22_0, Constant_13_0, Constant_30_0, Constant_27_0, Constant_19_0, Constant_33_0, Constant_24_0, Multiply_898_0, Constant_34_0, Constant_31_0, Constant_28_0, Constant_25_0, Constant_45_0, Constant_42_0, Constant_39_0, Constant_36_0, Multiply_897_0, Constant_48_0, Constant_43_0, Constant_40_0, Constant_51_0, Constant_37_0, Constant_57_0, Constant_54_0, Constant_46_0, Multiply_896_0, Constant_58_0, Constant_55_0, Constant_52_0, Constant_49_0, Constant_69_0, Constant_66_0, Constant_63_0, Constant_60_0, Multiply_895_0, Constant_67_0, Constant_81_0, Constant_70_0, Constant_75_0, Constant_78_0, Constant_72_0, Constant_64_0, Constant_61_0, Dot_948_0, Dot_941_0, Dot_947_0, Dot_946_0, Dot_944_0, Dot_943_0, Dot_945_0, Dot_942_0, Dot_938_0, Dot_940_0, Dot_937_0, Dot_935_0, Dot_934_0, Dot_939_0, Dot_936_0, Dot_933_0, Dot_932_0, Dot_931_0, Dot_930_0, Dot_929_0, Dot_928_0, Dot_927_0, Dot_926_0, Dot_925_0, Dot_917_0, Dot_923_0, Dot_922_0, Dot_918_0, Dot_921_0, Dot_920_0, Dot_919_0, Dot_924_0, Dot_916_0, Dot_915_0, Dot_914_0, Dot_913_0, Dot_912_0, Dot_911_0, Dot_910_0, Dot_909_0, Dot_907_0, Dot_904_0, Dot_908_0, Dot_902_0, Dot_903_0, Dot_901_0, Dot_906_0, Dot_905_0);
 // name=Reshape_983
// eliminated
 // name=Reshape_981
// eliminated
 // name=Reshape_979
// eliminated
 // name=Reshape_977
// eliminated
 // name=Reshape_1071
// eliminated
 // name=Reshape_1065
// eliminated
 // name=Reshape_1059
// eliminated
 // name=Reshape_1053
// eliminated
 // name=Reshape_1047
// eliminated
 // name=Reshape_1041
// eliminated
 // name=Reshape_1035
// eliminated
 // name=blockfusion_kernel_2340
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_14_Call(dim3(7, 1, 1), dim3(256, 1, 1), 0, stream, Dot_239_0, Dot_947_0, Reshape_285_0, Reshape_1071_0, Add_888_0, Dot_237_0, Dot_945_0, Reshape_281_0, Dot_238_0, Dot_946_0, Reshape_283_0, Dot_240_0, Dot_948_0, Reshape_287_0, Dot_943_0, Dot_939_0, Reshape_321_0, Reshape_1065_0, Add_887_0, Dot_941_0, Dot_937_0, Reshape_317_0, Dot_942_0, Dot_938_0, Reshape_319_0, Dot_944_0, Dot_940_0, Reshape_323_0, Dot_935_0, Dot_931_0, Reshape_389_0, Reshape_1059_0, Add_886_0, Dot_933_0, Dot_929_0, Reshape_385_0, Dot_934_0, Dot_930_0, Reshape_387_0, Dot_936_0, Dot_932_0, Reshape_391_0, Dot_927_0, Dot_923_0, Reshape_489_0, Reshape_1053_0, Add_885_0, Dot_925_0, Dot_921_0, Reshape_485_0, Dot_926_0, Dot_922_0, Reshape_487_0, Dot_928_0, Dot_924_0, Reshape_491_0, Dot_919_0, Dot_915_0, Reshape_621_0, Reshape_1047_0, Add_884_0, Dot_917_0, Dot_913_0, Reshape_617_0, Dot_918_0, Dot_914_0, Reshape_619_0, Dot_920_0, Dot_916_0, Reshape_623_0, Dot_903_0, Dot_271_0, Reshape_981_0, Reshape_1035_0, Constant_100_0, Dot_901_0, Dot_269_0, Reshape_977_0, Dot_902_0, Dot_270_0, Reshape_979_0, Dot_904_0, Dot_272_0, Reshape_983_0, Dot_911_0, Dot_907_0, Reshape_785_0, Reshape_1041_0, Add_883_0, Dot_909_0, Dot_905_0, Reshape_781_0, Dot_910_0, Dot_906_0, Reshape_783_0, Dot_912_0, Dot_908_0, Reshape_787_0, Add_1102_0, Multiply_1116_0, Add_1101_0, Multiply_1115_0, Add_1100_0, Multiply_1114_0, Add_1099_0, Multiply_1113_0, Add_1098_0, Multiply_1112_0, Add_1096_0, Multiply_1110_0, Add_1097_0, Multiply_1111_0);
 // name=blockfusion_kernel_2341
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_15_Call(dim3(448, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_1116_0, Constant_12_0, Constant_10_0, Constant_18_0, Constant_4_0, Constant_7_0, Constant_21_0, Constant_15_0, Constant_1_0, Multiply_1115_0, Constant_19_0, Constant_13_0, Constant_33_0, Constant_30_0, Constant_22_0, Constant_16_0, Constant_27_0, Constant_24_0, Multiply_1114_0, Constant_36_0, Constant_28_0, Constant_25_0, Constant_42_0, Constant_45_0, Constant_39_0, Constant_34_0, Constant_31_0, Multiply_1113_0, Constant_46_0, Constant_43_0, Constant_40_0, Constant_37_0, Constant_54_0, Constant_57_0, Constant_51_0, Constant_48_0, Multiply_1112_0, Constant_66_0, Constant_49_0, Constant_55_0, Constant_58_0, Constant_52_0, Constant_69_0, Constant_63_0, Constant_60_0, Multiply_1110_0, Constant_82_0, Constant_79_0, Constant_73_0, Constant_76_0, Constant_84_0, Constant_93_0, Constant_90_0, Constant_87_0, Multiply_1111_0, Constant_67_0, Constant_64_0, Constant_81_0, Constant_61_0, Constant_75_0, Constant_78_0, Constant_72_0, Constant_70_0, Dot_1165_0, Dot_1172_0, Dot_1167_0, Dot_1170_0, Dot_1171_0, Dot_1168_0, Dot_1166_0, Dot_1169_0, Dot_1163_0, Dot_1161_0, Dot_1160_0, Dot_1159_0, Dot_1164_0, Dot_1162_0, Dot_1158_0, Dot_1157_0, Dot_1149_0, Dot_1154_0, Dot_1153_0, Dot_1151_0, Dot_1152_0, Dot_1150_0, Dot_1156_0, Dot_1155_0, Dot_1148_0, Dot_1147_0, Dot_1146_0, Dot_1145_0, Dot_1143_0, Dot_1144_0, Dot_1142_0, Dot_1141_0, Dot_1135_0, Dot_1137_0, Dot_1139_0, Dot_1140_0, Dot_1138_0, Dot_1136_0, Dot_1134_0, Dot_1133_0, Dot_1124_0, Dot_1123_0, Dot_1121_0, Dot_1122_0, Dot_1117_0, Dot_1120_0, Dot_1119_0, Dot_1118_0, Dot_1131_0, Dot_1130_0, Dot_1128_0, Dot_1129_0, Dot_1126_0, Dot_1127_0, Dot_1125_0, Dot_1132_0);
 // name=Reshape_1313
// eliminated
 // name=Reshape_1307
// eliminated
 // name=Reshape_1301
// eliminated
 // name=Reshape_1295
// eliminated
 // name=Reshape_1289
// eliminated
 // name=Reshape_1283
// eliminated
 // name=Reshape_1277
// eliminated
 // name=Reshape_1271
// eliminated
 // name=Reshape_1211
// eliminated
 // name=Reshape_1209
// eliminated
 // name=Reshape_1207
// eliminated
 // name=Reshape_1205
// eliminated
 // name=blockfusion_kernel_2342
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_16_Call(dim3(8, 1, 1), dim3(256, 1, 1), 0, stream, Dot_243_0, Dot_1171_0, Reshape_285_0, Reshape_1313_0, Add_1102_0, Dot_241_0, Dot_1169_0, Reshape_281_0, Dot_242_0, Dot_1170_0, Reshape_283_0, Dot_244_0, Dot_1172_0, Reshape_287_0, Dot_1167_0, Dot_1163_0, Reshape_321_0, Reshape_1307_0, Add_1101_0, Dot_1165_0, Dot_1161_0, Reshape_317_0, Dot_1166_0, Dot_1162_0, Reshape_319_0, Dot_1168_0, Dot_1164_0, Reshape_323_0, Dot_1159_0, Dot_1155_0, Reshape_389_0, Reshape_1301_0, Add_1100_0, Dot_1157_0, Dot_1153_0, Reshape_385_0, Dot_1158_0, Dot_1154_0, Reshape_387_0, Dot_1160_0, Dot_1156_0, Reshape_391_0, Dot_1151_0, Dot_1147_0, Reshape_489_0, Reshape_1295_0, Add_1099_0, Dot_1149_0, Dot_1145_0, Reshape_485_0, Dot_1150_0, Dot_1146_0, Reshape_487_0, Dot_1152_0, Dot_1148_0, Reshape_491_0, Dot_1143_0, Dot_1139_0, Reshape_621_0, Reshape_1289_0, Add_1098_0, Dot_1141_0, Dot_1137_0, Reshape_617_0, Dot_1142_0, Dot_1138_0, Reshape_619_0, Dot_1144_0, Dot_1140_0, Reshape_623_0, Constant_100_0, Dot_1119_0, Dot_275_0, Reshape_1209_0, Reshape_1271_0, Dot_1117_0, Dot_273_0, Reshape_1205_0, Dot_1118_0, Dot_274_0, Reshape_1207_0, Dot_1120_0, Dot_276_0, Reshape_1211_0, Dot_1127_0, Dot_1123_0, Reshape_981_0, Reshape_1277_0, Add_1096_0, Dot_1125_0, Dot_1121_0, Reshape_977_0, Dot_1126_0, Dot_1122_0, Reshape_979_0, Dot_1128_0, Dot_1124_0, Reshape_983_0, Dot_1135_0, Dot_1131_0, Reshape_785_0, Reshape_1283_0, Add_1097_0, Dot_1133_0, Dot_1129_0, Reshape_781_0, Dot_1134_0, Dot_1130_0, Reshape_783_0, Dot_1136_0, Dot_1132_0, Reshape_787_0, Multiply_1364_0, Add_1347_0, Multiply_1363_0, Add_1346_0, Multiply_1362_0, Add_1345_0, Multiply_1361_0, Add_1344_0, Multiply_1360_0, Add_1341_0, Multiply_1357_0, Add_1342_0, Multiply_1358_0, Add_1343_0, Multiply_1359_0);
 // name=blockfusion_kernel_2343
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_17_Call(dim3(448, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_1364_0, Constant_21_0, Constant_18_0, Constant_15_0, Constant_12_0, Multiply_1363_0, Constant_22_0, Constant_19_0, Constant_16_0, Constant_13_0, Constant_33_0, Constant_30_0, Constant_27_0, Constant_24_0, Multiply_1362_0, Constant_25_0, Constant_45_0, Constant_42_0, Constant_39_0, Constant_36_0, Constant_31_0, Constant_28_0, Constant_34_0, Multiply_1361_0, Constant_54_0, Constant_51_0, Constant_40_0, Constant_37_0, Constant_57_0, Constant_48_0, Constant_46_0, Constant_43_0, Multiply_1360_0, Constant_63_0, Constant_60_0, Constant_58_0, Constant_55_0, Constant_52_0, Constant_49_0, Constant_69_0, Constant_66_0, Multiply_1357_0, Constant_88_0, Constant_85_0, Constant_94_0, Constant_91_0, Multiply_1358_0, Constant_84_0, Constant_82_0, Constant_79_0, Constant_76_0, Constant_73_0, Constant_93_0, Constant_90_0, Constant_87_0, Multiply_1359_0, Constant_78_0, Constant_75_0, Constant_72_0, Constant_81_0, Constant_67_0, Constant_64_0, Constant_61_0, Constant_70_0, Dot_1420_0, Dot_1419_0, Dot_1418_0, Dot_1417_0, Dot_1416_0, Dot_1415_0, Dot_1414_0, Dot_1413_0, Dot_1412_0, Dot_1411_0, Dot_1410_0, Dot_1409_0, Dot_1405_0, Dot_1404_0, Dot_1403_0, Dot_1402_0, Dot_1401_0, Dot_1407_0, Dot_1406_0, Dot_1408_0, Dot_1395_0, Dot_1394_0, Dot_1398_0, Dot_1397_0, Dot_1396_0, Dot_1393_0, Dot_1400_0, Dot_1399_0, Dot_1386_0, Dot_1385_0, Dot_1392_0, Dot_1391_0, Dot_1390_0, Dot_1389_0, Dot_1388_0, Dot_1387_0, Dot_1366_0, Dot_1365_0, Dot_1368_0, Dot_1367_0, Dot_1369_0, Dot_1376_0, Dot_1375_0, Dot_1374_0, Dot_1373_0, Dot_1372_0, Dot_1371_0, Dot_1370_0, Dot_1379_0, Dot_1378_0, Dot_1377_0, Dot_1380_0, Dot_1383_0, Dot_1382_0, Dot_1381_0, Dot_1384_0);
 // name=Reshape_1543
// eliminated
 // name=Reshape_1537
// eliminated
 // name=Reshape_1531
// eliminated
 // name=Reshape_1525
// eliminated
 // name=Reshape_1519
// eliminated
 // name=Reshape_1513
// eliminated
 // name=Reshape_1507
// eliminated
 // name=blockfusion_kernel_2344
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_18_Call(dim3(7, 1, 1), dim3(256, 1, 1), 0, stream, Dot_1419_0, Dot_1415_0, Reshape_321_0, Reshape_1543_0, Add_1347_0, Dot_1417_0, Dot_1413_0, Reshape_317_0, Dot_1418_0, Dot_1414_0, Reshape_319_0, Dot_1420_0, Dot_1416_0, Reshape_323_0, Dot_1411_0, Dot_1407_0, Reshape_389_0, Reshape_1537_0, Add_1346_0, Dot_1409_0, Dot_1405_0, Reshape_385_0, Dot_1410_0, Dot_1406_0, Reshape_387_0, Dot_1412_0, Dot_1408_0, Reshape_391_0, Dot_1403_0, Dot_1399_0, Reshape_489_0, Reshape_1531_0, Add_1345_0, Dot_1401_0, Dot_1397_0, Reshape_485_0, Dot_1402_0, Dot_1398_0, Reshape_487_0, Dot_1404_0, Dot_1400_0, Reshape_491_0, Dot_1395_0, Dot_1391_0, Reshape_621_0, Reshape_1525_0, Add_1344_0, Dot_1393_0, Dot_1389_0, Reshape_617_0, Dot_1394_0, Dot_1390_0, Reshape_619_0, Dot_1396_0, Dot_1392_0, Reshape_623_0, Dot_1371_0, Dot_1367_0, Reshape_1209_0, Reshape_1507_0, Add_1341_0, Dot_1369_0, Dot_1365_0, Reshape_1205_0, Dot_1370_0, Dot_1366_0, Reshape_1207_0, Dot_1368_0, Dot_1372_0, Reshape_1211_0, Dot_1379_0, Dot_1375_0, Reshape_981_0, Reshape_1513_0, Add_1342_0, Dot_1377_0, Dot_1373_0, Reshape_977_0, Dot_1378_0, Dot_1374_0, Reshape_979_0, Dot_1380_0, Dot_1376_0, Reshape_983_0, Dot_1387_0, Dot_1383_0, Reshape_785_0, Reshape_1519_0, Add_1343_0, Dot_1385_0, Dot_1381_0, Reshape_781_0, Dot_1386_0, Dot_1382_0, Reshape_783_0, Dot_1388_0, Dot_1384_0, Reshape_787_0, Multiply_1588_0, Add_1573_0, Multiply_1587_0, Add_1572_0, Multiply_1586_0, Add_1571_0, Multiply_1585_0, Add_1568_0, Multiply_1582_0, Add_1569_0, Multiply_1583_0, Add_1570_0, Multiply_1584_0);
 // name=blockfusion_kernel_2345
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_19_Call(dim3(384, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_1588_0, Constant_24_0, Constant_30_0, Constant_33_0, Constant_27_0, Multiply_1587_0, Constant_42_0, Constant_39_0, Constant_34_0, Constant_31_0, Constant_25_0, Constant_36_0, Constant_28_0, Constant_45_0, Multiply_1586_0, Constant_57_0, Constant_54_0, Constant_43_0, Constant_51_0, Constant_40_0, Constant_37_0, Constant_48_0, Constant_46_0, Multiply_1585_0, Constant_55_0, Constant_52_0, Constant_49_0, Constant_60_0, Constant_69_0, Constant_66_0, Constant_58_0, Constant_63_0, Multiply_1582_0, Constant_88_0, Constant_94_0, Constant_91_0, Constant_85_0, Multiply_1583_0, Constant_93_0, Constant_90_0, Constant_79_0, Constant_76_0, Constant_87_0, Constant_73_0, Constant_84_0, Constant_82_0, Multiply_1584_0, Constant_70_0, Constant_72_0, Constant_81_0, Constant_78_0, Constant_75_0, Constant_67_0, Constant_64_0, Constant_61_0, Dot_1633_0, Dot_1635_0, Dot_1636_0, Dot_1634_0, Dot_1627_0, Dot_1626_0, Dot_1632_0, Dot_1631_0, Dot_1629_0, Dot_1625_0, Dot_1630_0, Dot_1628_0, Dot_1620_0, Dot_1619_0, Dot_1623_0, Dot_1618_0, Dot_1622_0, Dot_1621_0, Dot_1617_0, Dot_1624_0, Dot_1615_0, Dot_1614_0, Dot_1613_0, Dot_1609_0, Dot_1612_0, Dot_1611_0, Dot_1616_0, Dot_1610_0, Dot_1590_0, Dot_1592_0, Dot_1591_0, Dot_1589_0, Dot_1596_0, Dot_1595_0, Dot_1599_0, Dot_1598_0, Dot_1594_0, Dot_1597_0, Dot_1593_0, Dot_1600_0, Dot_1608_0, Dot_1601_0, Dot_1604_0, Dot_1603_0, Dot_1602_0, Dot_1607_0, Dot_1606_0, Dot_1605_0);
 // name=Reshape_1741
// eliminated
 // name=Reshape_1735
// eliminated
 // name=Reshape_1729
// eliminated
 // name=Reshape_1723
// eliminated
 // name=Reshape_1717
// eliminated
 // name=Reshape_1711
// eliminated
 // name=blockfusion_kernel_2346
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_20_Call(dim3(6, 1, 1), dim3(256, 1, 1), 0, stream, Dot_1635_0, Dot_1631_0, Reshape_389_0, Reshape_1741_0, Add_1573_0, Dot_1633_0, Dot_1629_0, Reshape_385_0, Dot_1634_0, Dot_1630_0, Reshape_387_0, Dot_1636_0, Dot_1632_0, Reshape_391_0, Dot_1627_0, Dot_1623_0, Reshape_489_0, Reshape_1735_0, Add_1572_0, Dot_1625_0, Dot_1621_0, Reshape_485_0, Dot_1626_0, Dot_1622_0, Reshape_487_0, Dot_1628_0, Dot_1624_0, Reshape_491_0, Dot_1619_0, Dot_1615_0, Reshape_621_0, Reshape_1729_0, Add_1571_0, Dot_1617_0, Dot_1613_0, Reshape_617_0, Dot_1618_0, Dot_1614_0, Reshape_619_0, Dot_1620_0, Dot_1616_0, Reshape_623_0, Dot_1595_0, Dot_1591_0, Reshape_1209_0, Reshape_1711_0, Add_1568_0, Dot_1593_0, Dot_1589_0, Reshape_1205_0, Dot_1594_0, Dot_1590_0, Reshape_1207_0, Dot_1596_0, Dot_1592_0, Reshape_1211_0, Dot_1603_0, Dot_1599_0, Reshape_981_0, Reshape_1717_0, Add_1569_0, Dot_1601_0, Dot_1597_0, Reshape_977_0, Dot_1602_0, Dot_1598_0, Reshape_979_0, Dot_1604_0, Dot_1600_0, Reshape_983_0, Dot_1611_0, Dot_1607_0, Reshape_785_0, Reshape_1723_0, Add_1570_0, Dot_1609_0, Dot_1605_0, Reshape_781_0, Dot_1610_0, Dot_1606_0, Reshape_783_0, Dot_1612_0, Dot_1608_0, Reshape_787_0, Multiply_1780_0, Add_1767_0, Multiply_1779_0, Add_1766_0, Multiply_1778_0, Add_1763_0, Multiply_1775_0, Add_1764_0, Multiply_1776_0, Add_1765_0, Multiply_1777_0);
 // name=blockfusion_kernel_2347
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_21_Call(dim3(320, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_1780_0, Constant_45_0, Constant_42_0, Constant_39_0, Constant_36_0, Multiply_1779_0, Constant_46_0, Constant_43_0, Constant_40_0, Constant_37_0, Constant_57_0, Constant_54_0, Constant_51_0, Constant_48_0, Multiply_1778_0, Constant_58_0, Constant_69_0, Constant_66_0, Constant_52_0, Constant_55_0, Constant_63_0, Constant_49_0, Constant_60_0, Multiply_1775_0, Constant_94_0, Constant_91_0, Constant_88_0, Constant_85_0, Multiply_1776_0, Constant_90_0, Constant_87_0, Constant_76_0, Constant_84_0, Constant_82_0, Constant_73_0, Constant_79_0, Constant_93_0, Multiply_1777_0, Constant_70_0, Constant_64_0, Constant_61_0, Constant_67_0, Constant_81_0, Constant_78_0, Constant_72_0, Constant_75_0, Dot_1820_0, Dot_1819_0, Dot_1818_0, Dot_1817_0, Dot_1816_0, Dot_1815_0, Dot_1814_0, Dot_1813_0, Dot_1812_0, Dot_1811_0, Dot_1810_0, Dot_1809_0, Dot_1808_0, Dot_1804_0, Dot_1803_0, Dot_1806_0, Dot_1807_0, Dot_1802_0, Dot_1805_0, Dot_1801_0, Dot_1784_0, Dot_1783_0, Dot_1782_0, Dot_1781_0, Dot_1787_0, Dot_1786_0, Dot_1790_0, Dot_1785_0, Dot_1792_0, Dot_1789_0, Dot_1791_0, Dot_1788_0, Dot_1800_0, Dot_1798_0, Dot_1797_0, Dot_1799_0, Dot_1796_0, Dot_1795_0, Dot_1793_0, Dot_1794_0);
 // name=Reshape_1907
// eliminated
 // name=Reshape_1901
// eliminated
 // name=Reshape_1895
// eliminated
 // name=Reshape_1889
// eliminated
 // name=Reshape_1883
// eliminated
 // name=blockfusion_kernel_2348
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_22_Call(dim3(5, 1, 1), dim3(256, 1, 1), 0, stream, Dot_1819_0, Dot_1815_0, Reshape_489_0, Reshape_1907_0, Add_1767_0, Dot_1817_0, Dot_1813_0, Reshape_485_0, Dot_1818_0, Dot_1814_0, Reshape_487_0, Dot_1820_0, Dot_1816_0, Reshape_491_0, Dot_1811_0, Dot_1807_0, Reshape_621_0, Reshape_1901_0, Add_1766_0, Dot_1809_0, Dot_1805_0, Reshape_617_0, Dot_1810_0, Dot_1806_0, Reshape_619_0, Dot_1812_0, Dot_1808_0, Reshape_623_0, Dot_1787_0, Dot_1783_0, Reshape_1209_0, Reshape_1883_0, Add_1763_0, Dot_1785_0, Dot_1781_0, Reshape_1205_0, Dot_1786_0, Dot_1782_0, Reshape_1207_0, Dot_1788_0, Dot_1784_0, Reshape_1211_0, Dot_1803_0, Dot_1799_0, Reshape_785_0, Reshape_1895_0, Add_1765_0, Dot_1801_0, Dot_1797_0, Reshape_781_0, Dot_1802_0, Dot_1798_0, Reshape_783_0, Dot_1804_0, Dot_1800_0, Reshape_787_0, Dot_1795_0, Dot_1791_0, Reshape_981_0, Reshape_1889_0, Add_1764_0, Dot_1793_0, Dot_1789_0, Reshape_977_0, Dot_1794_0, Dot_1790_0, Reshape_979_0, Dot_1796_0, Dot_1792_0, Reshape_983_0, Multiply_1940_0, Add_1929_0, Multiply_1939_0, Add_1926_0, Multiply_1936_0, Add_1928_0, Multiply_1938_0, Add_1927_0, Multiply_1937_0);
 // name=blockfusion_kernel_2349
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_23_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_1940_0, Constant_54_0, Constant_57_0, Constant_51_0, Constant_48_0, Multiply_1939_0, Constant_66_0, Constant_52_0, Constant_49_0, Constant_69_0, Constant_60_0, Constant_63_0, Constant_58_0, Constant_55_0, Multiply_1936_0, Constant_88_0, Constant_85_0, Constant_94_0, Constant_91_0, Multiply_1938_0, Constant_70_0, Constant_67_0, Constant_64_0, Constant_61_0, Constant_81_0, Constant_78_0, Constant_75_0, Constant_72_0, Multiply_1937_0, Constant_87_0, Constant_73_0, Constant_93_0, Constant_84_0, Constant_90_0, Constant_82_0, Constant_79_0, Constant_76_0, Dot_1971_0, Dot_1972_0, Dot_1970_0, Dot_1969_0, Dot_1963_0, Dot_1966_0, Dot_1965_0, Dot_1964_0, Dot_1961_0, Dot_1962_0, Dot_1968_0, Dot_1967_0, Dot_1942_0, Dot_1941_0, Dot_1944_0, Dot_1943_0, Dot_1960_0, Dot_1959_0, Dot_1958_0, Dot_1957_0, Dot_1956_0, Dot_1955_0, Dot_1954_0, Dot_1953_0, Dot_1946_0, Dot_1949_0, Dot_1948_0, Dot_1945_0, Dot_1947_0, Dot_1952_0, Dot_1951_0, Dot_1950_0);
 // name=Reshape_2041
// eliminated
 // name=Reshape_2035
// eliminated
 // name=Reshape_2029
// eliminated
 // name=Reshape_2023
// eliminated
 // name=blockfusion_kernel_2350
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_24_Call(dim3(4, 1, 1), dim3(256, 1, 1), 0, stream, Dot_1971_0, Dot_1967_0, Reshape_621_0, Reshape_2041_0, Add_1929_0, Dot_1969_0, Dot_1965_0, Reshape_617_0, Dot_1970_0, Dot_1966_0, Reshape_619_0, Dot_1972_0, Dot_1968_0, Reshape_623_0, Dot_1963_0, Dot_1959_0, Reshape_785_0, Reshape_2035_0, Add_1928_0, Dot_1961_0, Dot_1957_0, Reshape_781_0, Dot_1962_0, Dot_1958_0, Reshape_783_0, Dot_1964_0, Dot_1960_0, Reshape_787_0, Dot_1947_0, Dot_1943_0, Reshape_1209_0, Reshape_2023_0, Add_1926_0, Dot_1945_0, Dot_1941_0, Reshape_1205_0, Dot_1946_0, Dot_1942_0, Reshape_1207_0, Dot_1948_0, Dot_1944_0, Reshape_1211_0, Dot_1955_0, Dot_1951_0, Reshape_981_0, Reshape_2029_0, Add_1927_0, Dot_1953_0, Dot_1949_0, Reshape_977_0, Dot_1954_0, Dot_1950_0, Reshape_979_0, Dot_1956_0, Dot_1952_0, Reshape_983_0, Multiply_2068_0, Add_2059_0, Multiply_2067_0, Add_2057_0, Multiply_2065_0, Add_2058_0, Multiply_2066_0);
 // name=blockfusion_kernel_2351
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_25_Call(dim3(192, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_2068_0, Constant_66_0, Constant_60_0, Constant_63_0, Constant_69_0, Multiply_2067_0, Constant_72_0, Constant_70_0, Constant_64_0, Constant_67_0, Constant_81_0, Constant_61_0, Constant_78_0, Constant_75_0, Multiply_2065_0, Constant_85_0, Constant_94_0, Constant_91_0, Constant_88_0, Multiply_2066_0, Constant_82_0, Constant_84_0, Constant_93_0, Constant_90_0, Constant_79_0, Constant_87_0, Constant_76_0, Constant_73_0, Dot_2091_0, Dot_2089_0, Dot_2090_0, Dot_2092_0, Dot_2081_0, Dot_2088_0, Dot_2086_0, Dot_2087_0, Dot_2084_0, Dot_2085_0, Dot_2083_0, Dot_2082_0, Dot_2069_0, Dot_2072_0, Dot_2071_0, Dot_2070_0, Dot_2080_0, Dot_2073_0, Dot_2076_0, Dot_2075_0, Dot_2079_0, Dot_2074_0, Dot_2078_0, Dot_2077_0);
 // name=Reshape_2143
// eliminated
 // name=Reshape_2137
// eliminated
 // name=Reshape_2131
// eliminated
 // name=blockfusion_kernel_2352
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_26_Call(dim3(3, 1, 1), dim3(256, 1, 1), 0, stream, Dot_2091_0, Dot_2087_0, Reshape_785_0, Reshape_2143_0, Add_2059_0, Dot_2089_0, Dot_2085_0, Reshape_781_0, Dot_2090_0, Dot_2086_0, Reshape_783_0, Dot_2092_0, Dot_2088_0, Reshape_787_0, Dot_2075_0, Dot_2071_0, Reshape_1209_0, Reshape_2131_0, Add_2057_0, Dot_2073_0, Dot_2069_0, Reshape_1205_0, Dot_2074_0, Dot_2070_0, Reshape_1207_0, Dot_2076_0, Dot_2072_0, Reshape_1211_0, Dot_2083_0, Dot_2079_0, Reshape_981_0, Reshape_2137_0, Add_2058_0, Dot_2081_0, Dot_2077_0, Reshape_977_0, Dot_2082_0, Dot_2078_0, Reshape_979_0, Dot_2084_0, Dot_2080_0, Reshape_983_0, Multiply_2164_0, Add_2156_0, Multiply_2162_0, Add_2157_0, Multiply_2163_0);
 // name=blockfusion_kernel_2353
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_27_Call(dim3(128, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_2164_0, Constant_81_0, Constant_78_0, Constant_75_0, Constant_72_0, Multiply_2162_0, Constant_91_0, Constant_94_0, Constant_88_0, Constant_85_0, Multiply_2163_0, Constant_82_0, Constant_79_0, Constant_87_0, Constant_76_0, Constant_73_0, Constant_84_0, Constant_93_0, Constant_90_0, Dot_2180_0, Dot_2179_0, Dot_2178_0, Dot_2177_0, Dot_2167_0, Dot_2168_0, Dot_2166_0, Dot_2165_0, Dot_2176_0, Dot_2175_0, Dot_2170_0, Dot_2174_0, Dot_2173_0, Dot_2169_0, Dot_2172_0, Dot_2171_0);
 // name=Reshape_2213
// eliminated
 // name=Reshape_2207
// eliminated
 // name=blockfusion_kernel_2354
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_28_Call(dim3(2, 1, 1), dim3(256, 1, 1), 0, stream, Dot_2179_0, Dot_2175_0, Reshape_981_0, Reshape_2213_0, Add_2157_0, Dot_2177_0, Dot_2173_0, Reshape_977_0, Dot_2178_0, Dot_2174_0, Reshape_979_0, Dot_2180_0, Dot_2176_0, Reshape_983_0, Dot_2171_0, Dot_2167_0, Reshape_1209_0, Reshape_2207_0, Add_2156_0, Dot_2169_0, Dot_2165_0, Reshape_1205_0, Dot_2170_0, Dot_2166_0, Reshape_1207_0, Dot_2172_0, Dot_2168_0, Reshape_1211_0, Multiply_2228_0, Add_2223_0, Multiply_2227_0);
 // name=blockfusion_kernel_2355
BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_29_Call(dim3(64, 1, 1), dim3(128, 1, 1), 0, stream, Multiply_2228_0, Constant_84_0, Constant_90_0, Constant_87_0, Constant_93_0, Multiply_2227_0, Constant_88_0, Constant_94_0, Constant_85_0, Constant_91_0, Dot_2233_0, Dot_2235_0, Dot_2234_0, Dot_2236_0, Dot_2230_0, Dot_2232_0, Dot_2229_0, Dot_2231_0);
 // name=Reshape_2251
// eliminated
 // name=fused_kernel_2325
FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_63_Call(dim3(1, 1, 1), dim3(256, 1, 1), 0, stream, Dot_2235_0, Dot_2231_0, Reshape_1209_0, Reshape_2251_0, Add_2223_0, Dot_2233_0, Dot_2229_0, Reshape_1205_0, Dot_2234_0, Dot_2230_0, Reshape_1207_0, Dot_2236_0, Dot_2232_0, Reshape_1211_0, Multiply_2260_0);
 // name=Result_2261
//Result_float_float_cuda_lib_Result_2261(Multiply_2260_0, Result_2261_0);
}

__device__ __forceinline__
void cdp_internal(float *inp, float *out)
{
  float* Parameter_96_0 = inp;
  d_Multiply_2260_0 = out;
  // kernel_entry_init
  // name=blockfusion_kernel_2326
  BlockFusionKernel_float_int32_t_int32_t_int32_t_int32_t_float_float_float_float_float_float_float_float_float_int32_t_int32_t_float_cuda_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Slice_Concat_Concat_Broadcast_0
    <<<dim3(38, 1, 1), dim3(512, 1, 1), 0, 0>>>(Parameter_96_0, d_Constant_97_0, d_Constant_98_0, d_Constant_101_0, d_Constant_102_0, d_Constant_104_0, d_Slice_195_0, d_Slice_197_0, d_Slice_199_0, d_Slice_201_0, d_Slice_203_0, d_Slice_205_0, d_Slice_207_0, d_Slice_209_0, d_Concat_193_0, d_Concat_194_0, d_Broadcast_212_0);
  cudaDeviceSynchronize();
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_2_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, 0, d_Reshape_196_0, d_Constant_6_0, d_Constant_3_0, d_Constant_9_0, d_Constant_0_0, d_Reshape_198_0, d_Reshape_200_0, d_Reshape_202_0, d_Reshape_204_0, d_Reshape_206_0, d_Reshape_208_0, d_Reshape_210_0, d_Dot_215_0, d_Dot_214_0, d_Dot_216_0, d_Dot_213_0, d_Dot_217_0, d_Dot_218_0, d_Dot_220_0, d_Dot_219_0, d_Dot_221_0, d_Dot_224_0, d_Dot_223_0, d_Dot_222_0, d_Dot_227_0, d_Dot_226_0, d_Dot_228_0, d_Dot_225_0, d_Dot_232_0, d_Dot_230_0, d_Dot_231_0, d_Dot_229_0, d_Dot_233_0, d_Dot_234_0, d_Dot_235_0, d_Dot_236_0, d_Dot_237_0, d_Dot_238_0, d_Dot_239_0, d_Dot_240_0, d_Dot_241_0, d_Dot_242_0, d_Dot_243_0, d_Dot_244_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_2
    <<<dim3(256, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Reshape_196_0, d_Constant_6_0, d_Constant_3_0, d_Constant_9_0, d_Constant_0_0, d_Reshape_198_0, d_Reshape_200_0, d_Reshape_202_0, d_Reshape_204_0, d_Reshape_206_0, d_Reshape_208_0, d_Reshape_210_0, d_Dot_215_0, d_Dot_214_0, d_Dot_216_0, d_Dot_213_0, d_Dot_217_0, d_Dot_218_0, d_Dot_220_0, d_Dot_219_0, d_Dot_221_0, d_Dot_224_0, d_Dot_223_0, d_Dot_222_0, d_Dot_227_0, d_Dot_226_0, d_Dot_228_0, d_Dot_225_0, d_Dot_232_0, d_Dot_230_0, d_Dot_231_0, d_Dot_229_0, d_Dot_233_0, d_Dot_234_0, d_Dot_235_0, d_Dot_236_0, d_Dot_237_0, d_Dot_238_0, d_Dot_239_0, d_Dot_240_0, d_Dot_241_0, d_Dot_242_0, d_Dot_243_0, d_Dot_244_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2327
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_1_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, 0, Broadcast_212_0, d_Constant_37_0, d_Constant_40_0, d_Constant_34_0, d_Constant_67_0, d_Constant_1_0, d_Constant_4_0, d_Constant_7_0, d_Constant_10_0, d_Constant_13_0, d_Constant_16_0, d_Constant_19_0, d_Constant_22_0, d_Constant_25_0, d_Constant_28_0, d_Constant_31_0, d_Constant_43_0, d_Constant_46_0, d_Constant_49_0, d_Constant_52_0, d_Constant_55_0, d_Constant_58_0, d_Constant_61_0, d_Constant_64_0, d_Constant_70_0, d_Constant_73_0, d_Constant_76_0, d_Constant_79_0, d_Constant_82_0, d_Constant_85_0, d_Constant_88_0, d_Constant_91_0, d_Constant_94_0, d_Dot_257_0, d_Dot_258_0, d_Dot_256_0, d_Dot_267_0, d_Dot_245_0, d_Dot_246_0, d_Dot_247_0, d_Dot_248_0, d_Dot_249_0, d_Dot_250_0, d_Dot_251_0, d_Dot_252_0, d_Dot_253_0, d_Dot_254_0, d_Dot_255_0, d_Dot_259_0, d_Dot_260_0, d_Dot_261_0, d_Dot_262_0, d_Dot_263_0, d_Dot_264_0, d_Dot_265_0, d_Dot_266_0, d_Dot_268_0, d_Dot_269_0, d_Dot_270_0, d_Dot_271_0, d_Dot_272_0, d_Dot_273_0, d_Dot_274_0, d_Dot_275_0, d_Dot_276_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_1
    <<<dim3(256, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Broadcast_212_0, d_Constant_37_0, d_Constant_40_0, d_Constant_34_0, d_Constant_67_0, d_Constant_1_0, d_Constant_4_0, d_Constant_7_0, d_Constant_10_0, d_Constant_13_0, d_Constant_16_0, d_Constant_19_0, d_Constant_22_0, d_Constant_25_0, d_Constant_28_0, d_Constant_31_0, d_Constant_43_0, d_Constant_46_0, d_Constant_49_0, d_Constant_52_0, d_Constant_55_0, d_Constant_58_0, d_Constant_61_0, d_Constant_64_0, d_Constant_70_0, d_Constant_73_0, d_Constant_76_0, d_Constant_79_0, d_Constant_82_0, d_Constant_85_0, d_Constant_88_0, d_Constant_91_0, d_Constant_94_0, d_Dot_257_0, d_Dot_258_0, d_Dot_256_0, d_Dot_267_0, d_Dot_245_0, d_Dot_246_0, d_Dot_247_0, d_Dot_248_0, d_Dot_249_0, d_Dot_250_0, d_Dot_251_0, d_Dot_252_0, d_Dot_253_0, d_Dot_254_0, d_Dot_255_0, d_Dot_259_0, d_Dot_260_0, d_Dot_261_0, d_Dot_262_0, d_Dot_263_0, d_Dot_264_0, d_Dot_265_0, d_Dot_266_0, d_Dot_268_0, d_Dot_269_0, d_Dot_270_0, d_Dot_271_0, d_Dot_272_0, d_Dot_273_0, d_Dot_274_0, d_Dot_275_0, d_Dot_276_0);
  cudaDeviceSynchronize();
  //FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_0_Call(dim3(1, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_215_0, d_Dot_247_0, d_Reshape_285_0, d_Reshape_291_0, d_Constant_100_0, d_Dot_213_0, d_Dot_245_0, d_Reshape_281_0, d_Dot_214_0, d_Dot_246_0, d_Reshape_283_0, d_Dot_216_0, d_Dot_248_0, d_Reshape_287_0, d_Multiply_300_0, d_Add_298_0);
  FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Broadcast_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_0
    <<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_215_0, d_Dot_247_0, d_Reshape_285_0, d_Reshape_291_0, d_Constant_100_0, d_Dot_213_0, d_Dot_245_0, d_Reshape_281_0, d_Dot_214_0, d_Dot_246_0, d_Reshape_283_0, d_Dot_216_0, d_Dot_248_0, d_Reshape_287_0, d_Multiply_300_0, d_Add_298_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2329
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_3_Call(dim3(64, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_300_0, d_Constant_10_0, d_Constant_7_0, d_Constant_1_0, d_Constant_4_0, d_Constant_21_0, d_Constant_18_0, d_Constant_12_0, d_Constant_15_0, d_Dot_308_0, d_Dot_307_0, d_Dot_305_0, d_Dot_306_0, d_Dot_304_0, d_Dot_303_0, d_Dot_301_0, d_Dot_302_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_3
    <<<dim3(64, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_300_0, d_Constant_10_0, d_Constant_7_0, d_Constant_1_0, d_Constant_4_0, d_Constant_21_0, d_Constant_18_0, d_Constant_12_0, d_Constant_15_0, d_Dot_308_0, d_Dot_307_0, d_Dot_305_0, d_Dot_306_0, d_Dot_304_0, d_Dot_303_0, d_Dot_301_0, d_Dot_302_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2330
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_4_Call(dim3(2, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_219_0, d_Dot_307_0, d_Reshape_285_0, d_Reshape_341_0, d_Add_298_0, d_Dot_217_0, d_Dot_305_0, d_Reshape_281_0, d_Dot_218_0, d_Dot_306_0, d_Reshape_283_0, d_Dot_220_0, d_Dot_308_0, d_Reshape_287_0, d_Dot_303_0, d_Dot_251_0, d_Reshape_321_0, d_Reshape_335_0, d_Constant_100_0, d_Dot_301_0, d_Dot_249_0, d_Reshape_317_0, d_Dot_302_0, d_Dot_250_0, d_Reshape_319_0, d_Dot_304_0, d_Dot_252_0, d_Reshape_323_0, d_Add_352_0, d_Multiply_356_0, d_Add_351_0, d_Multiply_355_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_4
    <<<dim3(2, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_219_0, d_Dot_307_0, d_Reshape_285_0, d_Reshape_341_0, d_Add_298_0, d_Dot_217_0, d_Dot_305_0, d_Reshape_281_0, d_Dot_218_0, d_Dot_306_0, d_Reshape_283_0, d_Dot_220_0, d_Dot_308_0, d_Reshape_287_0, d_Dot_303_0, d_Dot_251_0, d_Reshape_321_0, d_Reshape_335_0, d_Constant_100_0, d_Dot_301_0, d_Dot_249_0, d_Reshape_317_0, d_Dot_302_0, d_Dot_250_0, d_Reshape_319_0, d_Dot_304_0, d_Dot_252_0, d_Reshape_323_0, d_Add_352_0, d_Multiply_356_0, d_Add_351_0, d_Multiply_355_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2331
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_5_Call(dim3(128, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_356_0, d_Constant_1_0, d_Constant_21_0, d_Constant_15_0, d_Constant_18_0, d_Constant_7_0, d_Constant_12_0, d_Constant_4_0, d_Constant_10_0, d_Multiply_355_0, d_Constant_30_0, d_Constant_24_0, d_Constant_27_0, d_Constant_13_0, d_Constant_22_0, d_Constant_19_0, d_Constant_16_0, d_Constant_33_0, d_Dot_369_0, d_Dot_368_0, d_Dot_366_0, d_Dot_367_0, d_Dot_371_0, d_Dot_365_0, d_Dot_370_0, d_Dot_372_0, d_Dot_359_0, d_Dot_357_0, d_Dot_358_0, d_Dot_361_0, d_Dot_364_0, d_Dot_363_0, d_Dot_362_0, d_Dot_360_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_5
    <<<dim3(128, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_356_0, d_Constant_1_0, d_Constant_21_0, d_Constant_15_0, d_Constant_18_0, d_Constant_7_0, d_Constant_12_0, d_Constant_4_0, d_Constant_10_0, d_Multiply_355_0, d_Constant_30_0, d_Constant_24_0, d_Constant_27_0, d_Constant_13_0, d_Constant_22_0, d_Constant_19_0, d_Constant_16_0, d_Constant_33_0, d_Dot_369_0, d_Dot_368_0, d_Dot_366_0, d_Dot_367_0, d_Dot_371_0, d_Dot_365_0, d_Dot_370_0, d_Dot_372_0, d_Dot_359_0, d_Dot_357_0, d_Dot_358_0, d_Dot_361_0, d_Dot_364_0, d_Dot_363_0, d_Dot_362_0, d_Dot_360_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2332
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_6_Call(dim3(3, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_223_0, d_Dot_371_0, d_Reshape_285_0, d_Reshape_423_0, d_Add_352_0, d_Dot_221_0, d_Dot_369_0, d_Reshape_281_0, d_Dot_222_0, d_Dot_370_0, d_Reshape_283_0, d_Dot_224_0, d_Dot_372_0, d_Reshape_287_0, d_Dot_367_0, d_Dot_363_0, d_Reshape_321_0, d_Reshape_417_0, d_Add_351_0, d_Dot_365_0, d_Dot_361_0, d_Reshape_317_0, d_Dot_366_0, d_Dot_362_0, d_Reshape_319_0, d_Dot_368_0, d_Dot_364_0, d_Reshape_323_0, d_Dot_359_0, d_Dot_255_0, d_Reshape_389_0, d_Reshape_411_0, d_Constant_100_0, d_Dot_357_0, d_Dot_253_0, d_Reshape_385_0, d_Dot_358_0, d_Dot_254_0, d_Reshape_387_0, d_Dot_360_0, d_Dot_256_0, d_Reshape_391_0, d_Add_438_0, d_Multiply_444_0, d_Add_437_0, d_Multiply_443_0, d_Add_436_0, d_Multiply_442_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_6
    <<<dim3(3, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_223_0, d_Dot_371_0, d_Reshape_285_0, d_Reshape_423_0, d_Add_352_0, d_Dot_221_0, d_Dot_369_0, d_Reshape_281_0, d_Dot_222_0, d_Dot_370_0, d_Reshape_283_0, d_Dot_224_0, d_Dot_372_0, d_Reshape_287_0, d_Dot_367_0, d_Dot_363_0, d_Reshape_321_0, d_Reshape_417_0, d_Add_351_0, d_Dot_365_0, d_Dot_361_0, d_Reshape_317_0, d_Dot_366_0, d_Dot_362_0, d_Reshape_319_0, d_Dot_368_0, d_Dot_364_0, d_Reshape_323_0, d_Dot_359_0, d_Dot_255_0, d_Reshape_389_0, d_Reshape_411_0, d_Constant_100_0, d_Dot_357_0, d_Dot_253_0, d_Reshape_385_0, d_Dot_358_0, d_Dot_254_0, d_Reshape_387_0, d_Dot_360_0, d_Dot_256_0, d_Reshape_391_0, d_Add_438_0, d_Multiply_444_0, d_Add_437_0, d_Multiply_443_0, d_Add_436_0, d_Multiply_442_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2333
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_7_Call(dim3(192, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_444_0, d_Constant_21_0, d_Constant_1_0, d_Constant_15_0, d_Constant_18_0, d_Constant_12_0, d_Constant_7_0, d_Constant_4_0, d_Constant_10_0, d_Multiply_443_0, d_Constant_19_0, d_Constant_22_0, d_Constant_16_0, d_Constant_33_0, d_Constant_30_0, d_Constant_27_0, d_Constant_24_0, d_Constant_13_0, d_Multiply_442_0, d_Constant_34_0, d_Constant_28_0, d_Constant_31_0, d_Constant_36_0, d_Constant_39_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Dot_464_0, d_Dot_465_0, d_Dot_462_0, d_Dot_463_0, d_Dot_461_0, d_Dot_467_0, d_Dot_466_0, d_Dot_468_0, d_Dot_459_0, d_Dot_460_0, d_Dot_458_0, d_Dot_456_0, d_Dot_455_0, d_Dot_454_0, d_Dot_453_0, d_Dot_457_0, d_Dot_452_0, d_Dot_450_0, d_Dot_451_0, d_Dot_445_0, d_Dot_446_0, d_Dot_449_0, d_Dot_448_0, d_Dot_447_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_7
    <<<dim3(192, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_444_0, d_Constant_21_0, d_Constant_1_0, d_Constant_15_0, d_Constant_18_0, d_Constant_12_0, d_Constant_7_0, d_Constant_4_0, d_Constant_10_0, d_Multiply_443_0, d_Constant_19_0, d_Constant_22_0, d_Constant_16_0, d_Constant_33_0, d_Constant_30_0, d_Constant_27_0, d_Constant_24_0, d_Constant_13_0, d_Multiply_442_0, d_Constant_34_0, d_Constant_28_0, d_Constant_31_0, d_Constant_36_0, d_Constant_39_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Dot_464_0, d_Dot_465_0, d_Dot_462_0, d_Dot_463_0, d_Dot_461_0, d_Dot_467_0, d_Dot_466_0, d_Dot_468_0, d_Dot_459_0, d_Dot_460_0, d_Dot_458_0, d_Dot_456_0, d_Dot_455_0, d_Dot_454_0, d_Dot_453_0, d_Dot_457_0, d_Dot_452_0, d_Dot_450_0, d_Dot_451_0, d_Dot_445_0, d_Dot_446_0, d_Dot_449_0, d_Dot_448_0, d_Dot_447_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2334
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_8_Call(dim3(4, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_227_0, d_Dot_467_0, d_Reshape_285_0, d_Reshape_537_0, d_Add_438_0, d_Dot_225_0, d_Dot_465_0, d_Reshape_281_0, d_Dot_226_0, d_Dot_466_0, d_Reshape_283_0, d_Dot_228_0, d_Dot_468_0, d_Reshape_287_0, d_Dot_463_0, d_Dot_459_0, d_Reshape_321_0, d_Reshape_531_0, d_Add_437_0, d_Dot_461_0, d_Dot_457_0, d_Reshape_317_0, d_Dot_462_0, d_Dot_458_0, d_Reshape_319_0, d_Dot_464_0, d_Dot_460_0, d_Reshape_323_0, d_Dot_455_0, d_Dot_451_0, d_Reshape_389_0, d_Reshape_525_0, d_Add_436_0, d_Dot_453_0, d_Dot_449_0, d_Reshape_385_0, d_Dot_454_0, d_Dot_450_0, d_Reshape_387_0, d_Dot_456_0, d_Dot_452_0, d_Reshape_391_0, d_Dot_447_0, d_Dot_259_0, d_Reshape_489_0, d_Reshape_519_0, d_Constant_100_0, d_Dot_445_0, d_Dot_257_0, d_Reshape_485_0, d_Dot_446_0, d_Dot_258_0, d_Reshape_487_0, d_Dot_448_0, d_Dot_260_0, d_Reshape_491_0, d_Add_556_0, d_Multiply_564_0, d_Add_555_0, d_Multiply_563_0, d_Add_554_0, d_Multiply_562_0, d_Add_553_0, d_Multiply_561_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_8
    <<<dim3(4, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_227_0, d_Dot_467_0, d_Reshape_285_0, d_Reshape_537_0, d_Add_438_0, d_Dot_225_0, d_Dot_465_0, d_Reshape_281_0, d_Dot_226_0, d_Dot_466_0, d_Reshape_283_0, d_Dot_228_0, d_Dot_468_0, d_Reshape_287_0, d_Dot_463_0, d_Dot_459_0, d_Reshape_321_0, d_Reshape_531_0, d_Add_437_0, d_Dot_461_0, d_Dot_457_0, d_Reshape_317_0, d_Dot_462_0, d_Dot_458_0, d_Reshape_319_0, d_Dot_464_0, d_Dot_460_0, d_Reshape_323_0, d_Dot_455_0, d_Dot_451_0, d_Reshape_389_0, d_Reshape_525_0, d_Add_436_0, d_Dot_453_0, d_Dot_449_0, d_Reshape_385_0, d_Dot_454_0, d_Dot_450_0, d_Reshape_387_0, d_Dot_456_0, d_Dot_452_0, d_Reshape_391_0, d_Dot_447_0, d_Dot_259_0, d_Reshape_489_0, d_Reshape_519_0, d_Constant_100_0, d_Dot_445_0, d_Dot_257_0, d_Reshape_485_0, d_Dot_446_0, d_Dot_258_0, d_Reshape_487_0, d_Dot_448_0, d_Dot_260_0, d_Reshape_491_0, d_Add_556_0, d_Multiply_564_0, d_Add_555_0, d_Multiply_563_0, d_Add_554_0, d_Multiply_562_0, d_Add_553_0, d_Multiply_561_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2335
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_9_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_564_0, d_Constant_21_0, d_Constant_18_0, d_Constant_10_0, d_Constant_4_0, d_Constant_7_0, d_Constant_1_0, d_Constant_15_0, d_Constant_12_0, d_Multiply_563_0, d_Constant_30_0, d_Constant_13_0, d_Constant_16_0, d_Constant_22_0, d_Constant_33_0, d_Constant_19_0, d_Constant_24_0, d_Constant_27_0, d_Multiply_562_0, d_Constant_31_0, d_Constant_28_0, d_Constant_45_0, d_Constant_25_0, d_Constant_39_0, d_Constant_42_0, d_Constant_36_0, d_Constant_34_0, d_Multiply_561_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_54_0, d_Constant_51_0, d_Constant_37_0, d_Constant_57_0, d_Constant_48_0, d_Dot_592_0, d_Dot_591_0, d_Dot_596_0, d_Dot_594_0, d_Dot_595_0, d_Dot_593_0, d_Dot_590_0, d_Dot_589_0, d_Dot_583_0, d_Dot_585_0, d_Dot_586_0, d_Dot_588_0, d_Dot_584_0, d_Dot_587_0, d_Dot_581_0, d_Dot_582_0, d_Dot_579_0, d_Dot_578_0, d_Dot_576_0, d_Dot_577_0, d_Dot_574_0, d_Dot_575_0, d_Dot_573_0, d_Dot_580_0, d_Dot_572_0, d_Dot_571_0, d_Dot_570_0, d_Dot_567_0, d_Dot_566_0, d_Dot_569_0, d_Dot_568_0, d_Dot_565_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_9
    <<<dim3(256, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_564_0, d_Constant_21_0, d_Constant_18_0, d_Constant_10_0, d_Constant_4_0, d_Constant_7_0, d_Constant_1_0, d_Constant_15_0, d_Constant_12_0, d_Multiply_563_0, d_Constant_30_0, d_Constant_13_0, d_Constant_16_0, d_Constant_22_0, d_Constant_33_0, d_Constant_19_0, d_Constant_24_0, d_Constant_27_0, d_Multiply_562_0, d_Constant_31_0, d_Constant_28_0, d_Constant_45_0, d_Constant_25_0, d_Constant_39_0, d_Constant_42_0, d_Constant_36_0, d_Constant_34_0, d_Multiply_561_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_54_0, d_Constant_51_0, d_Constant_37_0, d_Constant_57_0, d_Constant_48_0, d_Dot_592_0, d_Dot_591_0, d_Dot_596_0, d_Dot_594_0, d_Dot_595_0, d_Dot_593_0, d_Dot_590_0, d_Dot_589_0, d_Dot_583_0, d_Dot_585_0, d_Dot_586_0, d_Dot_588_0, d_Dot_584_0, d_Dot_587_0, d_Dot_581_0, d_Dot_582_0, d_Dot_579_0, d_Dot_578_0, d_Dot_576_0, d_Dot_577_0, d_Dot_574_0, d_Dot_575_0, d_Dot_573_0, d_Dot_580_0, d_Dot_572_0, d_Dot_571_0, d_Dot_570_0, d_Dot_567_0, d_Dot_566_0, d_Dot_569_0, d_Dot_568_0, d_Dot_565_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2336
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_10_Call(dim3(5, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_231_0, d_Dot_595_0, d_Reshape_285_0, d_Reshape_683_0, d_Add_556_0, d_Dot_229_0, d_Dot_593_0, d_Reshape_281_0, d_Dot_230_0, d_Dot_594_0, d_Reshape_283_0, d_Dot_232_0, d_Dot_596_0, d_Reshape_287_0, d_Dot_591_0, d_Dot_587_0, d_Reshape_321_0, d_Reshape_677_0, d_Add_555_0, d_Dot_589_0, d_Dot_585_0, d_Reshape_317_0, d_Dot_590_0, d_Dot_586_0, d_Reshape_319_0, d_Dot_592_0, d_Dot_588_0, d_Reshape_323_0, d_Dot_583_0, d_Dot_579_0, d_Reshape_389_0, d_Reshape_671_0, d_Add_554_0, d_Dot_581_0, d_Dot_577_0, d_Reshape_385_0, d_Dot_582_0, d_Dot_578_0, d_Reshape_387_0, d_Dot_584_0, d_Dot_580_0, d_Reshape_391_0, d_Dot_575_0, d_Dot_571_0, d_Reshape_489_0, d_Reshape_665_0, d_Add_553_0, d_Dot_573_0, d_Dot_569_0, d_Reshape_485_0, d_Dot_574_0, d_Dot_570_0, d_Reshape_487_0, d_Dot_576_0, d_Dot_572_0, d_Reshape_491_0, d_Dot_567_0, d_Dot_263_0, d_Reshape_621_0, d_Reshape_659_0, d_Constant_100_0, d_Dot_565_0, d_Dot_261_0, d_Reshape_617_0, d_Dot_566_0, d_Dot_262_0, d_Reshape_619_0, d_Dot_568_0, d_Dot_264_0, d_Reshape_623_0, d_Add_706_0, d_Multiply_716_0, d_Add_705_0, d_Multiply_715_0, d_Add_704_0, d_Multiply_714_0, d_Add_703_0, d_Multiply_713_0, d_Add_702_0, d_Multiply_712_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_10
    <<<dim3(5, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_231_0, d_Dot_595_0, d_Reshape_285_0, d_Reshape_683_0, d_Add_556_0, d_Dot_229_0, d_Dot_593_0, d_Reshape_281_0, d_Dot_230_0, d_Dot_594_0, d_Reshape_283_0, d_Dot_232_0, d_Dot_596_0, d_Reshape_287_0, d_Dot_591_0, d_Dot_587_0, d_Reshape_321_0, d_Reshape_677_0, d_Add_555_0, d_Dot_589_0, d_Dot_585_0, d_Reshape_317_0, d_Dot_590_0, d_Dot_586_0, d_Reshape_319_0, d_Dot_592_0, d_Dot_588_0, d_Reshape_323_0, d_Dot_583_0, d_Dot_579_0, d_Reshape_389_0, d_Reshape_671_0, d_Add_554_0, d_Dot_581_0, d_Dot_577_0, d_Reshape_385_0, d_Dot_582_0, d_Dot_578_0, d_Reshape_387_0, d_Dot_584_0, d_Dot_580_0, d_Reshape_391_0, d_Dot_575_0, d_Dot_571_0, d_Reshape_489_0, d_Reshape_665_0, d_Add_553_0, d_Dot_573_0, d_Dot_569_0, d_Reshape_485_0, d_Dot_574_0, d_Dot_570_0, d_Reshape_487_0, d_Dot_576_0, d_Dot_572_0, d_Reshape_491_0, d_Dot_567_0, d_Dot_263_0, d_Reshape_621_0, d_Reshape_659_0, d_Constant_100_0, d_Dot_565_0, d_Dot_261_0, d_Reshape_617_0, d_Dot_566_0, d_Dot_262_0, d_Reshape_619_0, d_Dot_568_0, d_Dot_264_0, d_Reshape_623_0, d_Add_706_0, d_Multiply_716_0, d_Add_705_0, d_Multiply_715_0, d_Add_704_0, d_Multiply_714_0, d_Add_703_0, d_Multiply_713_0, d_Add_702_0, d_Multiply_712_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2337
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_11_Call(dim3(320, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_716_0, d_Constant_7_0, d_Constant_10_0, d_Constant_4_0, d_Constant_15_0, d_Constant_1_0, d_Constant_12_0, d_Constant_21_0, d_Constant_18_0, d_Multiply_715_0, d_Constant_16_0, d_Constant_33_0, d_Constant_13_0, d_Constant_30_0, d_Constant_27_0, d_Constant_24_0, d_Constant_22_0, d_Constant_19_0, d_Multiply_714_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Constant_34_0, d_Constant_31_0, d_Constant_28_0, d_Multiply_713_0, d_Constant_37_0, d_Constant_57_0, d_Constant_48_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_54_0, d_Constant_51_0, d_Multiply_712_0, d_Constant_58_0, d_Constant_52_0, d_Constant_55_0, d_Constant_63_0, d_Constant_69_0, d_Constant_49_0, d_Constant_66_0, d_Constant_60_0, d_Dot_755_0, d_Dot_756_0, d_Dot_754_0, d_Dot_750_0, d_Dot_753_0, d_Dot_749_0, d_Dot_752_0, d_Dot_751_0, d_Dot_746_0, d_Dot_744_0, d_Dot_745_0, d_Dot_743_0, d_Dot_742_0, d_Dot_741_0, d_Dot_748_0, d_Dot_747_0, d_Dot_737_0, d_Dot_736_0, d_Dot_735_0, d_Dot_734_0, d_Dot_733_0, d_Dot_740_0, d_Dot_739_0, d_Dot_738_0, d_Dot_729_0, d_Dot_728_0, d_Dot_725_0, d_Dot_732_0, d_Dot_731_0, d_Dot_730_0, d_Dot_727_0, d_Dot_726_0, d_Dot_724_0, d_Dot_722_0, d_Dot_723_0, d_Dot_718_0, d_Dot_720_0, d_Dot_721_0, d_Dot_719_0, d_Dot_717_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_11
    <<<dim3(320, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_716_0, d_Constant_7_0, d_Constant_10_0, d_Constant_4_0, d_Constant_15_0, d_Constant_1_0, d_Constant_12_0, d_Constant_21_0, d_Constant_18_0, d_Multiply_715_0, d_Constant_16_0, d_Constant_33_0, d_Constant_13_0, d_Constant_30_0, d_Constant_27_0, d_Constant_24_0, d_Constant_22_0, d_Constant_19_0, d_Multiply_714_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Constant_34_0, d_Constant_31_0, d_Constant_28_0, d_Multiply_713_0, d_Constant_37_0, d_Constant_57_0, d_Constant_48_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_54_0, d_Constant_51_0, d_Multiply_712_0, d_Constant_58_0, d_Constant_52_0, d_Constant_55_0, d_Constant_63_0, d_Constant_69_0, d_Constant_49_0, d_Constant_66_0, d_Constant_60_0, d_Dot_755_0, d_Dot_756_0, d_Dot_754_0, d_Dot_750_0, d_Dot_753_0, d_Dot_749_0, d_Dot_752_0, d_Dot_751_0, d_Dot_746_0, d_Dot_744_0, d_Dot_745_0, d_Dot_743_0, d_Dot_742_0, d_Dot_741_0, d_Dot_748_0, d_Dot_747_0, d_Dot_737_0, d_Dot_736_0, d_Dot_735_0, d_Dot_734_0, d_Dot_733_0, d_Dot_740_0, d_Dot_739_0, d_Dot_738_0, d_Dot_729_0, d_Dot_728_0, d_Dot_725_0, d_Dot_732_0, d_Dot_731_0, d_Dot_730_0, d_Dot_727_0, d_Dot_726_0, d_Dot_724_0, d_Dot_722_0, d_Dot_723_0, d_Dot_718_0, d_Dot_720_0, d_Dot_721_0, d_Dot_719_0, d_Dot_717_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2338
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_12_Call(dim3(6, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_235_0, d_Dot_755_0, d_Reshape_285_0, d_Reshape_861_0, d_Add_706_0, d_Dot_233_0, d_Dot_753_0, d_Reshape_281_0, d_Dot_234_0, d_Dot_754_0, d_Reshape_283_0, d_Dot_236_0, d_Dot_756_0, d_Reshape_287_0, d_Dot_751_0, d_Dot_747_0, d_Reshape_321_0, d_Reshape_855_0, d_Add_705_0, d_Dot_749_0, d_Dot_745_0, d_Reshape_317_0, d_Dot_750_0, d_Dot_746_0, d_Reshape_319_0, d_Dot_752_0, d_Dot_748_0, d_Reshape_323_0, d_Dot_743_0, d_Dot_739_0, d_Reshape_389_0, d_Reshape_849_0, d_Add_704_0, d_Dot_741_0, d_Dot_737_0, d_Reshape_385_0, d_Dot_742_0, d_Dot_738_0, d_Reshape_387_0, d_Dot_744_0, d_Dot_740_0, d_Reshape_391_0, d_Dot_735_0, d_Dot_731_0, d_Reshape_489_0, d_Reshape_843_0, d_Add_703_0, d_Dot_733_0, d_Dot_729_0, d_Reshape_485_0, d_Dot_734_0, d_Dot_730_0, d_Reshape_487_0, d_Dot_736_0, d_Dot_732_0, d_Reshape_491_0, d_Dot_727_0, d_Dot_723_0, d_Reshape_621_0, d_Reshape_837_0, d_Add_702_0, d_Dot_725_0, d_Dot_721_0, d_Reshape_617_0, d_Dot_726_0, d_Dot_722_0, d_Reshape_619_0, d_Dot_728_0, d_Dot_724_0, d_Reshape_623_0, d_Dot_719_0, d_Dot_267_0, d_Reshape_785_0, d_Reshape_831_0, d_Constant_100_0, d_Dot_717_0, d_Dot_265_0, d_Reshape_781_0, d_Dot_718_0, d_Dot_266_0, d_Reshape_783_0, d_Dot_720_0, d_Dot_268_0, d_Reshape_787_0, d_Add_888_0, d_Multiply_900_0, d_Add_887_0, d_Multiply_899_0, d_Add_886_0, d_Multiply_898_0, d_Add_885_0, d_Multiply_897_0, d_Add_884_0, d_Multiply_896_0, d_Add_883_0, d_Multiply_895_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_12
    <<<dim3(6, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_235_0, d_Dot_755_0, d_Reshape_285_0, d_Reshape_861_0, d_Add_706_0, d_Dot_233_0, d_Dot_753_0, d_Reshape_281_0, d_Dot_234_0, d_Dot_754_0, d_Reshape_283_0, d_Dot_236_0, d_Dot_756_0, d_Reshape_287_0, d_Dot_751_0, d_Dot_747_0, d_Reshape_321_0, d_Reshape_855_0, d_Add_705_0, d_Dot_749_0, d_Dot_745_0, d_Reshape_317_0, d_Dot_750_0, d_Dot_746_0, d_Reshape_319_0, d_Dot_752_0, d_Dot_748_0, d_Reshape_323_0, d_Dot_743_0, d_Dot_739_0, d_Reshape_389_0, d_Reshape_849_0, d_Add_704_0, d_Dot_741_0, d_Dot_737_0, d_Reshape_385_0, d_Dot_742_0, d_Dot_738_0, d_Reshape_387_0, d_Dot_744_0, d_Dot_740_0, d_Reshape_391_0, d_Dot_735_0, d_Dot_731_0, d_Reshape_489_0, d_Reshape_843_0, d_Add_703_0, d_Dot_733_0, d_Dot_729_0, d_Reshape_485_0, d_Dot_734_0, d_Dot_730_0, d_Reshape_487_0, d_Dot_736_0, d_Dot_732_0, d_Reshape_491_0, d_Dot_727_0, d_Dot_723_0, d_Reshape_621_0, d_Reshape_837_0, d_Add_702_0, d_Dot_725_0, d_Dot_721_0, d_Reshape_617_0, d_Dot_726_0, d_Dot_722_0, d_Reshape_619_0, d_Dot_728_0, d_Dot_724_0, d_Reshape_623_0, d_Dot_719_0, d_Dot_267_0, d_Reshape_785_0, d_Reshape_831_0, d_Constant_100_0, d_Dot_717_0, d_Dot_265_0, d_Reshape_781_0, d_Dot_718_0, d_Dot_266_0, d_Reshape_783_0, d_Dot_720_0, d_Dot_268_0, d_Reshape_787_0, d_Add_888_0, d_Multiply_900_0, d_Add_887_0, d_Multiply_899_0, d_Add_886_0, d_Multiply_898_0, d_Add_885_0, d_Multiply_897_0, d_Add_884_0, d_Multiply_896_0, d_Add_883_0, d_Multiply_895_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2339
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_13_Call(dim3(384, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_900_0, d_Constant_10_0, d_Constant_12_0, d_Constant_7_0, d_Constant_4_0, d_Constant_21_0, d_Constant_18_0, d_Constant_1_0, d_Constant_15_0, d_Multiply_899_0, d_Constant_16_0, d_Constant_22_0, d_Constant_13_0, d_Constant_30_0, d_Constant_27_0, d_Constant_19_0, d_Constant_33_0, d_Constant_24_0, d_Multiply_898_0, d_Constant_34_0, d_Constant_31_0, d_Constant_28_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Multiply_897_0, d_Constant_48_0, d_Constant_43_0, d_Constant_40_0, d_Constant_51_0, d_Constant_37_0, d_Constant_57_0, d_Constant_54_0, d_Constant_46_0, d_Multiply_896_0, d_Constant_58_0, d_Constant_55_0, d_Constant_52_0, d_Constant_49_0, d_Constant_69_0, d_Constant_66_0, d_Constant_63_0, d_Constant_60_0, d_Multiply_895_0, d_Constant_67_0, d_Constant_81_0, d_Constant_70_0, d_Constant_75_0, d_Constant_78_0, d_Constant_72_0, d_Constant_64_0, d_Constant_61_0, d_Dot_948_0, d_Dot_941_0, d_Dot_947_0, d_Dot_946_0, d_Dot_944_0, d_Dot_943_0, d_Dot_945_0, d_Dot_942_0, d_Dot_938_0, d_Dot_940_0, d_Dot_937_0, d_Dot_935_0, d_Dot_934_0, d_Dot_939_0, d_Dot_936_0, d_Dot_933_0, d_Dot_932_0, d_Dot_931_0, d_Dot_930_0, d_Dot_929_0, d_Dot_928_0, d_Dot_927_0, d_Dot_926_0, d_Dot_925_0, d_Dot_917_0, d_Dot_923_0, d_Dot_922_0, d_Dot_918_0, d_Dot_921_0, d_Dot_920_0, d_Dot_919_0, d_Dot_924_0, d_Dot_916_0, d_Dot_915_0, d_Dot_914_0, d_Dot_913_0, d_Dot_912_0, d_Dot_911_0, d_Dot_910_0, d_Dot_909_0, d_Dot_907_0, d_Dot_904_0, d_Dot_908_0, d_Dot_902_0, d_Dot_903_0, d_Dot_901_0, d_Dot_906_0, d_Dot_905_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_13
    <<<dim3(384, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_900_0, d_Constant_10_0, d_Constant_12_0, d_Constant_7_0, d_Constant_4_0, d_Constant_21_0, d_Constant_18_0, d_Constant_1_0, d_Constant_15_0, d_Multiply_899_0, d_Constant_16_0, d_Constant_22_0, d_Constant_13_0, d_Constant_30_0, d_Constant_27_0, d_Constant_19_0, d_Constant_33_0, d_Constant_24_0, d_Multiply_898_0, d_Constant_34_0, d_Constant_31_0, d_Constant_28_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Multiply_897_0, d_Constant_48_0, d_Constant_43_0, d_Constant_40_0, d_Constant_51_0, d_Constant_37_0, d_Constant_57_0, d_Constant_54_0, d_Constant_46_0, d_Multiply_896_0, d_Constant_58_0, d_Constant_55_0, d_Constant_52_0, d_Constant_49_0, d_Constant_69_0, d_Constant_66_0, d_Constant_63_0, d_Constant_60_0, d_Multiply_895_0, d_Constant_67_0, d_Constant_81_0, d_Constant_70_0, d_Constant_75_0, d_Constant_78_0, d_Constant_72_0, d_Constant_64_0, d_Constant_61_0, d_Dot_948_0, d_Dot_941_0, d_Dot_947_0, d_Dot_946_0, d_Dot_944_0, d_Dot_943_0, d_Dot_945_0, d_Dot_942_0, d_Dot_938_0, d_Dot_940_0, d_Dot_937_0, d_Dot_935_0, d_Dot_934_0, d_Dot_939_0, d_Dot_936_0, d_Dot_933_0, d_Dot_932_0, d_Dot_931_0, d_Dot_930_0, d_Dot_929_0, d_Dot_928_0, d_Dot_927_0, d_Dot_926_0, d_Dot_925_0, d_Dot_917_0, d_Dot_923_0, d_Dot_922_0, d_Dot_918_0, d_Dot_921_0, d_Dot_920_0, d_Dot_919_0, d_Dot_924_0, d_Dot_916_0, d_Dot_915_0, d_Dot_914_0, d_Dot_913_0, d_Dot_912_0, d_Dot_911_0, d_Dot_910_0, d_Dot_909_0, d_Dot_907_0, d_Dot_904_0, d_Dot_908_0, d_Dot_902_0, d_Dot_903_0, d_Dot_901_0, d_Dot_906_0, d_Dot_905_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2340
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_14_Call(dim3(7, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_239_0, d_Dot_947_0, d_Reshape_285_0, d_Reshape_1071_0, d_Add_888_0, d_Dot_237_0, d_Dot_945_0, d_Reshape_281_0, d_Dot_238_0, d_Dot_946_0, d_Reshape_283_0, d_Dot_240_0, d_Dot_948_0, d_Reshape_287_0, d_Dot_943_0, d_Dot_939_0, d_Reshape_321_0, d_Reshape_1065_0, d_Add_887_0, d_Dot_941_0, d_Dot_937_0, d_Reshape_317_0, d_Dot_942_0, d_Dot_938_0, d_Reshape_319_0, d_Dot_944_0, d_Dot_940_0, d_Reshape_323_0, d_Dot_935_0, d_Dot_931_0, d_Reshape_389_0, d_Reshape_1059_0, d_Add_886_0, d_Dot_933_0, d_Dot_929_0, d_Reshape_385_0, d_Dot_934_0, d_Dot_930_0, d_Reshape_387_0, d_Dot_936_0, d_Dot_932_0, d_Reshape_391_0, d_Dot_927_0, d_Dot_923_0, d_Reshape_489_0, d_Reshape_1053_0, d_Add_885_0, d_Dot_925_0, d_Dot_921_0, d_Reshape_485_0, d_Dot_926_0, d_Dot_922_0, d_Reshape_487_0, d_Dot_928_0, d_Dot_924_0, d_Reshape_491_0, d_Dot_919_0, d_Dot_915_0, d_Reshape_621_0, d_Reshape_1047_0, d_Add_884_0, d_Dot_917_0, d_Dot_913_0, d_Reshape_617_0, d_Dot_918_0, d_Dot_914_0, d_Reshape_619_0, d_Dot_920_0, d_Dot_916_0, d_Reshape_623_0, d_Dot_903_0, d_Dot_271_0, d_Reshape_981_0, d_Reshape_1035_0, d_Constant_100_0, d_Dot_901_0, d_Dot_269_0, d_Reshape_977_0, d_Dot_902_0, d_Dot_270_0, d_Reshape_979_0, d_Dot_904_0, d_Dot_272_0, d_Reshape_983_0, d_Dot_911_0, d_Dot_907_0, d_Reshape_785_0, d_Reshape_1041_0, d_Add_883_0, d_Dot_909_0, d_Dot_905_0, d_Reshape_781_0, d_Dot_910_0, d_Dot_906_0, d_Reshape_783_0, d_Dot_912_0, d_Dot_908_0, d_Reshape_787_0, d_Add_1102_0, d_Multiply_1116_0, d_Add_1101_0, d_Multiply_1115_0, d_Add_1100_0, d_Multiply_1114_0, d_Add_1099_0, d_Multiply_1113_0, d_Add_1098_0, d_Multiply_1112_0, d_Add_1096_0, d_Multiply_1110_0, d_Add_1097_0, d_Multiply_1111_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_14
    <<<dim3(7, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_239_0, d_Dot_947_0, d_Reshape_285_0, d_Reshape_1071_0, d_Add_888_0, d_Dot_237_0, d_Dot_945_0, d_Reshape_281_0, d_Dot_238_0, d_Dot_946_0, d_Reshape_283_0, d_Dot_240_0, d_Dot_948_0, d_Reshape_287_0, d_Dot_943_0, d_Dot_939_0, d_Reshape_321_0, d_Reshape_1065_0, d_Add_887_0, d_Dot_941_0, d_Dot_937_0, d_Reshape_317_0, d_Dot_942_0, d_Dot_938_0, d_Reshape_319_0, d_Dot_944_0, d_Dot_940_0, d_Reshape_323_0, d_Dot_935_0, d_Dot_931_0, d_Reshape_389_0, d_Reshape_1059_0, d_Add_886_0, d_Dot_933_0, d_Dot_929_0, d_Reshape_385_0, d_Dot_934_0, d_Dot_930_0, d_Reshape_387_0, d_Dot_936_0, d_Dot_932_0, d_Reshape_391_0, d_Dot_927_0, d_Dot_923_0, d_Reshape_489_0, d_Reshape_1053_0, d_Add_885_0, d_Dot_925_0, d_Dot_921_0, d_Reshape_485_0, d_Dot_926_0, d_Dot_922_0, d_Reshape_487_0, d_Dot_928_0, d_Dot_924_0, d_Reshape_491_0, d_Dot_919_0, d_Dot_915_0, d_Reshape_621_0, d_Reshape_1047_0, d_Add_884_0, d_Dot_917_0, d_Dot_913_0, d_Reshape_617_0, d_Dot_918_0, d_Dot_914_0, d_Reshape_619_0, d_Dot_920_0, d_Dot_916_0, d_Reshape_623_0, d_Dot_903_0, d_Dot_271_0, d_Reshape_981_0, d_Reshape_1035_0, d_Constant_100_0, d_Dot_901_0, d_Dot_269_0, d_Reshape_977_0, d_Dot_902_0, d_Dot_270_0, d_Reshape_979_0, d_Dot_904_0, d_Dot_272_0, d_Reshape_983_0, d_Dot_911_0, d_Dot_907_0, d_Reshape_785_0, d_Reshape_1041_0, d_Add_883_0, d_Dot_909_0, d_Dot_905_0, d_Reshape_781_0, d_Dot_910_0, d_Dot_906_0, d_Reshape_783_0, d_Dot_912_0, d_Dot_908_0, d_Reshape_787_0, d_Add_1102_0, d_Multiply_1116_0, d_Add_1101_0, d_Multiply_1115_0, d_Add_1100_0, d_Multiply_1114_0, d_Add_1099_0, d_Multiply_1113_0, d_Add_1098_0, d_Multiply_1112_0, d_Add_1096_0, d_Multiply_1110_0, d_Add_1097_0, d_Multiply_1111_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2341
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_15_Call(dim3(448, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_1116_0, d_Constant_12_0, d_Constant_10_0, d_Constant_18_0, d_Constant_4_0, d_Constant_7_0, d_Constant_21_0, d_Constant_15_0, d_Constant_1_0, d_Multiply_1115_0, d_Constant_19_0, d_Constant_13_0, d_Constant_33_0, d_Constant_30_0, d_Constant_22_0, d_Constant_16_0, d_Constant_27_0, d_Constant_24_0, d_Multiply_1114_0, d_Constant_36_0, d_Constant_28_0, d_Constant_25_0, d_Constant_42_0, d_Constant_45_0, d_Constant_39_0, d_Constant_34_0, d_Constant_31_0, d_Multiply_1113_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_37_0, d_Constant_54_0, d_Constant_57_0, d_Constant_51_0, d_Constant_48_0, d_Multiply_1112_0, d_Constant_66_0, d_Constant_49_0, d_Constant_55_0, d_Constant_58_0, d_Constant_52_0, d_Constant_69_0, d_Constant_63_0, d_Constant_60_0, d_Multiply_1110_0, d_Constant_82_0, d_Constant_79_0, d_Constant_73_0, d_Constant_76_0, d_Constant_84_0, d_Constant_93_0, d_Constant_90_0, d_Constant_87_0, d_Multiply_1111_0, d_Constant_67_0, d_Constant_64_0, d_Constant_81_0, d_Constant_61_0, d_Constant_75_0, d_Constant_78_0, d_Constant_72_0, d_Constant_70_0, d_Dot_1165_0, d_Dot_1172_0, d_Dot_1167_0, d_Dot_1170_0, d_Dot_1171_0, d_Dot_1168_0, d_Dot_1166_0, d_Dot_1169_0, d_Dot_1163_0, d_Dot_1161_0, d_Dot_1160_0, d_Dot_1159_0, d_Dot_1164_0, d_Dot_1162_0, d_Dot_1158_0, d_Dot_1157_0, d_Dot_1149_0, d_Dot_1154_0, d_Dot_1153_0, d_Dot_1151_0, d_Dot_1152_0, d_Dot_1150_0, d_Dot_1156_0, d_Dot_1155_0, d_Dot_1148_0, d_Dot_1147_0, d_Dot_1146_0, d_Dot_1145_0, d_Dot_1143_0, d_Dot_1144_0, d_Dot_1142_0, d_Dot_1141_0, d_Dot_1135_0, d_Dot_1137_0, d_Dot_1139_0, d_Dot_1140_0, d_Dot_1138_0, d_Dot_1136_0, d_Dot_1134_0, d_Dot_1133_0, d_Dot_1124_0, d_Dot_1123_0, d_Dot_1121_0, d_Dot_1122_0, d_Dot_1117_0, d_Dot_1120_0, d_Dot_1119_0, d_Dot_1118_0, d_Dot_1131_0, d_Dot_1130_0, d_Dot_1128_0, d_Dot_1129_0, d_Dot_1126_0, d_Dot_1127_0, d_Dot_1125_0, d_Dot_1132_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_15
    <<<dim3(448, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_1116_0, d_Constant_12_0, d_Constant_10_0, d_Constant_18_0, d_Constant_4_0, d_Constant_7_0, d_Constant_21_0, d_Constant_15_0, d_Constant_1_0, d_Multiply_1115_0, d_Constant_19_0, d_Constant_13_0, d_Constant_33_0, d_Constant_30_0, d_Constant_22_0, d_Constant_16_0, d_Constant_27_0, d_Constant_24_0, d_Multiply_1114_0, d_Constant_36_0, d_Constant_28_0, d_Constant_25_0, d_Constant_42_0, d_Constant_45_0, d_Constant_39_0, d_Constant_34_0, d_Constant_31_0, d_Multiply_1113_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_37_0, d_Constant_54_0, d_Constant_57_0, d_Constant_51_0, d_Constant_48_0, d_Multiply_1112_0, d_Constant_66_0, d_Constant_49_0, d_Constant_55_0, d_Constant_58_0, d_Constant_52_0, d_Constant_69_0, d_Constant_63_0, d_Constant_60_0, d_Multiply_1110_0, d_Constant_82_0, d_Constant_79_0, d_Constant_73_0, d_Constant_76_0, d_Constant_84_0, d_Constant_93_0, d_Constant_90_0, d_Constant_87_0, d_Multiply_1111_0, d_Constant_67_0, d_Constant_64_0, d_Constant_81_0, d_Constant_61_0, d_Constant_75_0, d_Constant_78_0, d_Constant_72_0, d_Constant_70_0, d_Dot_1165_0, d_Dot_1172_0, d_Dot_1167_0, d_Dot_1170_0, d_Dot_1171_0, d_Dot_1168_0, d_Dot_1166_0, d_Dot_1169_0, d_Dot_1163_0, d_Dot_1161_0, d_Dot_1160_0, d_Dot_1159_0, d_Dot_1164_0, d_Dot_1162_0, d_Dot_1158_0, d_Dot_1157_0, d_Dot_1149_0, d_Dot_1154_0, d_Dot_1153_0, d_Dot_1151_0, d_Dot_1152_0, d_Dot_1150_0, d_Dot_1156_0, d_Dot_1155_0, d_Dot_1148_0, d_Dot_1147_0, d_Dot_1146_0, d_Dot_1145_0, d_Dot_1143_0, d_Dot_1144_0, d_Dot_1142_0, d_Dot_1141_0, d_Dot_1135_0, d_Dot_1137_0, d_Dot_1139_0, d_Dot_1140_0, d_Dot_1138_0, d_Dot_1136_0, d_Dot_1134_0, d_Dot_1133_0, d_Dot_1124_0, d_Dot_1123_0, d_Dot_1121_0, d_Dot_1122_0, d_Dot_1117_0, d_Dot_1120_0, d_Dot_1119_0, d_Dot_1118_0, d_Dot_1131_0, d_Dot_1130_0, d_Dot_1128_0, d_Dot_1129_0, d_Dot_1126_0, d_Dot_1127_0, d_Dot_1125_0, d_Dot_1132_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2342
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_16_Call(dim3(8, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_243_0, d_Dot_1171_0, d_Reshape_285_0, d_Reshape_1313_0, d_Add_1102_0, d_Dot_241_0, d_Dot_1169_0, d_Reshape_281_0, d_Dot_242_0, d_Dot_1170_0, d_Reshape_283_0, d_Dot_244_0, d_Dot_1172_0, d_Reshape_287_0, d_Dot_1167_0, d_Dot_1163_0, d_Reshape_321_0, d_Reshape_1307_0, d_Add_1101_0, d_Dot_1165_0, d_Dot_1161_0, d_Reshape_317_0, d_Dot_1166_0, d_Dot_1162_0, d_Reshape_319_0, d_Dot_1168_0, d_Dot_1164_0, d_Reshape_323_0, d_Dot_1159_0, d_Dot_1155_0, d_Reshape_389_0, d_Reshape_1301_0, d_Add_1100_0, d_Dot_1157_0, d_Dot_1153_0, d_Reshape_385_0, d_Dot_1158_0, d_Dot_1154_0, d_Reshape_387_0, d_Dot_1160_0, d_Dot_1156_0, d_Reshape_391_0, d_Dot_1151_0, d_Dot_1147_0, d_Reshape_489_0, d_Reshape_1295_0, d_Add_1099_0, d_Dot_1149_0, d_Dot_1145_0, d_Reshape_485_0, d_Dot_1150_0, d_Dot_1146_0, d_Reshape_487_0, d_Dot_1152_0, d_Dot_1148_0, d_Reshape_491_0, d_Dot_1143_0, d_Dot_1139_0, d_Reshape_621_0, d_Reshape_1289_0, d_Add_1098_0, d_Dot_1141_0, d_Dot_1137_0, d_Reshape_617_0, d_Dot_1142_0, d_Dot_1138_0, d_Reshape_619_0, d_Dot_1144_0, d_Dot_1140_0, d_Reshape_623_0, d_Constant_100_0, d_Dot_1119_0, d_Dot_275_0, d_Reshape_1209_0, d_Reshape_1271_0, d_Dot_1117_0, d_Dot_273_0, d_Reshape_1205_0, d_Dot_1118_0, d_Dot_274_0, d_Reshape_1207_0, d_Dot_1120_0, d_Dot_276_0, d_Reshape_1211_0, d_Dot_1127_0, d_Dot_1123_0, d_Reshape_981_0, d_Reshape_1277_0, d_Add_1096_0, d_Dot_1125_0, d_Dot_1121_0, d_Reshape_977_0, d_Dot_1126_0, d_Dot_1122_0, d_Reshape_979_0, d_Dot_1128_0, d_Dot_1124_0, d_Reshape_983_0, d_Dot_1135_0, d_Dot_1131_0, d_Reshape_785_0, d_Reshape_1283_0, d_Add_1097_0, d_Dot_1133_0, d_Dot_1129_0, d_Reshape_781_0, d_Dot_1134_0, d_Dot_1130_0, d_Reshape_783_0, d_Dot_1136_0, d_Dot_1132_0, d_Reshape_787_0, d_Multiply_1364_0, d_Add_1347_0, d_Multiply_1363_0, d_Add_1346_0, d_Multiply_1362_0, d_Add_1345_0, d_Multiply_1361_0, d_Add_1344_0, d_Multiply_1360_0, d_Add_1341_0, d_Multiply_1357_0, d_Add_1342_0, d_Multiply_1358_0, d_Add_1343_0, d_Multiply_1359_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_16
    <<<dim3(8, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_243_0, d_Dot_1171_0, d_Reshape_285_0, d_Reshape_1313_0, d_Add_1102_0, d_Dot_241_0, d_Dot_1169_0, d_Reshape_281_0, d_Dot_242_0, d_Dot_1170_0, d_Reshape_283_0, d_Dot_244_0, d_Dot_1172_0, d_Reshape_287_0, d_Dot_1167_0, d_Dot_1163_0, d_Reshape_321_0, d_Reshape_1307_0, d_Add_1101_0, d_Dot_1165_0, d_Dot_1161_0, d_Reshape_317_0, d_Dot_1166_0, d_Dot_1162_0, d_Reshape_319_0, d_Dot_1168_0, d_Dot_1164_0, d_Reshape_323_0, d_Dot_1159_0, d_Dot_1155_0, d_Reshape_389_0, d_Reshape_1301_0, d_Add_1100_0, d_Dot_1157_0, d_Dot_1153_0, d_Reshape_385_0, d_Dot_1158_0, d_Dot_1154_0, d_Reshape_387_0, d_Dot_1160_0, d_Dot_1156_0, d_Reshape_391_0, d_Dot_1151_0, d_Dot_1147_0, d_Reshape_489_0, d_Reshape_1295_0, d_Add_1099_0, d_Dot_1149_0, d_Dot_1145_0, d_Reshape_485_0, d_Dot_1150_0, d_Dot_1146_0, d_Reshape_487_0, d_Dot_1152_0, d_Dot_1148_0, d_Reshape_491_0, d_Dot_1143_0, d_Dot_1139_0, d_Reshape_621_0, d_Reshape_1289_0, d_Add_1098_0, d_Dot_1141_0, d_Dot_1137_0, d_Reshape_617_0, d_Dot_1142_0, d_Dot_1138_0, d_Reshape_619_0, d_Dot_1144_0, d_Dot_1140_0, d_Reshape_623_0, d_Constant_100_0, d_Dot_1119_0, d_Dot_275_0, d_Reshape_1209_0, d_Reshape_1271_0, d_Dot_1117_0, d_Dot_273_0, d_Reshape_1205_0, d_Dot_1118_0, d_Dot_274_0, d_Reshape_1207_0, d_Dot_1120_0, d_Dot_276_0, d_Reshape_1211_0, d_Dot_1127_0, d_Dot_1123_0, d_Reshape_981_0, d_Reshape_1277_0, d_Add_1096_0, d_Dot_1125_0, d_Dot_1121_0, d_Reshape_977_0, d_Dot_1126_0, d_Dot_1122_0, d_Reshape_979_0, d_Dot_1128_0, d_Dot_1124_0, d_Reshape_983_0, d_Dot_1135_0, d_Dot_1131_0, d_Reshape_785_0, d_Reshape_1283_0, d_Add_1097_0, d_Dot_1133_0, d_Dot_1129_0, d_Reshape_781_0, d_Dot_1134_0, d_Dot_1130_0, d_Reshape_783_0, d_Dot_1136_0, d_Dot_1132_0, d_Reshape_787_0, d_Multiply_1364_0, d_Add_1347_0, d_Multiply_1363_0, d_Add_1346_0, d_Multiply_1362_0, d_Add_1345_0, d_Multiply_1361_0, d_Add_1344_0, d_Multiply_1360_0, d_Add_1341_0, d_Multiply_1357_0, d_Add_1342_0, d_Multiply_1358_0, d_Add_1343_0, d_Multiply_1359_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2343
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_17_Call(dim3(448, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_1364_0, d_Constant_21_0, d_Constant_18_0, d_Constant_15_0, d_Constant_12_0, d_Multiply_1363_0, d_Constant_22_0, d_Constant_19_0, d_Constant_16_0, d_Constant_13_0, d_Constant_33_0, d_Constant_30_0, d_Constant_27_0, d_Constant_24_0, d_Multiply_1362_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Constant_31_0, d_Constant_28_0, d_Constant_34_0, d_Multiply_1361_0, d_Constant_54_0, d_Constant_51_0, d_Constant_40_0, d_Constant_37_0, d_Constant_57_0, d_Constant_48_0, d_Constant_46_0, d_Constant_43_0, d_Multiply_1360_0, d_Constant_63_0, d_Constant_60_0, d_Constant_58_0, d_Constant_55_0, d_Constant_52_0, d_Constant_49_0, d_Constant_69_0, d_Constant_66_0, d_Multiply_1357_0, d_Constant_88_0, d_Constant_85_0, d_Constant_94_0, d_Constant_91_0, d_Multiply_1358_0, d_Constant_84_0, d_Constant_82_0, d_Constant_79_0, d_Constant_76_0, d_Constant_73_0, d_Constant_93_0, d_Constant_90_0, d_Constant_87_0, d_Multiply_1359_0, d_Constant_78_0, d_Constant_75_0, d_Constant_72_0, d_Constant_81_0, d_Constant_67_0, d_Constant_64_0, d_Constant_61_0, d_Constant_70_0, d_Dot_1420_0, d_Dot_1419_0, d_Dot_1418_0, d_Dot_1417_0, d_Dot_1416_0, d_Dot_1415_0, d_Dot_1414_0, d_Dot_1413_0, d_Dot_1412_0, d_Dot_1411_0, d_Dot_1410_0, d_Dot_1409_0, d_Dot_1405_0, d_Dot_1404_0, d_Dot_1403_0, d_Dot_1402_0, d_Dot_1401_0, d_Dot_1407_0, d_Dot_1406_0, d_Dot_1408_0, d_Dot_1395_0, d_Dot_1394_0, d_Dot_1398_0, d_Dot_1397_0, d_Dot_1396_0, d_Dot_1393_0, d_Dot_1400_0, d_Dot_1399_0, d_Dot_1386_0, d_Dot_1385_0, d_Dot_1392_0, d_Dot_1391_0, d_Dot_1390_0, d_Dot_1389_0, d_Dot_1388_0, d_Dot_1387_0, d_Dot_1366_0, d_Dot_1365_0, d_Dot_1368_0, d_Dot_1367_0, d_Dot_1369_0, d_Dot_1376_0, d_Dot_1375_0, d_Dot_1374_0, d_Dot_1373_0, d_Dot_1372_0, d_Dot_1371_0, d_Dot_1370_0, d_Dot_1379_0, d_Dot_1378_0, d_Dot_1377_0, d_Dot_1380_0, d_Dot_1383_0, d_Dot_1382_0, d_Dot_1381_0, d_Dot_1384_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_17
    <<<dim3(448, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_1364_0, d_Constant_21_0, d_Constant_18_0, d_Constant_15_0, d_Constant_12_0, d_Multiply_1363_0, d_Constant_22_0, d_Constant_19_0, d_Constant_16_0, d_Constant_13_0, d_Constant_33_0, d_Constant_30_0, d_Constant_27_0, d_Constant_24_0, d_Multiply_1362_0, d_Constant_25_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Constant_31_0, d_Constant_28_0, d_Constant_34_0, d_Multiply_1361_0, d_Constant_54_0, d_Constant_51_0, d_Constant_40_0, d_Constant_37_0, d_Constant_57_0, d_Constant_48_0, d_Constant_46_0, d_Constant_43_0, d_Multiply_1360_0, d_Constant_63_0, d_Constant_60_0, d_Constant_58_0, d_Constant_55_0, d_Constant_52_0, d_Constant_49_0, d_Constant_69_0, d_Constant_66_0, d_Multiply_1357_0, d_Constant_88_0, d_Constant_85_0, d_Constant_94_0, d_Constant_91_0, d_Multiply_1358_0, d_Constant_84_0, d_Constant_82_0, d_Constant_79_0, d_Constant_76_0, d_Constant_73_0, d_Constant_93_0, d_Constant_90_0, d_Constant_87_0, d_Multiply_1359_0, d_Constant_78_0, d_Constant_75_0, d_Constant_72_0, d_Constant_81_0, d_Constant_67_0, d_Constant_64_0, d_Constant_61_0, d_Constant_70_0, d_Dot_1420_0, d_Dot_1419_0, d_Dot_1418_0, d_Dot_1417_0, d_Dot_1416_0, d_Dot_1415_0, d_Dot_1414_0, d_Dot_1413_0, d_Dot_1412_0, d_Dot_1411_0, d_Dot_1410_0, d_Dot_1409_0, d_Dot_1405_0, d_Dot_1404_0, d_Dot_1403_0, d_Dot_1402_0, d_Dot_1401_0, d_Dot_1407_0, d_Dot_1406_0, d_Dot_1408_0, d_Dot_1395_0, d_Dot_1394_0, d_Dot_1398_0, d_Dot_1397_0, d_Dot_1396_0, d_Dot_1393_0, d_Dot_1400_0, d_Dot_1399_0, d_Dot_1386_0, d_Dot_1385_0, d_Dot_1392_0, d_Dot_1391_0, d_Dot_1390_0, d_Dot_1389_0, d_Dot_1388_0, d_Dot_1387_0, d_Dot_1366_0, d_Dot_1365_0, d_Dot_1368_0, d_Dot_1367_0, d_Dot_1369_0, d_Dot_1376_0, d_Dot_1375_0, d_Dot_1374_0, d_Dot_1373_0, d_Dot_1372_0, d_Dot_1371_0, d_Dot_1370_0, d_Dot_1379_0, d_Dot_1378_0, d_Dot_1377_0, d_Dot_1380_0, d_Dot_1383_0, d_Dot_1382_0, d_Dot_1381_0, d_Dot_1384_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2344
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_18_Call(dim3(7, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_1419_0, d_Dot_1415_0, d_Reshape_321_0, d_Reshape_1543_0, d_Add_1347_0, d_Dot_1417_0, d_Dot_1413_0, d_Reshape_317_0, d_Dot_1418_0, d_Dot_1414_0, d_Reshape_319_0, d_Dot_1420_0, d_Dot_1416_0, d_Reshape_323_0, d_Dot_1411_0, d_Dot_1407_0, d_Reshape_389_0, d_Reshape_1537_0, d_Add_1346_0, d_Dot_1409_0, d_Dot_1405_0, d_Reshape_385_0, d_Dot_1410_0, d_Dot_1406_0, d_Reshape_387_0, d_Dot_1412_0, d_Dot_1408_0, d_Reshape_391_0, d_Dot_1403_0, d_Dot_1399_0, d_Reshape_489_0, d_Reshape_1531_0, d_Add_1345_0, d_Dot_1401_0, d_Dot_1397_0, d_Reshape_485_0, d_Dot_1402_0, d_Dot_1398_0, d_Reshape_487_0, d_Dot_1404_0, d_Dot_1400_0, d_Reshape_491_0, d_Dot_1395_0, d_Dot_1391_0, d_Reshape_621_0, d_Reshape_1525_0, d_Add_1344_0, d_Dot_1393_0, d_Dot_1389_0, d_Reshape_617_0, d_Dot_1394_0, d_Dot_1390_0, d_Reshape_619_0, d_Dot_1396_0, d_Dot_1392_0, d_Reshape_623_0, d_Dot_1371_0, d_Dot_1367_0, d_Reshape_1209_0, d_Reshape_1507_0, d_Add_1341_0, d_Dot_1369_0, d_Dot_1365_0, d_Reshape_1205_0, d_Dot_1370_0, d_Dot_1366_0, d_Reshape_1207_0, d_Dot_1368_0, d_Dot_1372_0, d_Reshape_1211_0, d_Dot_1379_0, d_Dot_1375_0, d_Reshape_981_0, d_Reshape_1513_0, d_Add_1342_0, d_Dot_1377_0, d_Dot_1373_0, d_Reshape_977_0, d_Dot_1378_0, d_Dot_1374_0, d_Reshape_979_0, d_Dot_1380_0, d_Dot_1376_0, d_Reshape_983_0, d_Dot_1387_0, d_Dot_1383_0, d_Reshape_785_0, d_Reshape_1519_0, d_Add_1343_0, d_Dot_1385_0, d_Dot_1381_0, d_Reshape_781_0, d_Dot_1386_0, d_Dot_1382_0, d_Reshape_783_0, d_Dot_1388_0, d_Dot_1384_0, d_Reshape_787_0, d_Multiply_1588_0, d_Add_1573_0, d_Multiply_1587_0, d_Add_1572_0, d_Multiply_1586_0, d_Add_1571_0, d_Multiply_1585_0, d_Add_1568_0, d_Multiply_1582_0, d_Add_1569_0, d_Multiply_1583_0, d_Add_1570_0, d_Multiply_1584_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_18
    <<<dim3(7, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_1419_0, d_Dot_1415_0, d_Reshape_321_0, d_Reshape_1543_0, d_Add_1347_0, d_Dot_1417_0, d_Dot_1413_0, d_Reshape_317_0, d_Dot_1418_0, d_Dot_1414_0, d_Reshape_319_0, d_Dot_1420_0, d_Dot_1416_0, d_Reshape_323_0, d_Dot_1411_0, d_Dot_1407_0, d_Reshape_389_0, d_Reshape_1537_0, d_Add_1346_0, d_Dot_1409_0, d_Dot_1405_0, d_Reshape_385_0, d_Dot_1410_0, d_Dot_1406_0, d_Reshape_387_0, d_Dot_1412_0, d_Dot_1408_0, d_Reshape_391_0, d_Dot_1403_0, d_Dot_1399_0, d_Reshape_489_0, d_Reshape_1531_0, d_Add_1345_0, d_Dot_1401_0, d_Dot_1397_0, d_Reshape_485_0, d_Dot_1402_0, d_Dot_1398_0, d_Reshape_487_0, d_Dot_1404_0, d_Dot_1400_0, d_Reshape_491_0, d_Dot_1395_0, d_Dot_1391_0, d_Reshape_621_0, d_Reshape_1525_0, d_Add_1344_0, d_Dot_1393_0, d_Dot_1389_0, d_Reshape_617_0, d_Dot_1394_0, d_Dot_1390_0, d_Reshape_619_0, d_Dot_1396_0, d_Dot_1392_0, d_Reshape_623_0, d_Dot_1371_0, d_Dot_1367_0, d_Reshape_1209_0, d_Reshape_1507_0, d_Add_1341_0, d_Dot_1369_0, d_Dot_1365_0, d_Reshape_1205_0, d_Dot_1370_0, d_Dot_1366_0, d_Reshape_1207_0, d_Dot_1368_0, d_Dot_1372_0, d_Reshape_1211_0, d_Dot_1379_0, d_Dot_1375_0, d_Reshape_981_0, d_Reshape_1513_0, d_Add_1342_0, d_Dot_1377_0, d_Dot_1373_0, d_Reshape_977_0, d_Dot_1378_0, d_Dot_1374_0, d_Reshape_979_0, d_Dot_1380_0, d_Dot_1376_0, d_Reshape_983_0, d_Dot_1387_0, d_Dot_1383_0, d_Reshape_785_0, d_Reshape_1519_0, d_Add_1343_0, d_Dot_1385_0, d_Dot_1381_0, d_Reshape_781_0, d_Dot_1386_0, d_Dot_1382_0, d_Reshape_783_0, d_Dot_1388_0, d_Dot_1384_0, d_Reshape_787_0, d_Multiply_1588_0, d_Add_1573_0, d_Multiply_1587_0, d_Add_1572_0, d_Multiply_1586_0, d_Add_1571_0, d_Multiply_1585_0, d_Add_1568_0, d_Multiply_1582_0, d_Add_1569_0, d_Multiply_1583_0, d_Add_1570_0, d_Multiply_1584_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2345
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_19_Call(dim3(384, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_1588_0, d_Constant_24_0, d_Constant_30_0, d_Constant_33_0, d_Constant_27_0, d_Multiply_1587_0, d_Constant_42_0, d_Constant_39_0, d_Constant_34_0, d_Constant_31_0, d_Constant_25_0, d_Constant_36_0, d_Constant_28_0, d_Constant_45_0, d_Multiply_1586_0, d_Constant_57_0, d_Constant_54_0, d_Constant_43_0, d_Constant_51_0, d_Constant_40_0, d_Constant_37_0, d_Constant_48_0, d_Constant_46_0, d_Multiply_1585_0, d_Constant_55_0, d_Constant_52_0, d_Constant_49_0, d_Constant_60_0, d_Constant_69_0, d_Constant_66_0, d_Constant_58_0, d_Constant_63_0, d_Multiply_1582_0, d_Constant_88_0, d_Constant_94_0, d_Constant_91_0, d_Constant_85_0, d_Multiply_1583_0, d_Constant_93_0, d_Constant_90_0, d_Constant_79_0, d_Constant_76_0, d_Constant_87_0, d_Constant_73_0, d_Constant_84_0, d_Constant_82_0, d_Multiply_1584_0, d_Constant_70_0, d_Constant_72_0, d_Constant_81_0, d_Constant_78_0, d_Constant_75_0, d_Constant_67_0, d_Constant_64_0, d_Constant_61_0, d_Dot_1633_0, d_Dot_1635_0, d_Dot_1636_0, d_Dot_1634_0, d_Dot_1627_0, d_Dot_1626_0, d_Dot_1632_0, d_Dot_1631_0, d_Dot_1629_0, d_Dot_1625_0, d_Dot_1630_0, d_Dot_1628_0, d_Dot_1620_0, d_Dot_1619_0, d_Dot_1623_0, d_Dot_1618_0, d_Dot_1622_0, d_Dot_1621_0, d_Dot_1617_0, d_Dot_1624_0, d_Dot_1615_0, d_Dot_1614_0, d_Dot_1613_0, d_Dot_1609_0, d_Dot_1612_0, d_Dot_1611_0, d_Dot_1616_0, d_Dot_1610_0, d_Dot_1590_0, d_Dot_1592_0, d_Dot_1591_0, d_Dot_1589_0, d_Dot_1596_0, d_Dot_1595_0, d_Dot_1599_0, d_Dot_1598_0, d_Dot_1594_0, d_Dot_1597_0, d_Dot_1593_0, d_Dot_1600_0, d_Dot_1608_0, d_Dot_1601_0, d_Dot_1604_0, d_Dot_1603_0, d_Dot_1602_0, d_Dot_1607_0, d_Dot_1606_0, d_Dot_1605_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_19
    <<<dim3(384, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_1588_0, d_Constant_24_0, d_Constant_30_0, d_Constant_33_0, d_Constant_27_0, d_Multiply_1587_0, d_Constant_42_0, d_Constant_39_0, d_Constant_34_0, d_Constant_31_0, d_Constant_25_0, d_Constant_36_0, d_Constant_28_0, d_Constant_45_0, d_Multiply_1586_0, d_Constant_57_0, d_Constant_54_0, d_Constant_43_0, d_Constant_51_0, d_Constant_40_0, d_Constant_37_0, d_Constant_48_0, d_Constant_46_0, d_Multiply_1585_0, d_Constant_55_0, d_Constant_52_0, d_Constant_49_0, d_Constant_60_0, d_Constant_69_0, d_Constant_66_0, d_Constant_58_0, d_Constant_63_0, d_Multiply_1582_0, d_Constant_88_0, d_Constant_94_0, d_Constant_91_0, d_Constant_85_0, d_Multiply_1583_0, d_Constant_93_0, d_Constant_90_0, d_Constant_79_0, d_Constant_76_0, d_Constant_87_0, d_Constant_73_0, d_Constant_84_0, d_Constant_82_0, d_Multiply_1584_0, d_Constant_70_0, d_Constant_72_0, d_Constant_81_0, d_Constant_78_0, d_Constant_75_0, d_Constant_67_0, d_Constant_64_0, d_Constant_61_0, d_Dot_1633_0, d_Dot_1635_0, d_Dot_1636_0, d_Dot_1634_0, d_Dot_1627_0, d_Dot_1626_0, d_Dot_1632_0, d_Dot_1631_0, d_Dot_1629_0, d_Dot_1625_0, d_Dot_1630_0, d_Dot_1628_0, d_Dot_1620_0, d_Dot_1619_0, d_Dot_1623_0, d_Dot_1618_0, d_Dot_1622_0, d_Dot_1621_0, d_Dot_1617_0, d_Dot_1624_0, d_Dot_1615_0, d_Dot_1614_0, d_Dot_1613_0, d_Dot_1609_0, d_Dot_1612_0, d_Dot_1611_0, d_Dot_1616_0, d_Dot_1610_0, d_Dot_1590_0, d_Dot_1592_0, d_Dot_1591_0, d_Dot_1589_0, d_Dot_1596_0, d_Dot_1595_0, d_Dot_1599_0, d_Dot_1598_0, d_Dot_1594_0, d_Dot_1597_0, d_Dot_1593_0, d_Dot_1600_0, d_Dot_1608_0, d_Dot_1601_0, d_Dot_1604_0, d_Dot_1603_0, d_Dot_1602_0, d_Dot_1607_0, d_Dot_1606_0, d_Dot_1605_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2346
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_20_Call(dim3(6, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_1635_0, d_Dot_1631_0, d_Reshape_389_0, d_Reshape_1741_0, d_Add_1573_0, d_Dot_1633_0, d_Dot_1629_0, d_Reshape_385_0, d_Dot_1634_0, d_Dot_1630_0, d_Reshape_387_0, d_Dot_1636_0, d_Dot_1632_0, d_Reshape_391_0, d_Dot_1627_0, d_Dot_1623_0, d_Reshape_489_0, d_Reshape_1735_0, d_Add_1572_0, d_Dot_1625_0, d_Dot_1621_0, d_Reshape_485_0, d_Dot_1626_0, d_Dot_1622_0, d_Reshape_487_0, d_Dot_1628_0, d_Dot_1624_0, d_Reshape_491_0, d_Dot_1619_0, d_Dot_1615_0, d_Reshape_621_0, d_Reshape_1729_0, d_Add_1571_0, d_Dot_1617_0, d_Dot_1613_0, d_Reshape_617_0, d_Dot_1618_0, d_Dot_1614_0, d_Reshape_619_0, d_Dot_1620_0, d_Dot_1616_0, d_Reshape_623_0, d_Dot_1595_0, d_Dot_1591_0, d_Reshape_1209_0, d_Reshape_1711_0, d_Add_1568_0, d_Dot_1593_0, d_Dot_1589_0, d_Reshape_1205_0, d_Dot_1594_0, d_Dot_1590_0, d_Reshape_1207_0, d_Dot_1596_0, d_Dot_1592_0, d_Reshape_1211_0, d_Dot_1603_0, d_Dot_1599_0, d_Reshape_981_0, d_Reshape_1717_0, d_Add_1569_0, d_Dot_1601_0, d_Dot_1597_0, d_Reshape_977_0, d_Dot_1602_0, d_Dot_1598_0, d_Reshape_979_0, d_Dot_1604_0, d_Dot_1600_0, d_Reshape_983_0, d_Dot_1611_0, d_Dot_1607_0, d_Reshape_785_0, d_Reshape_1723_0, d_Add_1570_0, d_Dot_1609_0, d_Dot_1605_0, d_Reshape_781_0, d_Dot_1610_0, d_Dot_1606_0, d_Reshape_783_0, d_Dot_1612_0, d_Dot_1608_0, d_Reshape_787_0, d_Multiply_1780_0, d_Add_1767_0, d_Multiply_1779_0, d_Add_1766_0, d_Multiply_1778_0, d_Add_1763_0, d_Multiply_1775_0, d_Add_1764_0, d_Multiply_1776_0, d_Add_1765_0, d_Multiply_1777_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_20
    <<<dim3(6, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_1635_0, d_Dot_1631_0, d_Reshape_389_0, d_Reshape_1741_0, d_Add_1573_0, d_Dot_1633_0, d_Dot_1629_0, d_Reshape_385_0, d_Dot_1634_0, d_Dot_1630_0, d_Reshape_387_0, d_Dot_1636_0, d_Dot_1632_0, d_Reshape_391_0, d_Dot_1627_0, d_Dot_1623_0, d_Reshape_489_0, d_Reshape_1735_0, d_Add_1572_0, d_Dot_1625_0, d_Dot_1621_0, d_Reshape_485_0, d_Dot_1626_0, d_Dot_1622_0, d_Reshape_487_0, d_Dot_1628_0, d_Dot_1624_0, d_Reshape_491_0, d_Dot_1619_0, d_Dot_1615_0, d_Reshape_621_0, d_Reshape_1729_0, d_Add_1571_0, d_Dot_1617_0, d_Dot_1613_0, d_Reshape_617_0, d_Dot_1618_0, d_Dot_1614_0, d_Reshape_619_0, d_Dot_1620_0, d_Dot_1616_0, d_Reshape_623_0, d_Dot_1595_0, d_Dot_1591_0, d_Reshape_1209_0, d_Reshape_1711_0, d_Add_1568_0, d_Dot_1593_0, d_Dot_1589_0, d_Reshape_1205_0, d_Dot_1594_0, d_Dot_1590_0, d_Reshape_1207_0, d_Dot_1596_0, d_Dot_1592_0, d_Reshape_1211_0, d_Dot_1603_0, d_Dot_1599_0, d_Reshape_981_0, d_Reshape_1717_0, d_Add_1569_0, d_Dot_1601_0, d_Dot_1597_0, d_Reshape_977_0, d_Dot_1602_0, d_Dot_1598_0, d_Reshape_979_0, d_Dot_1604_0, d_Dot_1600_0, d_Reshape_983_0, d_Dot_1611_0, d_Dot_1607_0, d_Reshape_785_0, d_Reshape_1723_0, d_Add_1570_0, d_Dot_1609_0, d_Dot_1605_0, d_Reshape_781_0, d_Dot_1610_0, d_Dot_1606_0, d_Reshape_783_0, d_Dot_1612_0, d_Dot_1608_0, d_Reshape_787_0, d_Multiply_1780_0, d_Add_1767_0, d_Multiply_1779_0, d_Add_1766_0, d_Multiply_1778_0, d_Add_1763_0, d_Multiply_1775_0, d_Add_1764_0, d_Multiply_1776_0, d_Add_1765_0, d_Multiply_1777_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2347
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_21_Call(dim3(320, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_1780_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Multiply_1779_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_37_0, d_Constant_57_0, d_Constant_54_0, d_Constant_51_0, d_Constant_48_0, d_Multiply_1778_0, d_Constant_58_0, d_Constant_69_0, d_Constant_66_0, d_Constant_52_0, d_Constant_55_0, d_Constant_63_0, d_Constant_49_0, d_Constant_60_0, d_Multiply_1775_0, d_Constant_94_0, d_Constant_91_0, d_Constant_88_0, d_Constant_85_0, d_Multiply_1776_0, d_Constant_90_0, d_Constant_87_0, d_Constant_76_0, d_Constant_84_0, d_Constant_82_0, d_Constant_73_0, d_Constant_79_0, d_Constant_93_0, d_Multiply_1777_0, d_Constant_70_0, d_Constant_64_0, d_Constant_61_0, d_Constant_67_0, d_Constant_81_0, d_Constant_78_0, d_Constant_72_0, d_Constant_75_0, d_Dot_1820_0, d_Dot_1819_0, d_Dot_1818_0, d_Dot_1817_0, d_Dot_1816_0, d_Dot_1815_0, d_Dot_1814_0, d_Dot_1813_0, d_Dot_1812_0, d_Dot_1811_0, d_Dot_1810_0, d_Dot_1809_0, d_Dot_1808_0, d_Dot_1804_0, d_Dot_1803_0, d_Dot_1806_0, d_Dot_1807_0, d_Dot_1802_0, d_Dot_1805_0, d_Dot_1801_0, d_Dot_1784_0, d_Dot_1783_0, d_Dot_1782_0, d_Dot_1781_0, d_Dot_1787_0, d_Dot_1786_0, d_Dot_1790_0, d_Dot_1785_0, d_Dot_1792_0, d_Dot_1789_0, d_Dot_1791_0, d_Dot_1788_0, d_Dot_1800_0, d_Dot_1798_0, d_Dot_1797_0, d_Dot_1799_0, d_Dot_1796_0, d_Dot_1795_0, d_Dot_1793_0, d_Dot_1794_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_21
    <<<dim3(320, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_1780_0, d_Constant_45_0, d_Constant_42_0, d_Constant_39_0, d_Constant_36_0, d_Multiply_1779_0, d_Constant_46_0, d_Constant_43_0, d_Constant_40_0, d_Constant_37_0, d_Constant_57_0, d_Constant_54_0, d_Constant_51_0, d_Constant_48_0, d_Multiply_1778_0, d_Constant_58_0, d_Constant_69_0, d_Constant_66_0, d_Constant_52_0, d_Constant_55_0, d_Constant_63_0, d_Constant_49_0, d_Constant_60_0, d_Multiply_1775_0, d_Constant_94_0, d_Constant_91_0, d_Constant_88_0, d_Constant_85_0, d_Multiply_1776_0, d_Constant_90_0, d_Constant_87_0, d_Constant_76_0, d_Constant_84_0, d_Constant_82_0, d_Constant_73_0, d_Constant_79_0, d_Constant_93_0, d_Multiply_1777_0, d_Constant_70_0, d_Constant_64_0, d_Constant_61_0, d_Constant_67_0, d_Constant_81_0, d_Constant_78_0, d_Constant_72_0, d_Constant_75_0, d_Dot_1820_0, d_Dot_1819_0, d_Dot_1818_0, d_Dot_1817_0, d_Dot_1816_0, d_Dot_1815_0, d_Dot_1814_0, d_Dot_1813_0, d_Dot_1812_0, d_Dot_1811_0, d_Dot_1810_0, d_Dot_1809_0, d_Dot_1808_0, d_Dot_1804_0, d_Dot_1803_0, d_Dot_1806_0, d_Dot_1807_0, d_Dot_1802_0, d_Dot_1805_0, d_Dot_1801_0, d_Dot_1784_0, d_Dot_1783_0, d_Dot_1782_0, d_Dot_1781_0, d_Dot_1787_0, d_Dot_1786_0, d_Dot_1790_0, d_Dot_1785_0, d_Dot_1792_0, d_Dot_1789_0, d_Dot_1791_0, d_Dot_1788_0, d_Dot_1800_0, d_Dot_1798_0, d_Dot_1797_0, d_Dot_1799_0, d_Dot_1796_0, d_Dot_1795_0, d_Dot_1793_0, d_Dot_1794_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2348
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_22_Call(dim3(5, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_1819_0, d_Dot_1815_0, d_Reshape_489_0, d_Reshape_1907_0, d_Add_1767_0, d_Dot_1817_0, d_Dot_1813_0, d_Reshape_485_0, d_Dot_1818_0, d_Dot_1814_0, d_Reshape_487_0, d_Dot_1820_0, d_Dot_1816_0, d_Reshape_491_0, d_Dot_1811_0, d_Dot_1807_0, d_Reshape_621_0, d_Reshape_1901_0, d_Add_1766_0, d_Dot_1809_0, d_Dot_1805_0, d_Reshape_617_0, d_Dot_1810_0, d_Dot_1806_0, d_Reshape_619_0, d_Dot_1812_0, d_Dot_1808_0, d_Reshape_623_0, d_Dot_1787_0, d_Dot_1783_0, d_Reshape_1209_0, d_Reshape_1883_0, d_Add_1763_0, d_Dot_1785_0, d_Dot_1781_0, d_Reshape_1205_0, d_Dot_1786_0, d_Dot_1782_0, d_Reshape_1207_0, d_Dot_1788_0, d_Dot_1784_0, d_Reshape_1211_0, d_Dot_1803_0, d_Dot_1799_0, d_Reshape_785_0, d_Reshape_1895_0, d_Add_1765_0, d_Dot_1801_0, d_Dot_1797_0, d_Reshape_781_0, d_Dot_1802_0, d_Dot_1798_0, d_Reshape_783_0, d_Dot_1804_0, d_Dot_1800_0, d_Reshape_787_0, d_Dot_1795_0, d_Dot_1791_0, d_Reshape_981_0, d_Reshape_1889_0, d_Add_1764_0, d_Dot_1793_0, d_Dot_1789_0, d_Reshape_977_0, d_Dot_1794_0, d_Dot_1790_0, d_Reshape_979_0, d_Dot_1796_0, d_Dot_1792_0, d_Reshape_983_0, d_Multiply_1940_0, d_Add_1929_0, d_Multiply_1939_0, d_Add_1926_0, d_Multiply_1936_0, d_Add_1928_0, d_Multiply_1938_0, d_Add_1927_0, d_Multiply_1937_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_fused_kernel_22
    <<<dim3(5, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_1819_0, d_Dot_1815_0, d_Reshape_489_0, d_Reshape_1907_0, d_Add_1767_0, d_Dot_1817_0, d_Dot_1813_0, d_Reshape_485_0, d_Dot_1818_0, d_Dot_1814_0, d_Reshape_487_0, d_Dot_1820_0, d_Dot_1816_0, d_Reshape_491_0, d_Dot_1811_0, d_Dot_1807_0, d_Reshape_621_0, d_Reshape_1901_0, d_Add_1766_0, d_Dot_1809_0, d_Dot_1805_0, d_Reshape_617_0, d_Dot_1810_0, d_Dot_1806_0, d_Reshape_619_0, d_Dot_1812_0, d_Dot_1808_0, d_Reshape_623_0, d_Dot_1787_0, d_Dot_1783_0, d_Reshape_1209_0, d_Reshape_1883_0, d_Add_1763_0, d_Dot_1785_0, d_Dot_1781_0, d_Reshape_1205_0, d_Dot_1786_0, d_Dot_1782_0, d_Reshape_1207_0, d_Dot_1788_0, d_Dot_1784_0, d_Reshape_1211_0, d_Dot_1803_0, d_Dot_1799_0, d_Reshape_785_0, d_Reshape_1895_0, d_Add_1765_0, d_Dot_1801_0, d_Dot_1797_0, d_Reshape_781_0, d_Dot_1802_0, d_Dot_1798_0, d_Reshape_783_0, d_Dot_1804_0, d_Dot_1800_0, d_Reshape_787_0, d_Dot_1795_0, d_Dot_1791_0, d_Reshape_981_0, d_Reshape_1889_0, d_Add_1764_0, d_Dot_1793_0, d_Dot_1789_0, d_Reshape_977_0, d_Dot_1794_0, d_Dot_1790_0, d_Reshape_979_0, d_Dot_1796_0, d_Dot_1792_0, d_Reshape_983_0, d_Multiply_1940_0, d_Add_1929_0, d_Multiply_1939_0, d_Add_1926_0, d_Multiply_1936_0, d_Add_1928_0, d_Multiply_1938_0, d_Add_1927_0, d_Multiply_1937_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2349
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_23_Call(dim3(256, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_1940_0, d_Constant_54_0, d_Constant_57_0, d_Constant_51_0, d_Constant_48_0, d_Multiply_1939_0, d_Constant_66_0, d_Constant_52_0, d_Constant_49_0, d_Constant_69_0, d_Constant_60_0, d_Constant_63_0, d_Constant_58_0, d_Constant_55_0, d_Multiply_1936_0, d_Constant_88_0, d_Constant_85_0, d_Constant_94_0, d_Constant_91_0, d_Multiply_1938_0, d_Constant_70_0, d_Constant_67_0, d_Constant_64_0, d_Constant_61_0, d_Constant_81_0, d_Constant_78_0, d_Constant_75_0, d_Constant_72_0, d_Multiply_1937_0, d_Constant_87_0, d_Constant_73_0, d_Constant_93_0, d_Constant_84_0, d_Constant_90_0, d_Constant_82_0, d_Constant_79_0, d_Constant_76_0, d_Dot_1971_0, d_Dot_1972_0, d_Dot_1970_0, d_Dot_1969_0, d_Dot_1963_0, d_Dot_1966_0, d_Dot_1965_0, d_Dot_1964_0, d_Dot_1961_0, d_Dot_1962_0, d_Dot_1968_0, d_Dot_1967_0, d_Dot_1942_0, d_Dot_1941_0, d_Dot_1944_0, d_Dot_1943_0, d_Dot_1960_0, d_Dot_1959_0, d_Dot_1958_0, d_Dot_1957_0, d_Dot_1956_0, d_Dot_1955_0, d_Dot_1954_0, d_Dot_1953_0, d_Dot_1946_0, d_Dot_1949_0, d_Dot_1948_0, d_Dot_1945_0, d_Dot_1947_0, d_Dot_1952_0, d_Dot_1951_0, d_Dot_1950_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_23
    <<<dim3(256, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_1940_0, d_Constant_54_0, d_Constant_57_0, d_Constant_51_0, d_Constant_48_0, d_Multiply_1939_0, d_Constant_66_0, d_Constant_52_0, d_Constant_49_0, d_Constant_69_0, d_Constant_60_0, d_Constant_63_0, d_Constant_58_0, d_Constant_55_0, d_Multiply_1936_0, d_Constant_88_0, d_Constant_85_0, d_Constant_94_0, d_Constant_91_0, d_Multiply_1938_0, d_Constant_70_0, d_Constant_67_0, d_Constant_64_0, d_Constant_61_0, d_Constant_81_0, d_Constant_78_0, d_Constant_75_0, d_Constant_72_0, d_Multiply_1937_0, d_Constant_87_0, d_Constant_73_0, d_Constant_93_0, d_Constant_84_0, d_Constant_90_0, d_Constant_82_0, d_Constant_79_0, d_Constant_76_0, d_Dot_1971_0, d_Dot_1972_0, d_Dot_1970_0, d_Dot_1969_0, d_Dot_1963_0, d_Dot_1966_0, d_Dot_1965_0, d_Dot_1964_0, d_Dot_1961_0, d_Dot_1962_0, d_Dot_1968_0, d_Dot_1967_0, d_Dot_1942_0, d_Dot_1941_0, d_Dot_1944_0, d_Dot_1943_0, d_Dot_1960_0, d_Dot_1959_0, d_Dot_1958_0, d_Dot_1957_0, d_Dot_1956_0, d_Dot_1955_0, d_Dot_1954_0, d_Dot_1953_0, d_Dot_1946_0, d_Dot_1949_0, d_Dot_1948_0, d_Dot_1945_0, d_Dot_1947_0, d_Dot_1952_0, d_Dot_1951_0, d_Dot_1950_0);
  cudaDeviceSynchronize();
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_24_Call(dim3(4, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_1971_0, d_Dot_1967_0, d_Reshape_621_0, d_Reshape_2041_0, d_Add_1929_0, d_Dot_1969_0, d_Dot_1965_0, d_Reshape_617_0, d_Dot_1970_0, d_Dot_1966_0, d_Reshape_619_0, d_Dot_1972_0, d_Dot_1968_0, d_Reshape_623_0, d_Dot_1963_0, d_Dot_1959_0, d_Reshape_785_0, d_Reshape_2035_0, d_Add_1928_0, d_Dot_1961_0, d_Dot_1957_0, d_Reshape_781_0, d_Dot_1962_0, d_Dot_1958_0, d_Reshape_783_0, d_Dot_1964_0, d_Dot_1960_0, d_Reshape_787_0, d_Dot_1947_0, d_Dot_1943_0, d_Reshape_1209_0, d_Reshape_2023_0, d_Add_1926_0, d_Dot_1945_0, d_Dot_1941_0, d_Reshape_1205_0, d_Dot_1946_0, d_Dot_1942_0, d_Reshape_1207_0, d_Dot_1948_0, d_Dot_1944_0, d_Reshape_1211_0, d_Dot_1955_0, d_Dot_1951_0, d_Reshape_981_0, d_Reshape_2029_0, d_Add_1927_0, d_Dot_1953_0, d_Dot_1949_0, d_Reshape_977_0, d_Dot_1954_0, d_Dot_1950_0, d_Reshape_979_0, d_Dot_1956_0, d_Dot_1952_0, d_Reshape_983_0, d_Multiply_2068_0, d_Add_2059_0, d_Multiply_2067_0, d_Add_2057_0, d_Multiply_2065_0, d_Add_2058_0, d_Multiply_2066_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_fused_kernel_24
    <<<dim3(4, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_1971_0, d_Dot_1967_0, d_Reshape_621_0, d_Reshape_2041_0, d_Add_1929_0, d_Dot_1969_0, d_Dot_1965_0, d_Reshape_617_0, d_Dot_1970_0, d_Dot_1966_0, d_Reshape_619_0, d_Dot_1972_0, d_Dot_1968_0, d_Reshape_623_0, d_Dot_1963_0, d_Dot_1959_0, d_Reshape_785_0, d_Reshape_2035_0, d_Add_1928_0, d_Dot_1961_0, d_Dot_1957_0, d_Reshape_781_0, d_Dot_1962_0, d_Dot_1958_0, d_Reshape_783_0, d_Dot_1964_0, d_Dot_1960_0, d_Reshape_787_0, d_Dot_1947_0, d_Dot_1943_0, d_Reshape_1209_0, d_Reshape_2023_0, d_Add_1926_0, d_Dot_1945_0, d_Dot_1941_0, d_Reshape_1205_0, d_Dot_1946_0, d_Dot_1942_0, d_Reshape_1207_0, d_Dot_1948_0, d_Dot_1944_0, d_Reshape_1211_0, d_Dot_1955_0, d_Dot_1951_0, d_Reshape_981_0, d_Reshape_2029_0, d_Add_1927_0, d_Dot_1953_0, d_Dot_1949_0, d_Reshape_977_0, d_Dot_1954_0, d_Dot_1950_0, d_Reshape_979_0, d_Dot_1956_0, d_Dot_1952_0, d_Reshape_983_0, d_Multiply_2068_0, d_Add_2059_0, d_Multiply_2067_0, d_Add_2057_0, d_Multiply_2065_0, d_Add_2058_0, d_Multiply_2066_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2351
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_25_Call(dim3(192, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_2068_0, d_Constant_66_0, d_Constant_60_0, d_Constant_63_0, d_Constant_69_0, d_Multiply_2067_0, d_Constant_72_0, d_Constant_70_0, d_Constant_64_0, d_Constant_67_0, d_Constant_81_0, d_Constant_61_0, d_Constant_78_0, d_Constant_75_0, d_Multiply_2065_0, d_Constant_85_0, d_Constant_94_0, d_Constant_91_0, d_Constant_88_0, d_Multiply_2066_0, d_Constant_82_0, d_Constant_84_0, d_Constant_93_0, d_Constant_90_0, d_Constant_79_0, d_Constant_87_0, d_Constant_76_0, d_Constant_73_0, d_Dot_2091_0, d_Dot_2089_0, d_Dot_2090_0, d_Dot_2092_0, d_Dot_2081_0, d_Dot_2088_0, d_Dot_2086_0, d_Dot_2087_0, d_Dot_2084_0, d_Dot_2085_0, d_Dot_2083_0, d_Dot_2082_0, d_Dot_2069_0, d_Dot_2072_0, d_Dot_2071_0, d_Dot_2070_0, d_Dot_2080_0, d_Dot_2073_0, d_Dot_2076_0, d_Dot_2075_0, d_Dot_2079_0, d_Dot_2074_0, d_Dot_2078_0, d_Dot_2077_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_25
    <<<dim3(192, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_2068_0, d_Constant_66_0, d_Constant_60_0, d_Constant_63_0, d_Constant_69_0, d_Multiply_2067_0, d_Constant_72_0, d_Constant_70_0, d_Constant_64_0, d_Constant_67_0, d_Constant_81_0, d_Constant_61_0, d_Constant_78_0, d_Constant_75_0, d_Multiply_2065_0, d_Constant_85_0, d_Constant_94_0, d_Constant_91_0, d_Constant_88_0, d_Multiply_2066_0, d_Constant_82_0, d_Constant_84_0, d_Constant_93_0, d_Constant_90_0, d_Constant_79_0, d_Constant_87_0, d_Constant_76_0, d_Constant_73_0, d_Dot_2091_0, d_Dot_2089_0, d_Dot_2090_0, d_Dot_2092_0, d_Dot_2081_0, d_Dot_2088_0, d_Dot_2086_0, d_Dot_2087_0, d_Dot_2084_0, d_Dot_2085_0, d_Dot_2083_0, d_Dot_2082_0, d_Dot_2069_0, d_Dot_2072_0, d_Dot_2071_0, d_Dot_2070_0, d_Dot_2080_0, d_Dot_2073_0, d_Dot_2076_0, d_Dot_2075_0, d_Dot_2079_0, d_Dot_2074_0, d_Dot_2078_0, d_Dot_2077_0);
  cudaDeviceSynchronize();
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_26_Call(dim3(3, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_2091_0, d_Dot_2087_0, d_Reshape_785_0, d_Reshape_2143_0, d_Add_2059_0, d_Dot_2089_0, d_Dot_2085_0, d_Reshape_781_0, d_Dot_2090_0, d_Dot_2086_0, d_Reshape_783_0, d_Dot_2092_0, d_Dot_2088_0, d_Reshape_787_0, d_Dot_2075_0, d_Dot_2071_0, d_Reshape_1209_0, d_Reshape_2131_0, d_Add_2057_0, d_Dot_2073_0, d_Dot_2069_0, d_Reshape_1205_0, d_Dot_2074_0, d_Dot_2070_0, d_Reshape_1207_0, d_Dot_2076_0, d_Dot_2072_0, d_Reshape_1211_0, d_Dot_2083_0, d_Dot_2079_0, d_Reshape_981_0, d_Reshape_2137_0, d_Add_2058_0, d_Dot_2081_0, d_Dot_2077_0, d_Reshape_977_0, d_Dot_2082_0, d_Dot_2078_0, d_Reshape_979_0, d_Dot_2084_0, d_Dot_2080_0, d_Reshape_983_0, d_Multiply_2164_0, d_Add_2156_0, d_Multiply_2162_0, d_Add_2157_0, d_Multiply_2163_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_fused_kernel_26
    <<<dim3(3, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_2091_0, d_Dot_2087_0, d_Reshape_785_0, d_Reshape_2143_0, d_Add_2059_0, d_Dot_2089_0, d_Dot_2085_0, d_Reshape_781_0, d_Dot_2090_0, d_Dot_2086_0, d_Reshape_783_0, d_Dot_2092_0, d_Dot_2088_0, d_Reshape_787_0, d_Dot_2075_0, d_Dot_2071_0, d_Reshape_1209_0, d_Reshape_2131_0, d_Add_2057_0, d_Dot_2073_0, d_Dot_2069_0, d_Reshape_1205_0, d_Dot_2074_0, d_Dot_2070_0, d_Reshape_1207_0, d_Dot_2076_0, d_Dot_2072_0, d_Reshape_1211_0, d_Dot_2083_0, d_Dot_2079_0, d_Reshape_981_0, d_Reshape_2137_0, d_Add_2058_0, d_Dot_2081_0, d_Dot_2077_0, d_Reshape_977_0, d_Dot_2082_0, d_Dot_2078_0, d_Reshape_979_0, d_Dot_2084_0, d_Dot_2080_0, d_Reshape_983_0, d_Multiply_2164_0, d_Add_2156_0, d_Multiply_2162_0, d_Add_2157_0, d_Multiply_2163_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2353
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_27_Call(dim3(128, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_2164_0, d_Constant_81_0, d_Constant_78_0, d_Constant_75_0, d_Constant_72_0, d_Multiply_2162_0, d_Constant_91_0, d_Constant_94_0, d_Constant_88_0, d_Constant_85_0, d_Multiply_2163_0, d_Constant_82_0, d_Constant_79_0, d_Constant_87_0, d_Constant_76_0, d_Constant_73_0, d_Constant_84_0, d_Constant_93_0, d_Constant_90_0, d_Dot_2180_0, d_Dot_2179_0, d_Dot_2178_0, d_Dot_2177_0, d_Dot_2167_0, d_Dot_2168_0, d_Dot_2166_0, d_Dot_2165_0, d_Dot_2176_0, d_Dot_2175_0, d_Dot_2170_0, d_Dot_2174_0, d_Dot_2173_0, d_Dot_2169_0, d_Dot_2172_0, d_Dot_2171_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_27
    <<<dim3(128, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_2164_0, d_Constant_81_0, d_Constant_78_0, d_Constant_75_0, d_Constant_72_0, d_Multiply_2162_0, d_Constant_91_0, d_Constant_94_0, d_Constant_88_0, d_Constant_85_0, d_Multiply_2163_0, d_Constant_82_0, d_Constant_79_0, d_Constant_87_0, d_Constant_76_0, d_Constant_73_0, d_Constant_84_0, d_Constant_93_0, d_Constant_90_0, d_Dot_2180_0, d_Dot_2179_0, d_Dot_2178_0, d_Dot_2177_0, d_Dot_2167_0, d_Dot_2168_0, d_Dot_2166_0, d_Dot_2165_0, d_Dot_2176_0, d_Dot_2175_0, d_Dot_2170_0, d_Dot_2174_0, d_Dot_2173_0, d_Dot_2169_0, d_Dot_2172_0, d_Dot_2171_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2354
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_28_Call(dim3(2, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_2179_0, d_Dot_2175_0, d_Reshape_981_0, d_Reshape_2213_0, d_Add_2157_0, d_Dot_2177_0, d_Dot_2173_0, d_Reshape_977_0, d_Dot_2178_0, d_Dot_2174_0, d_Reshape_979_0, d_Dot_2180_0, d_Dot_2176_0, d_Reshape_983_0, d_Dot_2171_0, d_Dot_2167_0, d_Reshape_1209_0, d_Reshape_2207_0, d_Add_2156_0, d_Dot_2169_0, d_Dot_2165_0, d_Reshape_1205_0, d_Dot_2170_0, d_Dot_2166_0, d_Reshape_1207_0, d_Dot_2172_0, d_Dot_2168_0, d_Reshape_1211_0, d_Multiply_2228_0, d_Add_2223_0, d_Multiply_2227_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_fused_kernel_fused_kernel_28
    <<<dim3(2, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_2179_0, d_Dot_2175_0, d_Reshape_981_0, d_Reshape_2213_0, d_Add_2157_0, d_Dot_2177_0, d_Dot_2173_0, d_Reshape_977_0, d_Dot_2178_0, d_Dot_2174_0, d_Reshape_979_0, d_Dot_2180_0, d_Dot_2176_0, d_Reshape_983_0, d_Dot_2171_0, d_Dot_2167_0, d_Reshape_1209_0, d_Reshape_2207_0, d_Add_2156_0, d_Dot_2169_0, d_Dot_2165_0, d_Reshape_1205_0, d_Dot_2170_0, d_Dot_2166_0, d_Reshape_1207_0, d_Dot_2172_0, d_Dot_2168_0, d_Reshape_1211_0, d_Multiply_2228_0, d_Add_2223_0, d_Multiply_2227_0);
  cudaDeviceSynchronize();
  // name=blockfusion_kernel_2355
  //BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_29_Call(dim3(64, 1, 1), dim3(128, 1, 1), 0, 0, d_Multiply_2228_0, d_Constant_84_0, d_Constant_90_0, d_Constant_87_0, d_Constant_93_0, d_Multiply_2227_0, d_Constant_88_0, d_Constant_94_0, d_Constant_85_0, d_Constant_91_0, d_Dot_2233_0, d_Dot_2235_0, d_Dot_2234_0, d_Dot_2236_0, d_Dot_2230_0, d_Dot_2232_0, d_Dot_2229_0, d_Dot_2231_0);
  BlockFusionKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Dot_Dot_Dot_Dot_Dot_Dot_Dot_Dot_29
    <<<dim3(64, 1, 1), dim3(128, 1, 1), 0, 0>>>(d_Multiply_2228_0, d_Constant_84_0, d_Constant_90_0, d_Constant_87_0, d_Constant_93_0, d_Multiply_2227_0, d_Constant_88_0, d_Constant_94_0, d_Constant_85_0, d_Constant_91_0, d_Dot_2233_0, d_Dot_2235_0, d_Dot_2234_0, d_Dot_2236_0, d_Dot_2230_0, d_Dot_2232_0, d_Dot_2229_0, d_Dot_2231_0);
  cudaDeviceSynchronize();
  // name=fused_kernel_2325
  //FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_63_Call(dim3(1, 1, 1), dim3(256, 1, 1), 0, 0, d_Dot_2235_0, d_Dot_2231_0, d_Reshape_1209_0, d_Reshape_2251_0, d_Add_2223_0, d_Dot_2233_0, d_Dot_2229_0, d_Reshape_1205_0, d_Dot_2234_0, d_Dot_2230_0, d_Reshape_1207_0, d_Dot_2236_0, d_Dot_2232_0, d_Reshape_1211_0, d_Multiply_2260_0);
  FusedKernel_float_float_float_float_float_float_float_float_float_float_float_float_float_float_float_cuda_Add_Add_Broadcast_Add_Sigmoid_Multiply_Add_Add_Sigmoid_Add_Add_Tanh_Multiply_Add_Tanh_Add_Add_Sigmoid_Multiply_63
    <<<dim3(1, 1, 1), dim3(256, 1, 1), 0, 0>>>(d_Dot_2235_0, d_Dot_2231_0, d_Reshape_1209_0, d_Reshape_2251_0, d_Add_2223_0, d_Dot_2233_0, d_Dot_2229_0, d_Reshape_1205_0, d_Dot_2234_0, d_Dot_2230_0, d_Reshape_1207_0, d_Dot_2236_0, d_Dot_2232_0, d_Reshape_1211_0, d_Multiply_2260_0);
  //cudaDeviceSynchronize();
  // name=Result_2261
  //Result_float_float_cuda_lib_Result_2261(d_Multiply_2260_0, Result_2261_0);
  //*Result_2261_0 = Multiply_2260_0;
  //return 0;
}

extern "C" __launch_bounds__(1) __global__ void 
cdp_kernel(float *inp, float *out)
{
  cdp_internal(inp, out);
}

extern "C" __launch_bounds__(1) __global__ void 
pt_kernel(volatile g_params *d_stub, volatile uint32_t *door_bell)
{
  uint32_t wait_status;

  while(1) {
    while (1) {
      wait_status = ACCESS_ONCE(*(door_bell));
      if(wait_status == 1 || wait_status == 3) {
        break;
      }
    }

    if (wait_status != 1 && wait_status != 2)
      break;

    // Do work
    cdp_internal((float*)d_stub->req, (float*)d_stub->resp);

    // Signal work to be complete
    ACCESS_ONCE(*(door_bell)) = 2;
    __threadfence_system();
  }
}

extern "C" void 
cdp_entry(AppCtx *app_ctx)
{
  cdp_kernel<<<1, 1, 0, app_ctx->work_stream>>>
    ((float*)app_ctx->h_stub->req, (float*)app_ctx->h_stub->resp);
}

extern "C" void 
cuda_graph_entry(AppCtx *app_ctx)
{
  if(!app_ctx->graphCreated) {
    printf("Constructing CUDA graph\n");
    checkCudaErrors(cudaStreamBeginCapture(app_ctx->work_stream, cudaStreamCaptureModeGlobal));

    kernel_entry(app_ctx);
    checkCudaErrors(cudaStreamEndCapture(app_ctx->work_stream, &app_ctx->graph));
    checkCudaErrors(cudaGraphInstantiate(&app_ctx->instance, app_ctx->graph, NULL, NULL, 0));
    app_ctx->graphCreated = true;
  }
  checkCudaErrors(cudaGraphLaunch(app_ctx->instance, app_ctx->work_stream));
}

extern "C" void 
pt_entry(AppCtx *app_ctx)
{
  pt_kernel<<<1, 1, 0, app_ctx->work_stream>>>
    (app_ctx->d_stub, app_ctx->d_door_bell);
}

extern "C" void cuda_free()
{
  CUDA_SAFE_CALL(cudaSetDevice(0));
  CUDA_SAFE_CALL(cudaFree(group_0_CUDA_GPU0_allocator_memory_pool));
  CUDA_SAFE_CALL(cudaSetDevice(0));
  CUDA_SAFE_CALL(cudaFree(group_persist_CUDA_GPU0_allocator_memory_pool));
}
