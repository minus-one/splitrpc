// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: infer.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_infer_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_infer_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3018000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3018001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_infer_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

#ifdef PROFILE_MODE
void printPbStats();
#endif

// Internal implementation detail -- do not use these members.
struct TableStruct_infer_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_infer_2eproto;
namespace doinference {
class ScheduleReply;
struct ScheduleReplyDefaultTypeInternal;
extern ScheduleReplyDefaultTypeInternal _ScheduleReply_default_instance_;
class ScheduleRequest;
struct ScheduleRequestDefaultTypeInternal;
extern ScheduleRequestDefaultTypeInternal _ScheduleRequest_default_instance_;
}  // namespace doinference
PROTOBUF_NAMESPACE_OPEN
template<> ::doinference::ScheduleReply* Arena::CreateMaybeMessage<::doinference::ScheduleReply>(Arena*);
template<> ::doinference::ScheduleRequest* Arena::CreateMaybeMessage<::doinference::ScheduleRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace doinference {

// ===================================================================

class ScheduleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doinference.ScheduleRequest) */ {
 public:
  inline ScheduleRequest() : ScheduleRequest(nullptr) {}
  ~ScheduleRequest() override;
  explicit constexpr ScheduleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleRequest(const ScheduleRequest& from);
  ScheduleRequest(ScheduleRequest&& from) noexcept
    : ScheduleRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleRequest& operator=(const ScheduleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleRequest& operator=(ScheduleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleRequest*>(
               &_ScheduleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleRequest& a, ScheduleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleRequest* New() const final {
    return new ScheduleRequest();
  }

  ScheduleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScheduleRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doinference.ScheduleRequest";
  }
  protected:
  explicit ScheduleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kGuidFieldNumber = 1,
    kFuncidFieldNumber = 2,
    kSizeFieldNumber = 4,
  };
  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 guid = 1;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 funcid = 2;
  void clear_funcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 funcid() const;
  void set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_funcid() const;
  void _internal_set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:doinference.ScheduleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 funcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infer_2eproto;
};
// -------------------------------------------------------------------

class ScheduleReply final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:doinference.ScheduleReply) */ {
 public:
  inline ScheduleReply() : ScheduleReply(nullptr) {}
  ~ScheduleReply() override;
  explicit constexpr ScheduleReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleReply(const ScheduleReply& from);
  ScheduleReply(ScheduleReply&& from) noexcept
    : ScheduleReply() {
    *this = ::std::move(from);
  }

  inline ScheduleReply& operator=(const ScheduleReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleReply& operator=(ScheduleReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleReply* internal_default_instance() {
    return reinterpret_cast<const ScheduleReply*>(
               &_ScheduleReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleReply& a, ScheduleReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleReply* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScheduleReply* New() const final {
    return new ScheduleReply();
  }

  ScheduleReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScheduleReply>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleReply& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ScheduleReply& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "doinference.ScheduleReply";
  }
  protected:
  explicit ScheduleReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 3,
    kGuidFieldNumber = 1,
    kFuncidFieldNumber = 2,
    kSizeFieldNumber = 4,
  };
  // bytes payload = 3;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // uint64 guid = 1;
  void clear_guid();
  ::PROTOBUF_NAMESPACE_ID::uint64 guid() const;
  void set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_guid() const;
  void _internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint32 funcid = 2;
  void clear_funcid();
  ::PROTOBUF_NAMESPACE_ID::uint32 funcid() const;
  void set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_funcid() const;
  void _internal_set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 4;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:doinference.ScheduleReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::uint64 guid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 funcid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_infer_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScheduleRequest

// uint64 guid = 1;
inline void ScheduleRequest::clear_guid() {
  guid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScheduleRequest::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScheduleRequest::guid() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleRequest.guid)
  return _internal_guid();
}
inline void ScheduleRequest::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guid_ = value;
}
inline void ScheduleRequest::set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:doinference.ScheduleRequest.guid)
}

// uint32 funcid = 2;
inline void ScheduleRequest::clear_funcid() {
  funcid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleRequest::_internal_funcid() const {
  return funcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleRequest::funcid() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleRequest.funcid)
  return _internal_funcid();
}
inline void ScheduleRequest::_internal_set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  funcid_ = value;
}
inline void ScheduleRequest::set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_funcid(value);
  // @@protoc_insertion_point(field_set:doinference.ScheduleRequest.funcid)
}

// bytes payload = 3;
inline void ScheduleRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ScheduleRequest::payload() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doinference.ScheduleRequest.payload)
}
inline std::string* ScheduleRequest::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:doinference.ScheduleRequest.payload)
  return _s;
}
inline const std::string& ScheduleRequest::_internal_payload() const {
  return payload_.Get();
}
inline void ScheduleRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScheduleRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScheduleRequest::release_payload() {
  // @@protoc_insertion_point(field_release:doinference.ScheduleRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScheduleRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doinference.ScheduleRequest.payload)
}

// uint32 size = 4;
inline void ScheduleRequest::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleRequest::size() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleRequest.size)
  return _internal_size();
}
inline void ScheduleRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void ScheduleRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:doinference.ScheduleRequest.size)
}

// -------------------------------------------------------------------

// ScheduleReply

// uint64 guid = 1;
inline void ScheduleReply::clear_guid() {
  guid_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScheduleReply::_internal_guid() const {
  return guid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ScheduleReply::guid() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleReply.guid)
  return _internal_guid();
}
inline void ScheduleReply::_internal_set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  guid_ = value;
}
inline void ScheduleReply::set_guid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_guid(value);
  // @@protoc_insertion_point(field_set:doinference.ScheduleReply.guid)
}

// uint32 funcid = 2;
inline void ScheduleReply::clear_funcid() {
  funcid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleReply::_internal_funcid() const {
  return funcid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleReply::funcid() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleReply.funcid)
  return _internal_funcid();
}
inline void ScheduleReply::_internal_set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  funcid_ = value;
}
inline void ScheduleReply::set_funcid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_funcid(value);
  // @@protoc_insertion_point(field_set:doinference.ScheduleReply.funcid)
}

// bytes payload = 3;
inline void ScheduleReply::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ScheduleReply::payload() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleReply.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleReply::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:doinference.ScheduleReply.payload)
}
inline std::string* ScheduleReply::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:doinference.ScheduleReply.payload)
  return _s;
}
inline const std::string& ScheduleReply::_internal_payload() const {
  return payload_.Get();
}
inline void ScheduleReply::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScheduleReply::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScheduleReply::release_payload() {
  // @@protoc_insertion_point(field_release:doinference.ScheduleReply.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScheduleReply::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:doinference.ScheduleReply.payload)
}

// uint32 size = 4;
inline void ScheduleReply::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleReply::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScheduleReply::size() const {
  // @@protoc_insertion_point(field_get:doinference.ScheduleReply.size)
  return _internal_size();
}
inline void ScheduleReply::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void ScheduleReply::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:doinference.ScheduleReply.size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace doinference

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_infer_2eproto
